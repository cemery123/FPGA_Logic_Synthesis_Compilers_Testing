// -------------------------------------------------------------
// 
// File Name: E:\zgl\gen_7\slemi\emi_results\2024-05-23-08-02-25\SampleModel61741\Verilog_hdlsrc\sampleModel61741_pp_47_1_sub\Subsystem.v
// Created: 2024-05-23 08:43:24
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel61741_pp_47_1_sub/Subsystem
// Hierarchy Level: 0
// Model version: 1.1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] count_step;  // uint8
  wire [7:0] count_from;  // uint8
  reg [7:0] cfblk153_out1;  // uint8
  wire [7:0] count;  // uint8
  wire need_to_wrap;
  wire [7:0] count_value;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  wire [7:0] cfblk152_out1;  // uint8
  wire [7:0] cfblk131_const_val_1;  // uint8
  wire [7:0] cfblk131_out1;  // uint8
  wire [7:0] cfblk93_const_val_1;  // uint8
  wire [7:0] cfblk151_out1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  wire [7:0] cfblk24_out2;  // uint8
  wire [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk35_out2;  // uint8
  reg [7:0] emi_326_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_326_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_326_out1;  // uint8
  wire y1;
  wire [7:0] cfblk78_out1;  // uint8
  wire [7:0] cfblk54_out2;  // uint8
  reg [7:0] emi_278_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_278_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_278_out1;  // uint8
  wire y1_1;
  wire [7:0] cfblk172_out1;  // uint8
  wire [7:0] cfblk54_out1;  // uint8
  wire [7:0] cfblk107_const_val_1;  // uint8
  wire [7:0] cfblk107_out1;  // uint8
  wire [7:0] cfblk114_out1;  // uint8
  wire [7:0] cfblk114_out2;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  reg [7:0] emi_219_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_219_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_219_out1;  // uint8
  wire y1_2;
  wire [7:0] cfblk48_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  reg [7:0] emi_64_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_64_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_64_out1;  // uint8
  wire y1_3;
  wire [7:0] cfblk81_out1;  // uint8
  wire [7:0] cfblk145_const_val_1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk124_out1;  // uint8
  wire [7:0] cfblk18_const_val_1;  // uint8
  wire [7:0] cfblk73_const_val_1;  // uint8
  reg [7:0] emi_104_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_104_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_104_out1;  // uint8
  wire y1_4;
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] cfblk141_out1;  // uint8
  wire [7:0] cfblk94_const_val_1;  // uint8
  wire [7:0] cfblk12_out1;  // uint8
  reg [7:0] emi_24_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_24_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_24_out1;  // uint8
  wire y1_5;
  wire [7:0] cfblk20_out1;  // uint8
  reg [7:0] emi_40_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_40_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_40_out1;  // uint8
  wire y1_6;
  reg [7:0] cfblk42_out1;  // uint8
  reg [7:0] emi_228_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_228_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_228_out1;  // uint8
  wire y1_7;
  wire [7:0] cfblk118_out1;  // uint8
  reg [7:0] emi_162_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_162_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_162_out1;  // uint8
  wire y1_8;
  reg [7:0] cfblk6_out1;  // uint8
  reg [7:0] emi_203_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_203_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_203_out1;  // uint8
  wire y1_9;
  wire [7:0] cfblk33_out1;  // uint8
  reg [7:0] emi_294_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_294_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_294_out1;  // uint8
  wire y1_10;
  wire [7:0] cfblk69_out1;  // uint8
  reg [7:0] emi_358_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_358_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_358_out1;  // uint8
  wire y1_11;
  wire [7:0] cfblk8_out1;  // uint8
  reg [7:0] emi_187_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_187_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_187_out1;  // uint8
  wire y1_12;
  wire [7:0] cfblk137_out1;  // uint8
  reg [7:0] emi_334_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_334_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_334_out1;  // uint8
  wire y1_13;
  wire [7:0] cfblk32_out1;  // uint8
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  wire [7:0] cfblk128_out1;  // uint8
  reg [7:0] emi_72_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_72_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_72_out1;  // uint8
  wire y1_14;
  reg [7:0] cfblk117_out1;  // uint8
  wire [7:0] cfblk13_out1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  wire [7:0] cfblk110_out1;  // uint8
  reg [7:0] cfblk119_out1;  // uint8
  reg [7:0] cfblk162_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_out1;  // uint8
  wire [7:0] cfblk51_out1;  // uint8
  wire [7:0] cfblk49_out1;  // uint8
  wire [7:0] cfblk98_out1;  // uint8
  reg [7:0] emi_170_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_170_out1;  // uint8
  wire y1_15;
  wire [7:0] cfblk122_out1;  // uint8
  reg [7:0] emi_145_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_145_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_145_out1;  // uint8
  wire y1_16;
  wire [7:0] cfblk56_out1;  // uint8
  reg [7:0] emi_56_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_56_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_56_out1;  // uint8
  wire y1_17;
  wire [7:0] cfblk139_out1;  // uint8
  reg [7:0] emi_253_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_253_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_253_out1;  // uint8
  wire y1_18;
  wire [7:0] cfblk105_out1;  // uint8
  reg [7:0] emi_112_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_112_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_112_out1;  // uint8
  wire y1_19;
  wire [7:0] cfblk59_out1;  // uint8
  reg [7:0] emi_366_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_366_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_366_out1;  // uint8
  wire y1_20;
  wire [7:0] cfblk75_out1;  // uint8
  reg [7:0] emi_342_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_342_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_342_out1;  // uint8
  wire y1_21;
  wire [7:0] cfblk86_out1;  // uint8
  reg [7:0] emi_236_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_236_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_236_out1;  // uint8
  wire y1_22;
  wire [7:0] cfblk126_out1;  // uint8
  wire [7:0] cfblk60_out2;  // uint8
  wire [7:0] cfblk28_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk11_out1;  // uint8
  wire [7:0] cfblk82_out1;  // uint8
  wire [7:0] cfblk144_out1;  // uint8
  reg [7:0] cfblk97_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  reg [7:0] cfblk160_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  reg [7:0] emi_195_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_195_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_195_out1;  // uint8
  wire y1_23;
  wire [7:0] cfblk132_out1;  // uint8
  reg [7:0] emi_129_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_129_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_129_out1;  // uint8
  wire y1_24;
  reg [7:0] cfblk67_out1;  // uint8
  reg [7:0] emi_88_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_88_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_88_out1;  // uint8
  wire y1_25;
  reg [7:0] cfblk80_out1;  // uint8
  reg [7:0] emi_15_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_15_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_15_out1;  // uint8
  wire y1_26;
  wire [7:0] cfblk20_out2;  // uint8
  reg [7:0] cfblk169_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  wire [7:0] cfblk26_out1;  // uint8
  wire [7:0] cfblk73_out1;  // uint8
  wire [7:0] cfblk176_out1;  // uint8
  wire [7:0] cfblk142_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  wire [7:0] cfblk104_out1;  // uint8
  wire [7:0] cfblk115_out1;  // uint8
  wire [7:0] cfblk100_out1;  // uint8
  wire [7:0] cfblk155_out1;  // uint8
  wire [7:0] cfblk94_out1;  // uint8
  wire [7:0] cfblk96_out1;  // uint8
  wire [7:0] cfblk74_out1;  // uint8
  wire [7:0] cfblk134_out2;  // uint8
  wire [7:0] cfblk90_out1;  // uint8
  wire [7:0] cfblk109_out1;  // uint8
  wire [7:0] cfblk34_out1;  // uint8
  wire [7:0] cfblk18_out1;  // uint8
  wire [7:0] cfblk148_out1;  // uint8
  reg [7:0] cfblk159_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  wire [7:0] cfblk156_out1;  // uint8
  wire [7:0] cfblk143_out1;  // uint8
  wire [7:0] cfblk154_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  wire [7:0] cfblk134_out1;  // uint8
  wire [7:0] cfblk21_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  reg [7:0] cfblk158_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  reg [7:0] emi_350_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_350_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_350_out1;  // uint8
  wire y1_27;
  reg [7:0] cfblk40_out1;  // uint8
  reg [7:0] emi_32_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_32_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_32_out1;  // uint8
  wire y1_28;
  wire [7:0] cfblk71_out1;  // uint8
  reg [7:0] emi_7_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_7_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_7_out1;  // uint8
  wire y1_29;
  wire [7:0] cfblk103_out1;  // uint8
  reg [7:0] cfblk165_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_out1;  // uint8
  wire [7:0] cfblk57_out2;  // uint8
  wire [7:0] cfblk22_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  reg [7:0] cfblk157_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk157_out1;  // uint8
  reg [7:0] emi_245_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_245_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_245_out1;  // uint8
  wire y1_30;
  wire [7:0] cfblk140_out1;  // uint8
  reg [7:0] emi_178_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_178_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_178_out1;  // uint8
  wire y1_31;
  wire [7:0] cfblk50_out1;  // uint8
  reg [7:0] emi_153_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_153_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_153_out1;  // uint8
  wire y1_32;
  wire [7:0] cfblk14_out2;  // uint8
  reg [7:0] emi_211_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_211_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_211_out1;  // uint8
  wire y1_33;
  wire [7:0] cfblk175_out1;  // uint8
  reg [7:0] emi_121_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_121_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_121_out1;  // uint8
  wire y1_34;
  wire [7:0] cfblk130_out1;  // uint8
  reg [7:0] emi_137_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_137_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_137_out1;  // uint8
  wire y1_35;
  reg [7:0] cfblk72_out1;  // uint8
  reg [7:0] emi_80_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_80_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_80_out1;  // uint8
  wire y1_36;
  reg [7:0] cfblk30_out1;  // uint8
  wire [7:0] cfblk57_out1;  // uint8
  wire [7:0] cfblk133_out1;  // uint8
  reg [7:0] emi_270_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_270_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_270_out1;  // uint8
  wire y1_37;
  reg [7:0] emi_96_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_96_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_96_out1;  // uint8
  wire y1_38;
  reg [7:0] emi_310_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_310_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_310_out1;  // uint8
  wire y1_39;
  wire [7:0] cfblk62_out1;  // uint8
  wire [7:0] cfblk91_out1;  // uint8
  wire [7:0] cfblk91_out2;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  reg [7:0] cfblk46_out1;  // uint8
  wire [7:0] cfblk145_out1;  // uint8
  wire [7:0] cfblk31_out1;  // uint8
  reg [7:0] cfblk168_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_out1;  // uint8
  wire [7:0] cfblk61_out1;  // uint8
  wire [7:0] cfblk14_out1;  // uint8
  wire [7:0] cfblk177_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk29_out1;  // uint8
  wire [7:0] cfblk23_out1;  // uint8
  wire [7:0] cfblk55_out1;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  wire [7:0] cfblk7_out1;  // uint8
  wire [7:0] cfblk77_out1;  // uint8
  wire [7:0] cfblk76_out1;  // uint8
  reg [7:0] emi_262_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_262_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_262_out1;  // uint8
  wire y1_40;
  wire [7:0] cfblk112_out1;  // uint8
  reg [7:0] emi_318_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_318_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_318_out1;  // uint8
  wire y1_41;
  reg [7:0] emi_286_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_286_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_286_out1;  // uint8
  wire y1_42;
  wire [7:0] cfblk64_out1;  // uint8
  wire [7:0] cfblk65_out1;  // uint8
  wire [7:0] cfblk60_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  reg [7:0] cfblk164_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_out1;  // uint8
  wire [7:0] cfblk87_out1;  // uint8
  reg [7:0] cfblk79_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  wire [7:0] cfblk32_out2;  // uint8
  wire [7:0] cfblk111_out2;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  reg [7:0] cfblk166_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  reg [7:0] emi_48_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_48_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_48_out1;  // uint8
  wire y1_43;
  reg [7:0] cfblk167_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_out1;  // uint8
  wire [7:0] cfblk138_out1;  // uint8
  reg [7:0] cfblk123_out1;  // uint8
  wire [7:0] cfblk121_out1;  // uint8
  wire [7:0] cfblk111_out1;  // uint8
  reg [7:0] cfblk163_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_out1;  // uint8
  wire [7:0] cfblk51_out2;  // uint8
  wire [7:0] cfblk113_out2;  // uint8
  reg signed [31:0] emi_326_t_0_0;  // int32
  reg signed [31:0] emi_326_t_1;  // int32
  reg signed [31:0] emi_278_t_0_0;  // int32
  reg signed [31:0] emi_278_t_1;  // int32
  reg signed [31:0] emi_219_t_0_0;  // int32
  reg signed [31:0] emi_219_t_1;  // int32
  reg signed [31:0] emi_64_t_0_0;  // int32
  reg signed [31:0] emi_64_t_1;  // int32
  reg signed [31:0] emi_104_t_0_0;  // int32
  reg signed [31:0] emi_104_t_1;  // int32
  reg signed [31:0] emi_24_t_0_0;  // int32
  reg signed [31:0] emi_24_t_1;  // int32
  reg signed [31:0] emi_40_t_0_0;  // int32
  reg signed [31:0] emi_40_t_1;  // int32
  reg signed [31:0] emi_228_t_0_0;  // int32
  reg signed [31:0] emi_228_t_1;  // int32
  reg signed [31:0] emi_162_t_0_0;  // int32
  reg signed [31:0] emi_162_t_1;  // int32
  reg signed [31:0] emi_203_t_0_0;  // int32
  reg signed [31:0] emi_203_t_1;  // int32
  reg signed [31:0] emi_294_t_0_0;  // int32
  reg signed [31:0] emi_294_t_1;  // int32
  reg signed [31:0] emi_358_t_0_0;  // int32
  reg signed [31:0] emi_358_t_1;  // int32
  reg signed [31:0] emi_187_t_0_0;  // int32
  reg signed [31:0] emi_187_t_1;  // int32
  reg signed [31:0] emi_334_t_0_0;  // int32
  reg signed [31:0] emi_334_t_1;  // int32
  reg signed [31:0] cfblk171_t_0_0;  // int32
  reg signed [31:0] cfblk171_t_1;  // int32
  reg signed [31:0] emi_72_t_0_0;  // int32
  reg signed [31:0] emi_72_t_1;  // int32
  reg [8:0] cfblk119_div_temp;  // ufix9
  reg [8:0] cfblk119_t_0_0;  // ufix9
  reg signed [31:0] cfblk162_t_0_0;  // int32
  reg signed [31:0] cfblk162_t_1;  // int32
  reg signed [31:0] emi_170_t_0_0;  // int32
  reg signed [31:0] emi_170_t_1;  // int32
  reg signed [31:0] emi_145_t_0_0;  // int32
  reg signed [31:0] emi_145_t_1;  // int32
  reg signed [31:0] emi_56_t_0_0;  // int32
  reg signed [31:0] emi_56_t_1;  // int32
  reg signed [31:0] emi_253_t_0_0;  // int32
  reg signed [31:0] emi_253_t_1;  // int32
  reg signed [31:0] emi_112_t_0_0;  // int32
  reg signed [31:0] emi_112_t_1;  // int32
  reg signed [31:0] emi_366_t_0_0;  // int32
  reg signed [31:0] emi_366_t_1;  // int32
  reg signed [31:0] emi_342_t_0_0;  // int32
  reg signed [31:0] emi_342_t_1;  // int32
  reg signed [31:0] emi_236_t_0_0;  // int32
  reg signed [31:0] emi_236_t_1;  // int32
  reg [8:0] cfblk97_div_temp;  // ufix9
  reg [8:0] cfblk97_t_0_0;  // ufix9
  reg signed [31:0] cfblk160_t_0_0;  // int32
  reg signed [31:0] cfblk160_t_1;  // int32
  reg signed [31:0] emi_195_t_0_0;  // int32
  reg signed [31:0] emi_195_t_1;  // int32
  reg signed [31:0] emi_129_t_0_0;  // int32
  reg signed [31:0] emi_129_t_1;  // int32
  reg signed [31:0] emi_88_t_0_0;  // int32
  reg signed [31:0] emi_88_t_1;  // int32
  reg signed [31:0] emi_15_t_0_0;  // int32
  reg signed [31:0] emi_15_t_1;  // int32
  reg signed [31:0] cfblk169_t_0_0;  // int32
  reg signed [31:0] cfblk169_t_1;  // int32
  reg [8:0] cfblk80_div_temp;  // ufix9
  reg [8:0] cfblk80_t_0_0;  // ufix9
  reg [8:0] cfblk67_div_temp;  // ufix9
  reg [8:0] cfblk67_t_0_0;  // ufix9
  reg signed [31:0] cfblk159_t_0_0;  // int32
  reg signed [31:0] cfblk159_t_1;  // int32
  reg signed [31:0] cfblk158_t_0_0;  // int32
  reg signed [31:0] cfblk158_t_1;  // int32
  reg signed [31:0] emi_350_t_0_0;  // int32
  reg signed [31:0] emi_350_t_1;  // int32
  reg signed [31:0] emi_32_t_0_0;  // int32
  reg signed [31:0] emi_32_t_1;  // int32
  reg signed [31:0] emi_7_t_0_0;  // int32
  reg signed [31:0] emi_7_t_1;  // int32
  reg signed [31:0] cfblk165_t_0_0;  // int32
  reg signed [31:0] cfblk165_t_1;  // int32
  reg signed [31:0] cfblk157_t_0_0;  // int32
  reg signed [31:0] cfblk157_t_1;  // int32
  reg signed [31:0] emi_245_t_0_0;  // int32
  reg signed [31:0] emi_245_t_1;  // int32
  reg signed [31:0] emi_178_t_0_0;  // int32
  reg signed [31:0] emi_178_t_1;  // int32
  reg signed [31:0] emi_153_t_0_0;  // int32
  reg signed [31:0] emi_153_t_1;  // int32
  reg signed [31:0] emi_211_t_0_0;  // int32
  reg signed [31:0] emi_211_t_1;  // int32
  reg signed [31:0] emi_121_t_0_0;  // int32
  reg signed [31:0] emi_121_t_1;  // int32
  reg signed [31:0] emi_137_t_0_0;  // int32
  reg signed [31:0] emi_137_t_1;  // int32
  reg signed [31:0] emi_80_t_0_0;  // int32
  reg signed [31:0] emi_80_t_1;  // int32
  reg signed [31:0] emi_270_t_0_0;  // int32
  reg signed [31:0] emi_270_t_1;  // int32
  reg signed [31:0] emi_96_t_0_0;  // int32
  reg signed [31:0] emi_96_t_1;  // int32
  reg signed [31:0] emi_310_t_0_0;  // int32
  reg signed [31:0] emi_310_t_1;  // int32
  reg [8:0] cfblk46_div_temp;  // ufix9
  reg [8:0] cfblk46_t_0_0;  // ufix9
  reg signed [31:0] cfblk168_t_0_0;  // int32
  reg signed [31:0] cfblk168_t_1;  // int32
  reg [8:0] cfblk72_div_temp;  // ufix9
  reg [8:0] cfblk72_t_0_0;  // ufix9
  reg [8:0] cfblk117_div_temp;  // ufix9
  reg [8:0] cfblk117_t_0_0;  // ufix9
  reg signed [31:0] cfblk170_t_0_0;  // int32
  reg signed [31:0] cfblk170_t_1;  // int32
  reg [8:0] cfblk40_div_temp;  // ufix9
  reg [8:0] cfblk40_t_0_0;  // ufix9
  reg signed [31:0] emi_262_t_0_0;  // int32
  reg signed [31:0] emi_262_t_1;  // int32
  reg signed [31:0] emi_318_t_0_0;  // int32
  reg signed [31:0] emi_318_t_1;  // int32
  reg signed [31:0] emi_286_t_0_0;  // int32
  reg signed [31:0] emi_286_t_1;  // int32
  reg signed [31:0] cfblk164_t_0_0;  // int32
  reg signed [31:0] cfblk164_t_1;  // int32
  reg [8:0] cfblk79_div_temp;  // ufix9
  reg [8:0] cfblk79_t_0_0;  // ufix9
  reg [8:0] cfblk30_div_temp;  // ufix9
  reg [8:0] cfblk30_t_0_0;  // ufix9
  reg [8:0] cfblk6_div_temp;  // ufix9
  reg [8:0] cfblk6_t_0_0;  // ufix9
  reg signed [31:0] cfblk166_t_0_0;  // int32
  reg signed [31:0] cfblk166_t_1;  // int32
  reg signed [31:0] emi_48_t_0_0;  // int32
  reg signed [31:0] emi_48_t_1;  // int32
  reg signed [31:0] cfblk167_t_0_0;  // int32
  reg signed [31:0] cfblk167_t_1;  // int32
  reg [8:0] cfblk123_div_temp;  // ufix9
  reg [8:0] cfblk123_t_0_0;  // ufix9
  reg signed [31:0] cfblk163_t_0_0;  // int32
  reg signed [31:0] cfblk163_t_1;  // int32
  reg [8:0] cfblk42_div_temp;  // ufix9
  reg [8:0] cfblk42_t_0_0;  // ufix9


  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 25
  assign count_step = 8'b00000001;



  assign count_from = 8'b00000000;



  assign enb = clk_enable;

  assign count = cfblk153_out1 + count_step;



  assign need_to_wrap = cfblk153_out1 == 8'b00011001;



  assign count_value = (need_to_wrap == 1'b0 ? count :
              count_from);



  always @(posedge clk or posedge reset)
    begin : cfblk153_process
      if (reset == 1'b1) begin
        cfblk153_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk153_out1 <= count_value;
        end
      end
    end



  assign cfblk43_out1 = cfblk153_out1 + cfblk153_out1;



  assign cfblk152_out1 = 8'b00000001;



  assign cfblk131_const_val_1 = 8'b00000000;



  assign cfblk131_out1 = cfblk152_out1 + cfblk131_const_val_1;



  assign cfblk93_const_val_1 = 8'b00000000;



  assign cfblk151_out1 = 8'b00000001;



  assign cfblk24_out1 = cfblk151_out1;
  assign cfblk24_out2 = 8'b00000000;



  assign cfblk35_out1 = cfblk24_out1;
  assign cfblk35_out2 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : emi_326_process
      if (reset == 1'b1) begin
        for(emi_326_t_1 = 32'sd0; emi_326_t_1 <= 32'sd1; emi_326_t_1 = emi_326_t_1 + 32'sd1) begin
          emi_326_reg[emi_326_t_1] <= 8'b00000001;
        end
      end
      else begin
        if (enb) begin
          for(emi_326_t_0_0 = 32'sd0; emi_326_t_0_0 <= 32'sd1; emi_326_t_0_0 = emi_326_t_0_0 + 32'sd1) begin
            emi_326_reg[emi_326_t_0_0] <= emi_326_reg_next[emi_326_t_0_0];
          end
        end
      end
    end

  assign emi_326_out1 = emi_326_reg[1];
  assign emi_326_reg_next[0] = cfblk131_out1;
  assign emi_326_reg_next[1] = emi_326_reg[0];



  assign y1 = emi_326_out1 >= 8'b00000001;



  cfblk78_block u_cfblk78 (.clk(clk),
                           .reset(reset),
                           .enb(clk_enable),
                           .emi_320(cfblk131_out1),  // uint8
                           .Action_Port(y1),
                           .emi_321(cfblk78_out1)  // uint8
                           );

  always @(posedge clk or posedge reset)
    begin : emi_278_process
      if (reset == 1'b1) begin
        for(emi_278_t_1 = 32'sd0; emi_278_t_1 <= 32'sd1; emi_278_t_1 = emi_278_t_1 + 32'sd1) begin
          emi_278_reg[emi_278_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_278_t_0_0 = 32'sd0; emi_278_t_0_0 <= 32'sd1; emi_278_t_0_0 = emi_278_t_0_0 + 32'sd1) begin
            emi_278_reg[emi_278_t_0_0] <= emi_278_reg_next[emi_278_t_0_0];
          end
        end
      end
    end

  assign emi_278_out1 = emi_278_reg[1];
  assign emi_278_reg_next[0] = cfblk54_out2;
  assign emi_278_reg_next[1] = emi_278_reg[0];



  assign y1_1 = 1'b1;



  cfblk172 u_cfblk172 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_272(cfblk54_out2),  // uint8
                       .Action_Port(y1_1),
                       .emi_273(cfblk172_out1)  // uint8
                       );

  assign cfblk54_out1 = cfblk172_out1;
  assign cfblk54_out2 = 8'b00000000;



  assign cfblk107_const_val_1 = 8'b00000000;



  assign cfblk107_out1 = cfblk54_out1 + cfblk107_const_val_1;



  assign cfblk114_out1 = cfblk107_out1;
  assign cfblk114_out2 = 8'b00000000;



  cfblk5 u_cfblk5 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk114_out1),  // uint8
                   .Y(cfblk5_out1)  // uint8
                   );

  assign cfblk58_out1 = (cfblk5_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : emi_219_process
      if (reset == 1'b1) begin
        for(emi_219_t_1 = 32'sd0; emi_219_t_1 <= 32'sd1; emi_219_t_1 = emi_219_t_1 + 32'sd1) begin
          emi_219_reg[emi_219_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_219_t_0_0 = 32'sd0; emi_219_t_0_0 <= 32'sd1; emi_219_t_0_0 = emi_219_t_0_0 + 32'sd1) begin
            emi_219_reg[emi_219_t_0_0] <= emi_219_reg_next[emi_219_t_0_0];
          end
        end
      end
    end

  assign emi_219_out1 = emi_219_reg[1];
  assign emi_219_reg_next[0] = cfblk58_out1;
  assign emi_219_reg_next[1] = emi_219_reg[0];



  assign y1_2 = 1'b1;



  cfblk48 u_cfblk48 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_213(cfblk58_out1),  // uint8
                     .Action_Port(y1_2),
                     .emi_214(cfblk48_out1)  // uint8
                     );

  cfblk1 u_cfblk1 (.u(cfblk48_out1),  // uint8
                   .y(cfblk1_out1)  // uint8
                   );

  always @(posedge clk or posedge reset)
    begin : emi_64_process
      if (reset == 1'b1) begin
        for(emi_64_t_1 = 32'sd0; emi_64_t_1 <= 32'sd1; emi_64_t_1 = emi_64_t_1 + 32'sd1) begin
          emi_64_reg[emi_64_t_1] <= 8'b00000001;
        end
      end
      else begin
        if (enb) begin
          for(emi_64_t_0_0 = 32'sd0; emi_64_t_0_0 <= 32'sd1; emi_64_t_0_0 = emi_64_t_0_0 + 32'sd1) begin
            emi_64_reg[emi_64_t_0_0] <= emi_64_reg_next[emi_64_t_0_0];
          end
        end
      end
    end

  assign emi_64_out1 = emi_64_reg[1];
  assign emi_64_reg_next[0] = cfblk1_out1;
  assign emi_64_reg_next[1] = emi_64_reg[0];



  assign y1_3 = emi_64_out1 >= 8'b00000001;



  cfblk81 u_cfblk81 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_58(cfblk1_out1),  // uint8
                     .Action_Port(y1_3),
                     .emi_59(cfblk81_out1)  // uint8
                     );

  assign cfblk145_const_val_1 = 8'b00000000;



  cfblk4 u_cfblk4 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk48_out1),  // uint8
                   .Y(cfblk4_out1)  // uint8
                   );

  assign dtc_out = cfblk4_out1;



  assign cfblk124_out1 = dtc_out;



  assign cfblk18_const_val_1 = 8'b00000000;



  assign cfblk73_const_val_1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : emi_104_process
      if (reset == 1'b1) begin
        for(emi_104_t_1 = 32'sd0; emi_104_t_1 <= 32'sd1; emi_104_t_1 = emi_104_t_1 + 32'sd1) begin
          emi_104_reg[emi_104_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_104_t_0_0 = 32'sd0; emi_104_t_0_0 <= 32'sd1; emi_104_t_0_0 = emi_104_t_0_0 + 32'sd1) begin
            emi_104_reg[emi_104_t_0_0] <= emi_104_reg_next[emi_104_t_0_0];
          end
        end
      end
    end

  assign emi_104_out1 = emi_104_reg[1];
  assign emi_104_reg_next[0] = cfblk153_out1;
  assign emi_104_reg_next[1] = emi_104_reg[0];



  assign y1_4 = 1'b1;



  cfblk135 u_cfblk135 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_98(cfblk153_out1),  // uint8
                       .Action_Port(y1_4),
                       .emi_99(cfblk135_out1)  // uint8
                       );

  cfblk141 u_cfblk141 (.u(cfblk35_out2),  // uint8
                       .y(cfblk141_out1)  // uint8
                       );

  assign cfblk94_const_val_1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : emi_24_process
      if (reset == 1'b1) begin
        for(emi_24_t_1 = 32'sd0; emi_24_t_1 <= 32'sd1; emi_24_t_1 = emi_24_t_1 + 32'sd1) begin
          emi_24_reg[emi_24_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_24_t_0_0 = 32'sd0; emi_24_t_0_0 <= 32'sd1; emi_24_t_0_0 = emi_24_t_0_0 + 32'sd1) begin
            emi_24_reg[emi_24_t_0_0] <= emi_24_reg_next[emi_24_t_0_0];
          end
        end
      end
    end

  assign emi_24_out1 = emi_24_reg[1];
  assign emi_24_reg_next[0] = cfblk12_out1;
  assign emi_24_reg_next[1] = emi_24_reg[0];



  assign y1_5 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_40_process
      if (reset == 1'b1) begin
        for(emi_40_t_1 = 32'sd0; emi_40_t_1 <= 32'sd1; emi_40_t_1 = emi_40_t_1 + 32'sd1) begin
          emi_40_reg[emi_40_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_40_t_0_0 = 32'sd0; emi_40_t_0_0 <= 32'sd1; emi_40_t_0_0 = emi_40_t_0_0 + 32'sd1) begin
            emi_40_reg[emi_40_t_0_0] <= emi_40_reg_next[emi_40_t_0_0];
          end
        end
      end
    end

  assign emi_40_out1 = emi_40_reg[1];
  assign emi_40_reg_next[0] = cfblk20_out1;
  assign emi_40_reg_next[1] = emi_40_reg[0];



  assign y1_6 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_228_process
      if (reset == 1'b1) begin
        for(emi_228_t_1 = 32'sd0; emi_228_t_1 <= 32'sd1; emi_228_t_1 = emi_228_t_1 + 32'sd1) begin
          emi_228_reg[emi_228_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_228_t_0_0 = 32'sd0; emi_228_t_0_0 <= 32'sd1; emi_228_t_0_0 = emi_228_t_0_0 + 32'sd1) begin
            emi_228_reg[emi_228_t_0_0] <= emi_228_reg_next[emi_228_t_0_0];
          end
        end
      end
    end

  assign emi_228_out1 = emi_228_reg[1];
  assign emi_228_reg_next[0] = cfblk42_out1;
  assign emi_228_reg_next[1] = emi_228_reg[0];



  assign y1_7 = emi_228_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_162_process
      if (reset == 1'b1) begin
        for(emi_162_t_1 = 32'sd0; emi_162_t_1 <= 32'sd1; emi_162_t_1 = emi_162_t_1 + 32'sd1) begin
          emi_162_reg[emi_162_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_162_t_0_0 = 32'sd0; emi_162_t_0_0 <= 32'sd1; emi_162_t_0_0 = emi_162_t_0_0 + 32'sd1) begin
            emi_162_reg[emi_162_t_0_0] <= emi_162_reg_next[emi_162_t_0_0];
          end
        end
      end
    end

  assign emi_162_out1 = emi_162_reg[1];
  assign emi_162_reg_next[0] = cfblk118_out1;
  assign emi_162_reg_next[1] = emi_162_reg[0];



  assign y1_8 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_203_process
      if (reset == 1'b1) begin
        for(emi_203_t_1 = 32'sd0; emi_203_t_1 <= 32'sd1; emi_203_t_1 = emi_203_t_1 + 32'sd1) begin
          emi_203_reg[emi_203_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_203_t_0_0 = 32'sd0; emi_203_t_0_0 <= 32'sd1; emi_203_t_0_0 = emi_203_t_0_0 + 32'sd1) begin
            emi_203_reg[emi_203_t_0_0] <= emi_203_reg_next[emi_203_t_0_0];
          end
        end
      end
    end

  assign emi_203_out1 = emi_203_reg[1];
  assign emi_203_reg_next[0] = cfblk6_out1;
  assign emi_203_reg_next[1] = emi_203_reg[0];



  assign y1_9 = emi_203_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_294_process
      if (reset == 1'b1) begin
        for(emi_294_t_1 = 32'sd0; emi_294_t_1 <= 32'sd1; emi_294_t_1 = emi_294_t_1 + 32'sd1) begin
          emi_294_reg[emi_294_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_294_t_0_0 = 32'sd0; emi_294_t_0_0 <= 32'sd1; emi_294_t_0_0 = emi_294_t_0_0 + 32'sd1) begin
            emi_294_reg[emi_294_t_0_0] <= emi_294_reg_next[emi_294_t_0_0];
          end
        end
      end
    end

  assign emi_294_out1 = emi_294_reg[1];
  assign emi_294_reg_next[0] = cfblk33_out1;
  assign emi_294_reg_next[1] = emi_294_reg[0];



  assign y1_10 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_358_process
      if (reset == 1'b1) begin
        for(emi_358_t_1 = 32'sd0; emi_358_t_1 <= 32'sd1; emi_358_t_1 = emi_358_t_1 + 32'sd1) begin
          emi_358_reg[emi_358_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_358_t_0_0 = 32'sd0; emi_358_t_0_0 <= 32'sd1; emi_358_t_0_0 = emi_358_t_0_0 + 32'sd1) begin
            emi_358_reg[emi_358_t_0_0] <= emi_358_reg_next[emi_358_t_0_0];
          end
        end
      end
    end

  assign emi_358_out1 = emi_358_reg[1];
  assign emi_358_reg_next[0] = cfblk69_out1;
  assign emi_358_reg_next[1] = emi_358_reg[0];



  assign y1_11 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_187_process
      if (reset == 1'b1) begin
        for(emi_187_t_1 = 32'sd0; emi_187_t_1 <= 32'sd1; emi_187_t_1 = emi_187_t_1 + 32'sd1) begin
          emi_187_reg[emi_187_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_187_t_0_0 = 32'sd0; emi_187_t_0_0 <= 32'sd1; emi_187_t_0_0 = emi_187_t_0_0 + 32'sd1) begin
            emi_187_reg[emi_187_t_0_0] <= emi_187_reg_next[emi_187_t_0_0];
          end
        end
      end
    end

  assign emi_187_out1 = emi_187_reg[1];
  assign emi_187_reg_next[0] = cfblk8_out1;
  assign emi_187_reg_next[1] = emi_187_reg[0];



  assign y1_12 = emi_187_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_334_process
      if (reset == 1'b1) begin
        for(emi_334_t_1 = 32'sd0; emi_334_t_1 <= 32'sd1; emi_334_t_1 = emi_334_t_1 + 32'sd1) begin
          emi_334_reg[emi_334_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_334_t_0_0 = 32'sd0; emi_334_t_0_0 <= 32'sd1; emi_334_t_0_0 = emi_334_t_0_0 + 32'sd1) begin
            emi_334_reg[emi_334_t_0_0] <= emi_334_reg_next[emi_334_t_0_0];
          end
        end
      end
    end

  assign emi_334_out1 = emi_334_reg[1];
  assign emi_334_reg_next[0] = cfblk137_out1;
  assign emi_334_reg_next[1] = emi_334_reg[0];



  assign y1_13 = emi_334_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        for(cfblk171_t_1 = 32'sd0; cfblk171_t_1 <= 32'sd1; cfblk171_t_1 = cfblk171_t_1 + 32'sd1) begin
          cfblk171_reg[cfblk171_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk171_t_0_0 = 32'sd0; cfblk171_t_0_0 <= 32'sd1; cfblk171_t_0_0 = cfblk171_t_0_0 + 32'sd1) begin
            cfblk171_reg[cfblk171_t_0_0] <= cfblk171_reg_next[cfblk171_t_0_0];
          end
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk32_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  assign cfblk85_out1 = (cfblk127_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : emi_72_process
      if (reset == 1'b1) begin
        for(emi_72_t_1 = 32'sd0; emi_72_t_1 <= 32'sd1; emi_72_t_1 = emi_72_t_1 + 32'sd1) begin
          emi_72_reg[emi_72_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_72_t_0_0 = 32'sd0; emi_72_t_0_0 <= 32'sd1; emi_72_t_0_0 = emi_72_t_0_0 + 32'sd1) begin
            emi_72_reg[emi_72_t_0_0] <= emi_72_reg_next[emi_72_t_0_0];
          end
        end
      end
    end

  assign emi_72_out1 = emi_72_reg[1];
  assign emi_72_reg_next[0] = cfblk128_out1;
  assign emi_72_reg_next[1] = emi_72_reg[0];



  assign y1_14 = emi_72_out1 == 8'b11111111;



  assign cfblk128_out1 = cfblk141_out1 - cfblk117_out1;



  cfblk13 u_cfblk13 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_66(cfblk128_out1),  // uint8
                     .Action_Port(y1_14),
                     .emi_67(cfblk13_out1)  // uint8
                     );

  assign cfblk110_out1 = cfblk113_out1 - cfblk13_out1;



  always @(cfblk110_out1, cfblk85_out1) begin
    cfblk119_div_temp = 9'b000000000;
    cfblk119_t_0_0 = 9'b000000000;
    if (cfblk85_out1 == 8'b00000000) begin
      cfblk119_out1 = 8'b11111111;
    end
    else begin
      cfblk119_t_0_0 = {1'b0, cfblk110_out1};
      cfblk119_div_temp = cfblk119_t_0_0 / cfblk85_out1;
      if (cfblk119_div_temp[8] != 1'b0) begin
        cfblk119_out1 = 8'b11111111;
      end
      else begin
        cfblk119_out1 = cfblk119_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk162_process
      if (reset == 1'b1) begin
        for(cfblk162_t_1 = 32'sd0; cfblk162_t_1 <= 32'sd1; cfblk162_t_1 = cfblk162_t_1 + 32'sd1) begin
          cfblk162_reg[cfblk162_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk162_t_0_0 = 32'sd0; cfblk162_t_0_0 <= 32'sd1; cfblk162_t_0_0 = cfblk162_t_0_0 + 32'sd1) begin
            cfblk162_reg[cfblk162_t_0_0] <= cfblk162_reg_next[cfblk162_t_0_0];
          end
        end
      end
    end

  assign cfblk162_out1 = cfblk162_reg[1];
  assign cfblk162_reg_next[0] = cfblk119_out1;
  assign cfblk162_reg_next[1] = cfblk162_reg[0];



  cfblk49 u_cfblk49 (.u(cfblk51_out1),  // uint8
                     .y(cfblk49_out1)  // uint8
                     );

  always @(posedge clk or posedge reset)
    begin : emi_170_process
      if (reset == 1'b1) begin
        for(emi_170_t_1 = 32'sd0; emi_170_t_1 <= 32'sd1; emi_170_t_1 = emi_170_t_1 + 32'sd1) begin
          emi_170_reg[emi_170_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_170_t_0_0 = 32'sd0; emi_170_t_0_0 <= 32'sd1; emi_170_t_0_0 = emi_170_t_0_0 + 32'sd1) begin
            emi_170_reg[emi_170_t_0_0] <= emi_170_reg_next[emi_170_t_0_0];
          end
        end
      end
    end

  assign emi_170_out1 = emi_170_reg[1];
  assign emi_170_reg_next[0] = cfblk98_out1;
  assign emi_170_reg_next[1] = emi_170_reg[0];



  assign y1_15 = emi_170_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_145_process
      if (reset == 1'b1) begin
        for(emi_145_t_1 = 32'sd0; emi_145_t_1 <= 32'sd1; emi_145_t_1 = emi_145_t_1 + 32'sd1) begin
          emi_145_reg[emi_145_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_145_t_0_0 = 32'sd0; emi_145_t_0_0 <= 32'sd1; emi_145_t_0_0 = emi_145_t_0_0 + 32'sd1) begin
            emi_145_reg[emi_145_t_0_0] <= emi_145_reg_next[emi_145_t_0_0];
          end
        end
      end
    end

  assign emi_145_out1 = emi_145_reg[1];
  assign emi_145_reg_next[0] = cfblk122_out1;
  assign emi_145_reg_next[1] = emi_145_reg[0];



  assign y1_16 = emi_145_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_56_process
      if (reset == 1'b1) begin
        for(emi_56_t_1 = 32'sd0; emi_56_t_1 <= 32'sd1; emi_56_t_1 = emi_56_t_1 + 32'sd1) begin
          emi_56_reg[emi_56_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_56_t_0_0 = 32'sd0; emi_56_t_0_0 <= 32'sd1; emi_56_t_0_0 = emi_56_t_0_0 + 32'sd1) begin
            emi_56_reg[emi_56_t_0_0] <= emi_56_reg_next[emi_56_t_0_0];
          end
        end
      end
    end

  assign emi_56_out1 = emi_56_reg[1];
  assign emi_56_reg_next[0] = cfblk56_out1;
  assign emi_56_reg_next[1] = emi_56_reg[0];



  assign y1_17 = emi_56_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_253_process
      if (reset == 1'b1) begin
        for(emi_253_t_1 = 32'sd0; emi_253_t_1 <= 32'sd1; emi_253_t_1 = emi_253_t_1 + 32'sd1) begin
          emi_253_reg[emi_253_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_253_t_0_0 = 32'sd0; emi_253_t_0_0 <= 32'sd1; emi_253_t_0_0 = emi_253_t_0_0 + 32'sd1) begin
            emi_253_reg[emi_253_t_0_0] <= emi_253_reg_next[emi_253_t_0_0];
          end
        end
      end
    end

  assign emi_253_out1 = emi_253_reg[1];
  assign emi_253_reg_next[0] = cfblk139_out1;
  assign emi_253_reg_next[1] = emi_253_reg[0];



  assign y1_18 = emi_253_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_112_process
      if (reset == 1'b1) begin
        for(emi_112_t_1 = 32'sd0; emi_112_t_1 <= 32'sd1; emi_112_t_1 = emi_112_t_1 + 32'sd1) begin
          emi_112_reg[emi_112_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_112_t_0_0 = 32'sd0; emi_112_t_0_0 <= 32'sd1; emi_112_t_0_0 = emi_112_t_0_0 + 32'sd1) begin
            emi_112_reg[emi_112_t_0_0] <= emi_112_reg_next[emi_112_t_0_0];
          end
        end
      end
    end

  assign emi_112_out1 = emi_112_reg[1];
  assign emi_112_reg_next[0] = cfblk105_out1;
  assign emi_112_reg_next[1] = emi_112_reg[0];



  assign y1_19 = emi_112_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_366_process
      if (reset == 1'b1) begin
        for(emi_366_t_1 = 32'sd0; emi_366_t_1 <= 32'sd1; emi_366_t_1 = emi_366_t_1 + 32'sd1) begin
          emi_366_reg[emi_366_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_366_t_0_0 = 32'sd0; emi_366_t_0_0 <= 32'sd1; emi_366_t_0_0 = emi_366_t_0_0 + 32'sd1) begin
            emi_366_reg[emi_366_t_0_0] <= emi_366_reg_next[emi_366_t_0_0];
          end
        end
      end
    end

  assign emi_366_out1 = emi_366_reg[1];
  assign emi_366_reg_next[0] = cfblk59_out1;
  assign emi_366_reg_next[1] = emi_366_reg[0];



  assign y1_20 = emi_366_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_342_process
      if (reset == 1'b1) begin
        for(emi_342_t_1 = 32'sd0; emi_342_t_1 <= 32'sd1; emi_342_t_1 = emi_342_t_1 + 32'sd1) begin
          emi_342_reg[emi_342_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_342_t_0_0 = 32'sd0; emi_342_t_0_0 <= 32'sd1; emi_342_t_0_0 = emi_342_t_0_0 + 32'sd1) begin
            emi_342_reg[emi_342_t_0_0] <= emi_342_reg_next[emi_342_t_0_0];
          end
        end
      end
    end

  assign emi_342_out1 = emi_342_reg[1];
  assign emi_342_reg_next[0] = cfblk75_out1;
  assign emi_342_reg_next[1] = emi_342_reg[0];



  assign y1_21 = emi_342_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_236_process
      if (reset == 1'b1) begin
        for(emi_236_t_1 = 32'sd0; emi_236_t_1 <= 32'sd1; emi_236_t_1 = emi_236_t_1 + 32'sd1) begin
          emi_236_reg[emi_236_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_236_t_0_0 = 32'sd0; emi_236_t_0_0 <= 32'sd1; emi_236_t_0_0 = emi_236_t_0_0 + 32'sd1) begin
            emi_236_reg[emi_236_t_0_0] <= emi_236_reg_next[emi_236_t_0_0];
          end
        end
      end
    end

  assign emi_236_out1 = emi_236_reg[1];
  assign emi_236_reg_next[0] = cfblk86_out1;
  assign emi_236_reg_next[1] = emi_236_reg[0];



  assign y1_22 = emi_236_out1 == 8'b11111111;



  cfblk126 u_cfblk126 (.u(cfblk56_out1),  // uint8
                       .y(cfblk126_out1)  // uint8
                       );

  assign cfblk86_out1 = cfblk126_out1 - cfblk60_out2;



  cfblk28 u_cfblk28 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_230(cfblk86_out1),  // uint8
                     .Action_Port(y1_22),
                     .emi_231(cfblk28_out1)  // uint8
                     );

  assign dtc_out_1 = cfblk28_out1;



  assign cfblk11_out1 = dtc_out_1;



  cfblk75 u_cfblk75 (.u(cfblk11_out1),  // uint8
                     .y(cfblk75_out1)  // uint8
                     );

  cfblk82_block u_cfblk82 (.clk(clk),
                           .reset(reset),
                           .enb(clk_enable),
                           .emi_336(cfblk75_out1),  // uint8
                           .Action_Port(y1_21),
                           .emi_337(cfblk82_out1)  // uint8
                           );

  assign cfblk144_out1 = cfblk24_out2 + cfblk82_out1;



  always @(cfblk144_out1, cfblk98_out1) begin
    cfblk97_div_temp = 9'b000000000;
    cfblk97_t_0_0 = 9'b000000000;
    if (cfblk98_out1 == 8'b00000000) begin
      cfblk97_out1 = 8'b11111111;
    end
    else begin
      cfblk97_t_0_0 = {1'b0, cfblk144_out1};
      cfblk97_div_temp = cfblk97_t_0_0 / cfblk98_out1;
      if (cfblk97_div_temp[8] != 1'b0) begin
        cfblk97_out1 = 8'b11111111;
      end
      else begin
        cfblk97_out1 = cfblk97_div_temp[7:0];
      end
    end
  end



  cfblk3 u_cfblk3 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk97_out1),  // uint8
                   .Y(cfblk3_out1)  // uint8
                   );

  always @(posedge clk or posedge reset)
    begin : cfblk160_process
      if (reset == 1'b1) begin
        for(cfblk160_t_1 = 32'sd0; cfblk160_t_1 <= 32'sd1; cfblk160_t_1 = cfblk160_t_1 + 32'sd1) begin
          cfblk160_reg[cfblk160_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk160_t_0_0 = 32'sd0; cfblk160_t_0_0 <= 32'sd1; cfblk160_t_0_0 = cfblk160_t_0_0 + 32'sd1) begin
            cfblk160_reg[cfblk160_t_0_0] <= cfblk160_reg_next[cfblk160_t_0_0];
          end
        end
      end
    end

  assign cfblk160_out1 = cfblk160_reg[1];
  assign cfblk160_reg_next[0] = cfblk3_out1;
  assign cfblk160_reg_next[1] = cfblk160_reg[0];



  always @(posedge clk or posedge reset)
    begin : emi_195_process
      if (reset == 1'b1) begin
        for(emi_195_t_1 = 32'sd0; emi_195_t_1 <= 32'sd1; emi_195_t_1 = emi_195_t_1 + 32'sd1) begin
          emi_195_reg[emi_195_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_195_t_0_0 = 32'sd0; emi_195_t_0_0 <= 32'sd1; emi_195_t_0_0 = emi_195_t_0_0 + 32'sd1) begin
            emi_195_reg[emi_195_t_0_0] <= emi_195_reg_next[emi_195_t_0_0];
          end
        end
      end
    end

  assign emi_195_out1 = emi_195_reg[1];
  assign emi_195_reg_next[0] = cfblk39_out1;
  assign emi_195_reg_next[1] = emi_195_reg[0];



  assign y1_23 = emi_195_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_129_process
      if (reset == 1'b1) begin
        for(emi_129_t_1 = 32'sd0; emi_129_t_1 <= 32'sd1; emi_129_t_1 = emi_129_t_1 + 32'sd1) begin
          emi_129_reg[emi_129_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_129_t_0_0 = 32'sd0; emi_129_t_0_0 <= 32'sd1; emi_129_t_0_0 = emi_129_t_0_0 + 32'sd1) begin
            emi_129_reg[emi_129_t_0_0] <= emi_129_reg_next[emi_129_t_0_0];
          end
        end
      end
    end

  assign emi_129_out1 = emi_129_reg[1];
  assign emi_129_reg_next[0] = cfblk132_out1;
  assign emi_129_reg_next[1] = emi_129_reg[0];



  assign y1_24 = emi_129_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_88_process
      if (reset == 1'b1) begin
        for(emi_88_t_1 = 32'sd0; emi_88_t_1 <= 32'sd1; emi_88_t_1 = emi_88_t_1 + 32'sd1) begin
          emi_88_reg[emi_88_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_88_t_0_0 = 32'sd0; emi_88_t_0_0 <= 32'sd1; emi_88_t_0_0 = emi_88_t_0_0 + 32'sd1) begin
            emi_88_reg[emi_88_t_0_0] <= emi_88_reg_next[emi_88_t_0_0];
          end
        end
      end
    end

  assign emi_88_out1 = emi_88_reg[1];
  assign emi_88_reg_next[0] = cfblk67_out1;
  assign emi_88_reg_next[1] = emi_88_reg[0];



  assign y1_25 = emi_88_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_15_process
      if (reset == 1'b1) begin
        for(emi_15_t_1 = 32'sd0; emi_15_t_1 <= 32'sd1; emi_15_t_1 = emi_15_t_1 + 32'sd1) begin
          emi_15_reg[emi_15_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_15_t_0_0 = 32'sd0; emi_15_t_0_0 <= 32'sd1; emi_15_t_0_0 = emi_15_t_0_0 + 32'sd1) begin
            emi_15_reg[emi_15_t_0_0] <= emi_15_reg_next[emi_15_t_0_0];
          end
        end
      end
    end

  assign emi_15_out1 = emi_15_reg[1];
  assign emi_15_reg_next[0] = cfblk80_out1;
  assign emi_15_reg_next[1] = emi_15_reg[0];



  assign y1_26 = emi_15_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : cfblk169_process
      if (reset == 1'b1) begin
        for(cfblk169_t_1 = 32'sd0; cfblk169_t_1 <= 32'sd1; cfblk169_t_1 = cfblk169_t_1 + 32'sd1) begin
          cfblk169_reg[cfblk169_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk169_t_0_0 = 32'sd0; cfblk169_t_0_0 <= 32'sd1; cfblk169_t_0_0 = cfblk169_t_0_0 + 32'sd1) begin
            cfblk169_reg[cfblk169_t_0_0] <= cfblk169_reg_next[cfblk169_t_0_0];
          end
        end
      end
    end

  assign cfblk169_out1 = cfblk169_reg[1];
  assign cfblk169_reg_next[0] = cfblk20_out2;
  assign cfblk169_reg_next[1] = cfblk169_reg[0];



  always @(cfblk10_out1, cfblk169_out1) begin
    cfblk80_div_temp = 9'b000000000;
    cfblk80_t_0_0 = 9'b000000000;
    if (cfblk10_out1 == 8'b00000000) begin
      cfblk80_out1 = 8'b11111111;
    end
    else begin
      cfblk80_t_0_0 = {1'b0, cfblk169_out1};
      cfblk80_div_temp = cfblk80_t_0_0 / cfblk10_out1;
      if (cfblk80_div_temp[8] != 1'b0) begin
        cfblk80_out1 = 8'b11111111;
      end
      else begin
        cfblk80_out1 = cfblk80_div_temp[7:0];
      end
    end
  end



  cfblk26 u_cfblk26 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_9(cfblk80_out1),  // uint8
                     .Action_Port(y1_26),
                     .emi_10(cfblk26_out1)  // uint8
                     );

  assign cfblk73_out1 = cfblk26_out1 + cfblk73_const_val_1;



  always @(cfblk176_out1, cfblk73_out1) begin
    cfblk67_div_temp = 9'b000000000;
    cfblk67_t_0_0 = 9'b000000000;
    if (cfblk176_out1 == 8'b00000000) begin
      cfblk67_out1 = 8'b11111111;
    end
    else begin
      cfblk67_t_0_0 = {1'b0, cfblk73_out1};
      cfblk67_div_temp = cfblk67_t_0_0 / cfblk176_out1;
      if (cfblk67_div_temp[8] != 1'b0) begin
        cfblk67_out1 = 8'b11111111;
      end
      else begin
        cfblk67_out1 = cfblk67_div_temp[7:0];
      end
    end
  end



  cfblk132 u_cfblk132 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_82(cfblk67_out1),  // uint8
                       .Action_Port(y1_25),
                       .emi_83(cfblk132_out1)  // uint8
                       );

  cfblk142 u_cfblk142 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_123(cfblk132_out1),  // uint8
                       .Action_Port(y1_24),
                       .emi_124(cfblk142_out1)  // uint8
                       );

  cfblk38 u_cfblk38 (.u(cfblk142_out1),  // uint8
                     .y(cfblk38_out1)  // uint8
                     );

  assign cfblk115_out1 = cfblk104_out1 + cfblk38_out1;



  cfblk155 u_cfblk155 (.In1(cfblk100_out1),  // uint8
                       .Out1(cfblk155_out1)  // uint8
                       );

  DotProduct_block4 u_cfblk96_inst (.in1(cfblk155_out1),  // uint8
                                    .in2(cfblk94_out1),  // uint8
                                    .out1(cfblk96_out1)  // uint8
                                    );

  assign cfblk74_out1 = cfblk96_out1 + cfblk115_out1;



  assign cfblk90_out1 = cfblk134_out2 + cfblk105_out1;



  DotProduct u_cfblk109_inst (.in1(cfblk114_out2),  // uint8
                              .in2(cfblk90_out1),  // uint8
                              .out1(cfblk109_out1)  // uint8
                              );

  assign cfblk18_out1 = cfblk34_out1 + cfblk18_const_val_1;



  assign cfblk148_out1 = cfblk18_out1 + cfblk109_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk159_process
      if (reset == 1'b1) begin
        for(cfblk159_t_1 = 32'sd0; cfblk159_t_1 <= 32'sd1; cfblk159_t_1 = cfblk159_t_1 + 32'sd1) begin
          cfblk159_reg[cfblk159_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk159_t_0_0 = 32'sd0; cfblk159_t_0_0 <= 32'sd1; cfblk159_t_0_0 = cfblk159_t_0_0 + 32'sd1) begin
            cfblk159_reg[cfblk159_t_0_0] <= cfblk159_reg_next[cfblk159_t_0_0];
          end
        end
      end
    end

  assign cfblk159_out1 = cfblk159_reg[1];
  assign cfblk159_reg_next[0] = cfblk148_out1;
  assign cfblk159_reg_next[1] = cfblk159_reg[0];



  assign cfblk39_out1 = cfblk159_out1 - cfblk74_out1;



  cfblk41 u_cfblk41 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_189(cfblk39_out1),  // uint8
                     .Action_Port(y1_23),
                     .emi_190(cfblk41_out1)  // uint8
                     );

  cfblk156 u_cfblk156 (.In1(cfblk41_out1),  // uint8
                       .Out1(cfblk156_out1)  // uint8
                       );

  DotProduct_block u_cfblk143_inst (.in1(cfblk156_out1),  // uint8
                                    .in2(cfblk34_out1),  // uint8
                                    .out1(cfblk143_out1)  // uint8
                                    );

  assign cfblk59_out1 = cfblk143_out1 + cfblk160_out1;



  cfblk154_block u_cfblk154 (.clk(clk),
                             .reset(reset),
                             .enb(clk_enable),
                             .emi_360(cfblk59_out1),  // uint8
                             .Action_Port(y1_20),
                             .emi_361(cfblk154_out1)  // uint8
                             );

  assign cfblk105_out1 = (cfblk154_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk139 u_cfblk139 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_106(cfblk105_out1),  // uint8
                       .Action_Port(y1_19),
                       .emi_107(cfblk139_out1)  // uint8
                       );

  cfblk56 u_cfblk56 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_247(cfblk139_out1),  // uint8
                     .Action_Port(y1_18),
                     .emi_248(cfblk56_out1)  // uint8
                     );

  cfblk122 u_cfblk122 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_50(cfblk56_out1),  // uint8
                       .Action_Port(y1_17),
                       .emi_51(cfblk122_out1)  // uint8
                       );

  cfblk98 u_cfblk98 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_139(cfblk122_out1),  // uint8
                     .Action_Port(y1_16),
                     .emi_140(cfblk98_out1)  // uint8
                     );

  cfblk19 u_cfblk19 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_164(cfblk98_out1),  // uint8
                     .Action_Port(y1_15),
                     .emi_165(cfblk19_out1)  // uint8
                     );

  assign cfblk134_out1 = cfblk19_out1;
  assign cfblk134_out2 = 8'b00000000;



  assign cfblk21_out1 = cfblk134_out1 + cfblk49_out1;



  assign cfblk44_out1 = cfblk21_out1 - cfblk135_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk158_process
      if (reset == 1'b1) begin
        for(cfblk158_t_1 = 32'sd0; cfblk158_t_1 <= 32'sd1; cfblk158_t_1 = cfblk158_t_1 + 32'sd1) begin
          cfblk158_reg[cfblk158_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk158_t_0_0 = 32'sd0; cfblk158_t_0_0 <= 32'sd1; cfblk158_t_0_0 = cfblk158_t_0_0 + 32'sd1) begin
            cfblk158_reg[cfblk158_t_0_0] <= cfblk158_reg_next[cfblk158_t_0_0];
          end
        end
      end
    end

  assign cfblk158_out1 = cfblk158_reg[1];
  assign cfblk158_reg_next[0] = cfblk44_out1;
  assign cfblk158_reg_next[1] = cfblk158_reg[0];



  always @(posedge clk or posedge reset)
    begin : emi_350_process
      if (reset == 1'b1) begin
        for(emi_350_t_1 = 32'sd0; emi_350_t_1 <= 32'sd1; emi_350_t_1 = emi_350_t_1 + 32'sd1) begin
          emi_350_reg[emi_350_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_350_t_0_0 = 32'sd0; emi_350_t_0_0 <= 32'sd1; emi_350_t_0_0 = emi_350_t_0_0 + 32'sd1) begin
            emi_350_reg[emi_350_t_0_0] <= emi_350_reg_next[emi_350_t_0_0];
          end
        end
      end
    end

  assign emi_350_out1 = emi_350_reg[1];
  assign emi_350_reg_next[0] = cfblk27_out1;
  assign emi_350_reg_next[1] = emi_350_reg[0];



  assign y1_27 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_32_process
      if (reset == 1'b1) begin
        for(emi_32_t_1 = 32'sd0; emi_32_t_1 <= 32'sd1; emi_32_t_1 = emi_32_t_1 + 32'sd1) begin
          emi_32_reg[emi_32_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_32_t_0_0 = 32'sd0; emi_32_t_0_0 <= 32'sd1; emi_32_t_0_0 = emi_32_t_0_0 + 32'sd1) begin
            emi_32_reg[emi_32_t_0_0] <= emi_32_reg_next[emi_32_t_0_0];
          end
        end
      end
    end

  assign emi_32_out1 = emi_32_reg[1];
  assign emi_32_reg_next[0] = cfblk40_out1;
  assign emi_32_reg_next[1] = emi_32_reg[0];



  assign y1_28 = emi_32_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_7_process
      if (reset == 1'b1) begin
        for(emi_7_t_1 = 32'sd0; emi_7_t_1 <= 32'sd1; emi_7_t_1 = emi_7_t_1 + 32'sd1) begin
          emi_7_reg[emi_7_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_7_t_0_0 = 32'sd0; emi_7_t_0_0 <= 32'sd1; emi_7_t_0_0 = emi_7_t_0_0 + 32'sd1) begin
            emi_7_reg[emi_7_t_0_0] <= emi_7_reg_next[emi_7_t_0_0];
          end
        end
      end
    end

  assign emi_7_out1 = emi_7_reg[1];
  assign emi_7_reg_next[0] = cfblk71_out1;
  assign emi_7_reg_next[1] = emi_7_reg[0];



  assign y1_29 = emi_7_out1 == 8'b11111111;



  cfblk103 u_cfblk103 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_1(cfblk71_out1),  // uint8
                       .Action_Port(y1_29),
                       .emi_2(cfblk103_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk165_process
      if (reset == 1'b1) begin
        for(cfblk165_t_1 = 32'sd0; cfblk165_t_1 <= 32'sd1; cfblk165_t_1 = cfblk165_t_1 + 32'sd1) begin
          cfblk165_reg[cfblk165_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk165_t_0_0 = 32'sd0; cfblk165_t_0_0 <= 32'sd1; cfblk165_t_0_0 = cfblk165_t_0_0 + 32'sd1) begin
            cfblk165_reg[cfblk165_t_0_0] <= cfblk165_reg_next[cfblk165_t_0_0];
          end
        end
      end
    end

  assign cfblk165_out1 = cfblk165_reg[1];
  assign cfblk165_reg_next[0] = cfblk34_out1;
  assign cfblk165_reg_next[1] = cfblk165_reg[0];



  assign cfblk10_out1 = cfblk165_out1 + cfblk103_out1;



  assign cfblk22_out1 = cfblk10_out1 - cfblk57_out2;



  cfblk2 u_cfblk2 (.u(cfblk22_out1),  // uint8
                   .y(cfblk2_out1)  // uint8
                   );

  always @(posedge clk or posedge reset)
    begin : cfblk157_process
      if (reset == 1'b1) begin
        for(cfblk157_t_1 = 32'sd0; cfblk157_t_1 <= 32'sd1; cfblk157_t_1 = cfblk157_t_1 + 32'sd1) begin
          cfblk157_reg[cfblk157_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk157_t_0_0 = 32'sd0; cfblk157_t_0_0 <= 32'sd1; cfblk157_t_0_0 = cfblk157_t_0_0 + 32'sd1) begin
            cfblk157_reg[cfblk157_t_0_0] <= cfblk157_reg_next[cfblk157_t_0_0];
          end
        end
      end
    end

  assign cfblk157_out1 = cfblk157_reg[1];
  assign cfblk157_reg_next[0] = cfblk2_out1;
  assign cfblk157_reg_next[1] = cfblk157_reg[0];



  always @(posedge clk or posedge reset)
    begin : emi_245_process
      if (reset == 1'b1) begin
        for(emi_245_t_1 = 32'sd0; emi_245_t_1 <= 32'sd1; emi_245_t_1 = emi_245_t_1 + 32'sd1) begin
          emi_245_reg[emi_245_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_245_t_0_0 = 32'sd0; emi_245_t_0_0 <= 32'sd1; emi_245_t_0_0 = emi_245_t_0_0 + 32'sd1) begin
            emi_245_reg[emi_245_t_0_0] <= emi_245_reg_next[emi_245_t_0_0];
          end
        end
      end
    end

  assign emi_245_out1 = emi_245_reg[1];
  assign emi_245_reg_next[0] = cfblk117_out1;
  assign emi_245_reg_next[1] = emi_245_reg[0];



  assign y1_30 = emi_245_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_178_process
      if (reset == 1'b1) begin
        for(emi_178_t_1 = 32'sd0; emi_178_t_1 <= 32'sd1; emi_178_t_1 = emi_178_t_1 + 32'sd1) begin
          emi_178_reg[emi_178_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_178_t_0_0 = 32'sd0; emi_178_t_0_0 <= 32'sd1; emi_178_t_0_0 = emi_178_t_0_0 + 32'sd1) begin
            emi_178_reg[emi_178_t_0_0] <= emi_178_reg_next[emi_178_t_0_0];
          end
        end
      end
    end

  assign emi_178_out1 = emi_178_reg[1];
  assign emi_178_reg_next[0] = cfblk140_out1;
  assign emi_178_reg_next[1] = emi_178_reg[0];



  assign y1_31 = emi_178_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_153_process
      if (reset == 1'b1) begin
        for(emi_153_t_1 = 32'sd0; emi_153_t_1 <= 32'sd1; emi_153_t_1 = emi_153_t_1 + 32'sd1) begin
          emi_153_reg[emi_153_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_153_t_0_0 = 32'sd0; emi_153_t_0_0 <= 32'sd1; emi_153_t_0_0 = emi_153_t_0_0 + 32'sd1) begin
            emi_153_reg[emi_153_t_0_0] <= emi_153_reg_next[emi_153_t_0_0];
          end
        end
      end
    end

  assign emi_153_out1 = emi_153_reg[1];
  assign emi_153_reg_next[0] = cfblk50_out1;
  assign emi_153_reg_next[1] = emi_153_reg[0];



  assign y1_32 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_211_process
      if (reset == 1'b1) begin
        for(emi_211_t_1 = 32'sd0; emi_211_t_1 <= 32'sd1; emi_211_t_1 = emi_211_t_1 + 32'sd1) begin
          emi_211_reg[emi_211_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_211_t_0_0 = 32'sd0; emi_211_t_0_0 <= 32'sd1; emi_211_t_0_0 = emi_211_t_0_0 + 32'sd1) begin
            emi_211_reg[emi_211_t_0_0] <= emi_211_reg_next[emi_211_t_0_0];
          end
        end
      end
    end

  assign emi_211_out1 = emi_211_reg[1];
  assign emi_211_reg_next[0] = cfblk14_out2;
  assign emi_211_reg_next[1] = emi_211_reg[0];



  assign y1_33 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_121_process
      if (reset == 1'b1) begin
        for(emi_121_t_1 = 32'sd0; emi_121_t_1 <= 32'sd1; emi_121_t_1 = emi_121_t_1 + 32'sd1) begin
          emi_121_reg[emi_121_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_121_t_0_0 = 32'sd0; emi_121_t_0_0 <= 32'sd1; emi_121_t_0_0 = emi_121_t_0_0 + 32'sd1) begin
            emi_121_reg[emi_121_t_0_0] <= emi_121_reg_next[emi_121_t_0_0];
          end
        end
      end
    end

  assign emi_121_out1 = emi_121_reg[1];
  assign emi_121_reg_next[0] = cfblk175_out1;
  assign emi_121_reg_next[1] = emi_121_reg[0];



  assign y1_34 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_137_process
      if (reset == 1'b1) begin
        for(emi_137_t_1 = 32'sd0; emi_137_t_1 <= 32'sd1; emi_137_t_1 = emi_137_t_1 + 32'sd1) begin
          emi_137_reg[emi_137_t_1] <= 8'b00000001;
        end
      end
      else begin
        if (enb) begin
          for(emi_137_t_0_0 = 32'sd0; emi_137_t_0_0 <= 32'sd1; emi_137_t_0_0 = emi_137_t_0_0 + 32'sd1) begin
            emi_137_reg[emi_137_t_0_0] <= emi_137_reg_next[emi_137_t_0_0];
          end
        end
      end
    end

  assign emi_137_out1 = emi_137_reg[1];
  assign emi_137_reg_next[0] = cfblk130_out1;
  assign emi_137_reg_next[1] = emi_137_reg[0];



  assign y1_35 = emi_137_out1 >= 8'b00000001;



  always @(posedge clk or posedge reset)
    begin : emi_80_process
      if (reset == 1'b1) begin
        for(emi_80_t_1 = 32'sd0; emi_80_t_1 <= 32'sd1; emi_80_t_1 = emi_80_t_1 + 32'sd1) begin
          emi_80_reg[emi_80_t_1] <= 8'b00000001;
        end
      end
      else begin
        if (enb) begin
          for(emi_80_t_0_0 = 32'sd0; emi_80_t_0_0 <= 32'sd1; emi_80_t_0_0 = emi_80_t_0_0 + 32'sd1) begin
            emi_80_reg[emi_80_t_0_0] <= emi_80_reg_next[emi_80_t_0_0];
          end
        end
      end
    end

  assign emi_80_out1 = emi_80_reg[1];
  assign emi_80_reg_next[0] = cfblk72_out1;
  assign emi_80_reg_next[1] = emi_80_reg[0];



  assign y1_36 = emi_80_out1 >= 8'b00000001;



  assign cfblk57_out1 = cfblk30_out1;
  assign cfblk57_out2 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : emi_270_process
      if (reset == 1'b1) begin
        for(emi_270_t_1 = 32'sd0; emi_270_t_1 <= 32'sd1; emi_270_t_1 = emi_270_t_1 + 32'sd1) begin
          emi_270_reg[emi_270_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_270_t_0_0 = 32'sd0; emi_270_t_0_0 <= 32'sd1; emi_270_t_0_0 = emi_270_t_0_0 + 32'sd1) begin
            emi_270_reg[emi_270_t_0_0] <= emi_270_reg_next[emi_270_t_0_0];
          end
        end
      end
    end

  assign emi_270_out1 = emi_270_reg[1];
  assign emi_270_reg_next[0] = cfblk133_out1;
  assign emi_270_reg_next[1] = emi_270_reg[0];



  assign y1_37 = emi_270_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_96_process
      if (reset == 1'b1) begin
        for(emi_96_t_1 = 32'sd0; emi_96_t_1 <= 32'sd1; emi_96_t_1 = emi_96_t_1 + 32'sd1) begin
          emi_96_reg[emi_96_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_96_t_0_0 = 32'sd0; emi_96_t_0_0 <= 32'sd1; emi_96_t_0_0 = emi_96_t_0_0 + 32'sd1) begin
            emi_96_reg[emi_96_t_0_0] <= emi_96_reg_next[emi_96_t_0_0];
          end
        end
      end
    end

  assign emi_96_out1 = emi_96_reg[1];
  assign emi_96_reg_next[0] = cfblk71_out1;
  assign emi_96_reg_next[1] = emi_96_reg[0];



  assign y1_38 = emi_96_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_310_process
      if (reset == 1'b1) begin
        for(emi_310_t_1 = 32'sd0; emi_310_t_1 <= 32'sd1; emi_310_t_1 = emi_310_t_1 + 32'sd1) begin
          emi_310_reg[emi_310_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_310_t_0_0 = 32'sd0; emi_310_t_0_0 <= 32'sd1; emi_310_t_0_0 = emi_310_t_0_0 + 32'sd1) begin
            emi_310_reg[emi_310_t_0_0] <= emi_310_reg_next[emi_310_t_0_0];
          end
        end
      end
    end

  assign emi_310_out1 = emi_310_reg[1];
  assign emi_310_reg_next[0] = cfblk30_out1;
  assign emi_310_reg_next[1] = emi_310_reg[0];



  assign y1_39 = emi_310_out1 == 8'b11111111;



  cfblk71 u_cfblk71 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_304(cfblk30_out1),  // uint8
                     .Action_Port(y1_39),
                     .emi_305(cfblk71_out1)  // uint8
                     );

  cfblk133 u_cfblk133 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_90(cfblk71_out1),  // uint8
                       .Action_Port(y1_38),
                       .emi_91(cfblk133_out1)  // uint8
                       );

  cfblk62 u_cfblk62 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_264(cfblk133_out1),  // uint8
                     .Action_Port(y1_37),
                     .emi_265(cfblk62_out1)  // uint8
                     );

  assign cfblk91_out1 = cfblk62_out1;
  assign cfblk91_out2 = 8'b00000000;



  cfblk45 u_cfblk45 (.u(cfblk91_out2),  // uint8
                     .y(cfblk45_out1)  // uint8
                     );

  cfblk63 u_cfblk63 (.u(cfblk45_out1),  // uint8
                     .y(cfblk63_out1)  // uint8
                     );

  always @(cfblk20_out2, cfblk63_out1) begin
    cfblk46_div_temp = 9'b000000000;
    cfblk46_t_0_0 = 9'b000000000;
    if (cfblk20_out2 == 8'b00000000) begin
      cfblk46_out1 = 8'b11111111;
    end
    else begin
      cfblk46_t_0_0 = {1'b0, cfblk63_out1};
      cfblk46_div_temp = cfblk46_t_0_0 / cfblk20_out2;
      if (cfblk46_div_temp[8] != 1'b0) begin
        cfblk46_out1 = 8'b11111111;
      end
      else begin
        cfblk46_out1 = cfblk46_div_temp[7:0];
      end
    end
  end



  assign cfblk145_out1 = cfblk46_out1 + cfblk145_const_val_1;



  DotProduct_block1 u_cfblk31_inst (.in1(cfblk145_out1),  // uint8
                                    .in2(cfblk57_out1),  // uint8
                                    .out1(cfblk31_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk168_process
      if (reset == 1'b1) begin
        for(cfblk168_t_1 = 32'sd0; cfblk168_t_1 <= 32'sd1; cfblk168_t_1 = cfblk168_t_1 + 32'sd1) begin
          cfblk168_reg[cfblk168_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk168_t_0_0 = 32'sd0; cfblk168_t_0_0 <= 32'sd1; cfblk168_t_0_0 = cfblk168_t_0_0 + 32'sd1) begin
            cfblk168_reg[cfblk168_t_0_0] <= cfblk168_reg_next[cfblk168_t_0_0];
          end
        end
      end
    end

  assign cfblk168_out1 = cfblk168_reg[1];
  assign cfblk168_reg_next[0] = cfblk31_out1;
  assign cfblk168_reg_next[1] = cfblk168_reg[0];



  assign cfblk61_out1 = cfblk81_out1 - cfblk168_out1;



  always @(cfblk124_out1, cfblk61_out1) begin
    cfblk72_div_temp = 9'b000000000;
    cfblk72_t_0_0 = 9'b000000000;
    if (cfblk124_out1 == 8'b00000000) begin
      cfblk72_out1 = 8'b11111111;
    end
    else begin
      cfblk72_t_0_0 = {1'b0, cfblk61_out1};
      cfblk72_div_temp = cfblk72_t_0_0 / cfblk124_out1;
      if (cfblk72_div_temp[8] != 1'b0) begin
        cfblk72_out1 = 8'b11111111;
      end
      else begin
        cfblk72_out1 = cfblk72_div_temp[7:0];
      end
    end
  end



  cfblk130 u_cfblk130 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_74(cfblk72_out1),  // uint8
                       .Action_Port(y1_36),
                       .emi_75(cfblk130_out1)  // uint8
                       );

  cfblk175 u_cfblk175 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_131(cfblk130_out1),  // uint8
                       .Action_Port(y1_35),
                       .emi_132(cfblk175_out1)  // uint8
                       );

  cfblk14 u_cfblk14 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_114(cfblk175_out1),  // uint8
                     .Action_Port(y1_34),
                     .emi_115(cfblk14_out1),  // uint8
                     .emi_116(cfblk14_out2)  // uint8
                     );

  cfblk177 u_cfblk177 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_205(cfblk14_out2),  // uint8
                       .Action_Port(y1_33),
                       .emi_206(cfblk177_out1)  // uint8
                       );

  DotProduct_block2 u_cfblk50_inst (.in1(cfblk177_out1),  // uint8
                                    .in2(cfblk4_out1),  // uint8
                                    .out1(cfblk50_out1)  // uint8
                                    );

  cfblk176 u_cfblk176 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_147(cfblk50_out1),  // uint8
                       .Action_Port(y1_32),
                       .emi_148(cfblk176_out1)  // uint8
                       );

  assign dtc_out_2 = cfblk176_out1;



  assign cfblk29_out1 = dtc_out_2;



  assign cfblk140_out1 = cfblk29_out1 + cfblk91_out1;



  cfblk23 u_cfblk23 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_172(cfblk140_out1),  // uint8
                     .Action_Port(y1_31),
                     .emi_173(cfblk23_out1)  // uint8
                     );

  cfblk127 u_cfblk127 (.u(cfblk23_out1),  // uint8
                       .y(cfblk127_out1)  // uint8
                       );

  always @(cfblk127_out1, cfblk78_out1) begin
    cfblk117_div_temp = 9'b000000000;
    cfblk117_t_0_0 = 9'b000000000;
    if (cfblk127_out1 == 8'b00000000) begin
      cfblk117_out1 = 8'b11111111;
    end
    else begin
      cfblk117_t_0_0 = {1'b0, cfblk78_out1};
      cfblk117_div_temp = cfblk117_t_0_0 / cfblk127_out1;
      if (cfblk117_div_temp[8] != 1'b0) begin
        cfblk117_out1 = 8'b11111111;
      end
      else begin
        cfblk117_out1 = cfblk117_div_temp[7:0];
      end
    end
  end



  cfblk55 u_cfblk55 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_238(cfblk117_out1),  // uint8
                     .Action_Port(y1_30),
                     .emi_239(cfblk55_out1)  // uint8
                     );

  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        for(cfblk170_t_1 = 32'sd0; cfblk170_t_1 <= 32'sd1; cfblk170_t_1 = cfblk170_t_1 + 32'sd1) begin
          cfblk170_reg[cfblk170_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk170_t_0_0 = 32'sd0; cfblk170_t_0_0 <= 32'sd1; cfblk170_t_0_0 = cfblk170_t_0_0 + 32'sd1) begin
            cfblk170_reg[cfblk170_t_0_0] <= cfblk170_reg_next[cfblk170_t_0_0];
          end
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk55_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  assign cfblk7_out1 = cfblk170_out1 + cfblk14_out1;



  always @(cfblk157_out1, cfblk7_out1) begin
    cfblk40_div_temp = 9'b000000000;
    cfblk40_t_0_0 = 9'b000000000;
    if (cfblk157_out1 == 8'b00000000) begin
      cfblk40_out1 = 8'b11111111;
    end
    else begin
      cfblk40_t_0_0 = {1'b0, cfblk7_out1};
      cfblk40_div_temp = cfblk40_t_0_0 / cfblk157_out1;
      if (cfblk40_div_temp[8] != 1'b0) begin
        cfblk40_out1 = 8'b11111111;
      end
      else begin
        cfblk40_out1 = cfblk40_div_temp[7:0];
      end
    end
  end



  cfblk77 u_cfblk77 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_26(cfblk40_out1),  // uint8
                     .Action_Port(y1_28),
                     .emi_27(cfblk77_out1)  // uint8
                     );

  always @(posedge clk or posedge reset)
    begin : emi_262_process
      if (reset == 1'b1) begin
        for(emi_262_t_1 = 32'sd0; emi_262_t_1 <= 32'sd1; emi_262_t_1 = emi_262_t_1 + 32'sd1) begin
          emi_262_reg[emi_262_t_1] <= 8'b00000011;
        end
      end
      else begin
        if (enb) begin
          for(emi_262_t_0_0 = 32'sd0; emi_262_t_0_0 <= 32'sd1; emi_262_t_0_0 = emi_262_t_0_0 + 32'sd1) begin
            emi_262_reg[emi_262_t_0_0] <= emi_262_reg_next[emi_262_t_0_0];
          end
        end
      end
    end

  assign emi_262_out1 = emi_262_reg[1];
  assign emi_262_reg_next[0] = cfblk76_out1;
  assign emi_262_reg_next[1] = emi_262_reg[0];



  assign y1_40 = emi_262_out1 >= 8'b00000011;



  always @(posedge clk or posedge reset)
    begin : emi_318_process
      if (reset == 1'b1) begin
        for(emi_318_t_1 = 32'sd0; emi_318_t_1 <= 32'sd1; emi_318_t_1 = emi_318_t_1 + 32'sd1) begin
          emi_318_reg[emi_318_t_1] <= 8'b00000011;
        end
      end
      else begin
        if (enb) begin
          for(emi_318_t_0_0 = 32'sd0; emi_318_t_0_0 <= 32'sd1; emi_318_t_0_0 = emi_318_t_0_0 + 32'sd1) begin
            emi_318_reg[emi_318_t_0_0] <= emi_318_reg_next[emi_318_t_0_0];
          end
        end
      end
    end

  assign emi_318_out1 = emi_318_reg[1];
  assign emi_318_reg_next[0] = cfblk112_out1;
  assign emi_318_reg_next[1] = emi_318_reg[0];



  assign y1_41 = emi_318_out1 >= 8'b00000011;



  always @(posedge clk or posedge reset)
    begin : emi_286_process
      if (reset == 1'b1) begin
        for(emi_286_t_1 = 32'sd0; emi_286_t_1 <= 32'sd1; emi_286_t_1 = emi_286_t_1 + 32'sd1) begin
          emi_286_reg[emi_286_t_1] <= 8'b00000010;
        end
      end
      else begin
        if (enb) begin
          for(emi_286_t_0_0 = 32'sd0; emi_286_t_0_0 <= 32'sd1; emi_286_t_0_0 = emi_286_t_0_0 + 32'sd1) begin
            emi_286_reg[emi_286_t_0_0] <= emi_286_reg_next[emi_286_t_0_0];
          end
        end
      end
    end

  assign emi_286_out1 = emi_286_reg[1];
  assign emi_286_reg_next[0] = cfblk34_out1;
  assign emi_286_reg_next[1] = emi_286_reg[0];



  assign y1_42 = emi_286_out1 >= 8'b00000010;



  cfblk64 u_cfblk64 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_280(cfblk34_out1),  // uint8
                     .Action_Port(y1_42),
                     .emi_281(cfblk64_out1)  // uint8
                     );

  assign cfblk112_out1 = cfblk65_out1 + cfblk64_out1;



  cfblk76 u_cfblk76 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_312(cfblk112_out1),  // uint8
                     .Action_Port(y1_41),
                     .emi_313(cfblk76_out1)  // uint8
                     );

  cfblk60 u_cfblk60 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_255(cfblk76_out1),  // uint8
                     .Action_Port(y1_40),
                     .emi_256(cfblk60_out1),  // uint8
                     .emi_257(cfblk60_out2)  // uint8
                     );

  assign cfblk92_out1 = (cfblk60_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk164_process
      if (reset == 1'b1) begin
        for(cfblk164_t_1 = 32'sd0; cfblk164_t_1 <= 32'sd1; cfblk164_t_1 = cfblk164_t_1 + 32'sd1) begin
          cfblk164_reg[cfblk164_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk164_t_0_0 = 32'sd0; cfblk164_t_0_0 <= 32'sd1; cfblk164_t_0_0 = cfblk164_t_0_0 + 32'sd1) begin
            cfblk164_reg[cfblk164_t_0_0] <= cfblk164_reg_next[cfblk164_t_0_0];
          end
        end
      end
    end

  assign cfblk164_out1 = cfblk164_reg[1];
  assign cfblk164_reg_next[0] = cfblk92_out1;
  assign cfblk164_reg_next[1] = cfblk164_reg[0];



  assign cfblk27_out1 = cfblk164_out1 - cfblk77_out1;



  cfblk87_block u_cfblk87 (.clk(clk),
                           .reset(reset),
                           .enb(clk_enable),
                           .emi_344(cfblk27_out1),  // uint8
                           .Action_Port(y1_27),
                           .emi_345(cfblk87_out1)  // uint8
                           );

  always @(cfblk158_out1, cfblk87_out1) begin
    cfblk79_div_temp = 9'b000000000;
    cfblk79_t_0_0 = 9'b000000000;
    if (cfblk158_out1 == 8'b00000000) begin
      cfblk79_out1 = 8'b11111111;
    end
    else begin
      cfblk79_t_0_0 = {1'b0, cfblk87_out1};
      cfblk79_div_temp = cfblk79_t_0_0 / cfblk158_out1;
      if (cfblk79_div_temp[8] != 1'b0) begin
        cfblk79_out1 = 8'b11111111;
      end
      else begin
        cfblk79_out1 = cfblk79_div_temp[7:0];
      end
    end
  end



  DotProduct_block3 u_cfblk83_inst (.in1(cfblk79_out1),  // uint8
                                    .in2(cfblk162_out1),  // uint8
                                    .out1(cfblk83_out1)  // uint8
                                    );

  always @(cfblk171_out1, cfblk83_out1) begin
    cfblk30_div_temp = 9'b000000000;
    cfblk30_t_0_0 = 9'b000000000;
    if (cfblk171_out1 == 8'b00000000) begin
      cfblk30_out1 = 8'b11111111;
    end
    else begin
      cfblk30_t_0_0 = {1'b0, cfblk83_out1};
      cfblk30_div_temp = cfblk30_t_0_0 / cfblk171_out1;
      if (cfblk30_div_temp[8] != 1'b0) begin
        cfblk30_out1 = 8'b11111111;
      end
      else begin
        cfblk30_out1 = cfblk30_div_temp[7:0];
      end
    end
  end



  assign cfblk137_out1 = cfblk35_out1 - cfblk30_out1;



  cfblk8 u_cfblk8 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .emi_328(cfblk137_out1),  // uint8
                   .Action_Port(y1_13),
                   .emi_329(cfblk8_out1)  // uint8
                   );

  cfblk32 u_cfblk32 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_180(cfblk8_out1),  // uint8
                     .Action_Port(y1_12),
                     .emi_181(cfblk32_out1),  // uint8
                     .emi_182(cfblk32_out2)  // uint8
                     );

  assign cfblk69_out1 = cfblk111_out2 - cfblk32_out2;



  cfblk33 u_cfblk33 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_352(cfblk69_out1),  // uint8
                     .Action_Port(y1_11),
                     .emi_353(cfblk33_out1)  // uint8
                     );

  cfblk65_block u_cfblk65 (.clk(clk),
                           .reset(reset),
                           .enb(clk_enable),
                           .emi_288(cfblk33_out1),  // uint8
                           .Action_Port(y1_10),
                           .emi_289(cfblk65_out1)  // uint8
                           );

  cfblk34 u_cfblk34 (.u(cfblk65_out1),  // uint8
                     .y(cfblk34_out1)  // uint8
                     );

  always @(cfblk31_out1, cfblk34_out1) begin
    cfblk6_div_temp = 9'b000000000;
    cfblk6_t_0_0 = 9'b000000000;
    if (cfblk31_out1 == 8'b00000000) begin
      cfblk6_out1 = 8'b11111111;
    end
    else begin
      cfblk6_t_0_0 = {1'b0, cfblk34_out1};
      cfblk6_div_temp = cfblk6_t_0_0 / cfblk31_out1;
      if (cfblk6_div_temp[8] != 1'b0) begin
        cfblk6_out1 = 8'b11111111;
      end
      else begin
        cfblk6_out1 = cfblk6_div_temp[7:0];
      end
    end
  end



  cfblk66_block u_cfblk66 (.clk(clk),
                           .reset(reset),
                           .enb(clk_enable),
                           .emi_197(cfblk6_out1),  // uint8
                           .Action_Port(y1_9),
                           .emi_198(cfblk66_out1)  // uint8
                           );

  assign cfblk94_out1 = cfblk66_out1 + cfblk94_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk166_process
      if (reset == 1'b1) begin
        for(cfblk166_t_1 = 32'sd0; cfblk166_t_1 <= 32'sd1; cfblk166_t_1 = cfblk166_t_1 + 32'sd1) begin
          cfblk166_reg[cfblk166_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk166_t_0_0 = 32'sd0; cfblk166_t_0_0 <= 32'sd1; cfblk166_t_0_0 = cfblk166_t_0_0 + 32'sd1) begin
            cfblk166_reg[cfblk166_t_0_0] <= cfblk166_reg_next[cfblk166_t_0_0];
          end
        end
      end
    end

  assign cfblk166_out1 = cfblk166_reg[1];
  assign cfblk166_reg_next[0] = cfblk94_out1;
  assign cfblk166_reg_next[1] = cfblk166_reg[0];



  always @(posedge clk or posedge reset)
    begin : emi_48_process
      if (reset == 1'b1) begin
        for(emi_48_t_1 = 32'sd0; emi_48_t_1 <= 32'sd1; emi_48_t_1 = emi_48_t_1 + 32'sd1) begin
          emi_48_reg[emi_48_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_48_t_0_0 = 32'sd0; emi_48_t_0_0 <= 32'sd1; emi_48_t_0_0 = emi_48_t_0_0 + 32'sd1) begin
            emi_48_reg[emi_48_t_0_0] <= emi_48_reg_next[emi_48_t_0_0];
          end
        end
      end
    end

  assign emi_48_out1 = emi_48_reg[1];
  assign emi_48_reg_next[0] = cfblk93_out1;
  assign emi_48_reg_next[1] = emi_48_reg[0];



  assign y1_43 = 1'b1;



  assign cfblk104_out1 = cfblk20_out1 + cfblk131_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk167_process
      if (reset == 1'b1) begin
        for(cfblk167_t_1 = 32'sd0; cfblk167_t_1 <= 32'sd1; cfblk167_t_1 = cfblk167_t_1 + 32'sd1) begin
          cfblk167_reg[cfblk167_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk167_t_0_0 = 32'sd0; cfblk167_t_0_0 <= 32'sd1; cfblk167_t_0_0 = cfblk167_t_0_0 + 32'sd1) begin
            cfblk167_reg[cfblk167_t_0_0] <= cfblk167_reg_next[cfblk167_t_0_0];
          end
        end
      end
    end

  assign cfblk167_out1 = cfblk167_reg[1];
  assign cfblk167_reg_next[0] = cfblk111_out2;
  assign cfblk167_reg_next[1] = cfblk167_reg[0];



  assign cfblk138_out1 = cfblk167_out1 + cfblk104_out1;



  always @(cfblk138_out1, cfblk43_out1) begin
    cfblk123_div_temp = 9'b000000000;
    cfblk123_t_0_0 = 9'b000000000;
    if (cfblk138_out1 == 8'b00000000) begin
      cfblk123_out1 = 8'b11111111;
    end
    else begin
      cfblk123_t_0_0 = {1'b0, cfblk43_out1};
      cfblk123_div_temp = cfblk123_t_0_0 / cfblk138_out1;
      if (cfblk123_div_temp[8] != 1'b0) begin
        cfblk123_out1 = 8'b11111111;
      end
      else begin
        cfblk123_out1 = cfblk123_div_temp[7:0];
      end
    end
  end



  assign cfblk93_out1 = cfblk123_out1 + cfblk93_const_val_1;



  cfblk121 u_cfblk121 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_42(cfblk93_out1),  // uint8
                       .Action_Port(y1_43),
                       .emi_43(cfblk121_out1)  // uint8
                       );

  assign cfblk118_out1 = cfblk121_out1 + cfblk166_out1;



  cfblk111 u_cfblk111 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_155(cfblk118_out1),  // uint8
                       .Action_Port(y1_8),
                       .emi_156(cfblk111_out1),  // uint8
                       .emi_157(cfblk111_out2)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk163_process
      if (reset == 1'b1) begin
        for(cfblk163_t_1 = 32'sd0; cfblk163_t_1 <= 32'sd1; cfblk163_t_1 = cfblk163_t_1 + 32'sd1) begin
          cfblk163_reg[cfblk163_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk163_t_0_0 = 32'sd0; cfblk163_t_0_0 <= 32'sd1; cfblk163_t_0_0 = cfblk163_t_0_0 + 32'sd1) begin
            cfblk163_reg[cfblk163_t_0_0] <= cfblk163_reg_next[cfblk163_t_0_0];
          end
        end
      end
    end

  assign cfblk163_out1 = cfblk163_reg[1];
  assign cfblk163_reg_next[0] = cfblk111_out1;
  assign cfblk163_reg_next[1] = cfblk163_reg[0];



  always @(cfblk142_out1, cfblk163_out1) begin
    cfblk42_div_temp = 9'b000000000;
    cfblk42_t_0_0 = 9'b000000000;
    if (cfblk142_out1 == 8'b00000000) begin
      cfblk42_out1 = 8'b11111111;
    end
    else begin
      cfblk42_t_0_0 = {1'b0, cfblk163_out1};
      cfblk42_div_temp = cfblk42_t_0_0 / cfblk142_out1;
      if (cfblk42_div_temp[8] != 1'b0) begin
        cfblk42_out1 = 8'b11111111;
      end
      else begin
        cfblk42_out1 = cfblk42_div_temp[7:0];
      end
    end
  end



  cfblk51 u_cfblk51 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_221(cfblk42_out1),  // uint8
                     .Action_Port(y1_7),
                     .emi_222(cfblk51_out1),  // uint8
                     .emi_223(cfblk51_out2)  // uint8
                     );

  assign cfblk20_out1 = cfblk51_out2;
  assign cfblk20_out2 = 8'b00000000;



  cfblk12 u_cfblk12 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_34(cfblk20_out1),  // uint8
                     .Action_Port(y1_6),
                     .emi_35(cfblk12_out1)  // uint8
                     );

  cfblk113 u_cfblk113 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_17(cfblk12_out1),  // uint8
                       .Action_Port(y1_5),
                       .emi_18(cfblk113_out1),  // uint8
                       .emi_19(cfblk113_out2)  // uint8
                       );

  assign cfblk100_out1 = cfblk113_out2 + cfblk117_out1;



  assign Hdl_out = cfblk100_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

