// -------------------------------------------------------------
// 
// File Name: E:\zgl\gen_6\slemi\emi_results\2024-05-22-21-58-05\SampleModel61442\Verilog_hdlsrc\sampleModel61442_pp_12_1_sub\Subsystem_1.v
// Created: 2024-05-22 22:32:08
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem_1
// Source Path: sampleModel61442_pp_12_1_sub/Subsystem_1
// Hierarchy Level: 0
// Model version: 1.1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns
`include "cfblk78.v"
`include "cfblk134.v"
`include "cfblk71.v"
`include "cfblk21.v"
`include "cfblk79.v"
`include "cfblk48.v"
`include "DotProduct_block4.v"
`include "cfblk125.v"
`include "DotProduct_block.v"
`include "cfblk84.v"
`include "cfblk184.v"
`include "cfblk2.v"
`include "cfblk20.v"
`include "cfblk124.v"
`include "DotProduct_block3.v"
`include "cfblk121.v"
`include "cfblk109.v"
`include "cfblk77.v"
`include "cfblk180.v"
`include "DotProduct_block2.v"
`include "cfblk97.v"
`include "cfblk3.v"
`include "cfblk2_block.v"
`include "cfblk116.v"
`include "cfblk15.v"
`include "cfblk31.v"
`include "DotProduct_block8.v"
`include "cfblk108.v"
`include "cfblk145.v"
`include "cfblk143.v"
`include "cfblk28_block.v"
`include "DotProduct_block7.v"
`include "cfblk1.v"
`include "DotProduct_block1.v"
`include "cfblk72.v"
`include "cfblk157.v"
`include "cfblk81.v"
`include "Positive.v"
`include "cfblk1_block.v"
`include "DotProduct_block6.v"
`include "DotProduct_block5.v"
`include "cfblk192.v"
`include "cfblk106.v"
`include "cfblk188.v"
`include "cfblk100.v"
`include "cfblk11.v"
`include "cfblk91.v"
`include "cfblk156.v"
`include "DotProduct.v"
`include "cfblk119.v"
`include "cfblk77_block.v"
`include "cfblk28.v"
`include "cfblk80.v"
`include "cfblk137.v"
`include "cfblk153.v"
`include "cfblk119_block.v"
`include "cfblk3_block.v"
`include "cfblk110.v"
`include "cfblk32.v"
`include "cfblk181.v"
`include "cfblk185.v"
`include "cfblk168.v"
`include "cfblk144.v"
`include "cfblk105.v"


module Subsystem_1
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk19_const_val_1;  // uint8
  wire [7:0] cfblk30_const_val_1;  // uint8
  wire [7:0] cfblk117_const_val_1;  // uint8
  wire [7:0] cfblk33_const_val_1;  // uint8
  wire [7:0] cfblk151_out1;  // uint8
  wire [7:0] cfblk85_const_val_1;  // uint8
  wire [7:0] cfblk167_out1;  // uint8
  reg [7:0] emi_7_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_7_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_7_out1;  // uint8
  wire y1;
  wire [7:0] cfblk109_out2;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  wire [7:0] cfblk80_out1;  // uint8
  reg [7:0] emi_209_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_209_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_209_out1;  // uint8
  wire y1_1;
  wire [7:0] cfblk85_out1;  // uint8
  reg [7:0] emi_282_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_282_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_282_out1;  // uint8
  wire y1_2;
  wire [7:0] cfblk2_out1;  // uint8
  wire [7:0] cfblk185_out1;  // uint8
  reg [7:0] emi_307_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_307_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_307_out1;  // uint8
  wire y1_3;
  wire [7:0] cfblk36_out1;  // uint8
  reg [7:0] emi_105_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_105_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_105_out1;  // uint8
  wire y1_4;
  wire [7:0] cfblk27_out1;  // uint8
  reg [7:0] emi_15_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_15_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_15_out1;  // uint8
  wire y1_5;
  wire [7:0] cfblk100_out1;  // uint8
  wire [7:0] cfblk106_out1;  // uint8
  reg [7:0] cfblk175_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_out1;  // uint8
  wire [7:0] cfblk141_out1;  // uint8
  wire [7:0] cfblk103_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  reg [7:0] emi_80_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_80_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_80_out1;  // uint8
  wire y1_6;
  wire [7:0] cfblk108_out1;  // uint8
  reg [7:0] emi_225_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_225_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_225_out1;  // uint8
  wire y1_7;
  wire [7:0] cfblk145_out1;  // uint8
  reg [7:0] emi_31_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_31_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_31_out1;  // uint8
  wire y1_8;
  wire [7:0] cfblk45_out1;  // uint8
  reg [7:0] emi_145_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_145_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_145_out1;  // uint8
  wire y1_9;
  wire [7:0] cfblk70_out1;  // uint8
  wire [7:0] cfblk156_out1;  // uint8
  reg [7:0] cfblk165_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_out1;  // uint8
  wire [7:0] cfblk109_out1;  // uint8
  wire [7:0] cfblk143_out1;  // uint8
  reg [7:0] cfblk146_out1;  // uint8
  reg [7:0] emi_217_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_217_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_217_out1;  // uint8
  wire y1_10;
  wire [7:0] cfblk101_out1;  // uint8
  wire [7:0] cfblk15_out1;  // uint8
  wire [7:0] cfblk20_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  reg [7:0] emi_129_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_129_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_129_out1;  // uint8
  wire y1_11;
  wire [7:0] cfblk40_out1;  // uint8
  reg [7:0] emi_265_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_265_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_265_out1;  // uint8
  wire y1_12;
  reg [7:0] emi_56_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_56_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_56_out1;  // uint8
  wire y1_13;
  reg [7:0] cfblk49_out1;  // uint8
  reg [7:0] emi_48_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_48_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_48_out1;  // uint8
  wire y1_14;
  wire [7:0] cfblk50_out2;  // uint8
  reg [7:0] cfblk173_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_out1;  // uint8
  wire [7:0] cfblk157_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  wire [7:0] cfblk101_out2;  // uint8
  wire [7:0] cfblk52_out1;  // uint8
  wire [7:0] cfblk87_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  reg [7:0] cfblk166_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_out1;  // uint8
  wire [7:0] cfblk130_out1;  // uint8
  reg [7:0] emi_257_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_257_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_257_out1;  // uint8
  wire y1_15;
  wire [7:0] cfblk72_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk93_out1;  // uint8
  reg [7:0] cfblk163_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  wire [7:0] cfblk61_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk66_out1;  // uint8
  wire [7:0] cfblk57_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk22_out1;  // uint8
  wire [7:0] cfblk114_out1;  // uint8
  reg [7:0] emi_177_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_177_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_177_out1;  // uint8
  wire y1_16;
  wire [7:0] cfblk14_out1;  // uint8
  reg [7:0] emi_72_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_72_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_72_out1;  // uint8
  wire y1_17;
  wire [7:0] cfblk83_out1;  // uint8
  reg [7:0] emi_121_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_121_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_121_out1;  // uint8
  wire y1_18;
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk144_out1;  // uint8
  wire [7:0] cfblk132_out1;  // uint8
  reg [7:0] emi_40_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_40_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_40_out1;  // uint8
  wire y1_19;
  wire [7:0] cfblk158_out1;  // uint8
  reg [7:0] emi_161_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_161_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_161_out1;  // uint8
  wire y1_20;
  wire [7:0] cfblk126_out1;  // uint8
  wire [7:0] cfblk77_out1;  // uint8
  wire [7:0] cfblk54_out1;  // uint8
  reg [7:0] cfblk158_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_out1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  reg [7:0] emi_153_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_153_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_153_out1;  // uint8
  wire y1_21;
  wire [7:0] cfblk59_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk180_out1;  // uint8
  wire [7:0] cfblk118_out1;  // uint8
  wire [7:0] cfblk135_out1;  // uint8
  reg [7:0] cfblk174_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_out1;  // uint8
  wire [7:0] cfblk75_out1;  // uint8
  reg [7:0] emi_113_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_113_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_113_out1;  // uint8
  wire y1_22;
  wire [7:0] cfblk134_out1;  // uint8
  reg [7:0] emi_97_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_97_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_97_out1;  // uint8
  wire y1_23;
  wire [7:0] cfblk18_out1;  // uint8
  reg [7:0] emi_241_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_241_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_241_out1;  // uint8
  wire y1_24;
  wire [7:0] cfblk18_out2;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk104_out1;  // uint8
  reg [7:0] cfblk172_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_out1;  // uint8
  wire [7:0] cfblk8_out1;  // uint8
  wire [7:0] cfblk73_out1;  // uint8
  wire [7:0] cfblk139_out1;  // uint8
  reg [7:0] emi_201_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_201_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_201_out1;  // uint8
  wire y1_25;
  wire [7:0] cfblk117_out1;  // uint8
  reg [7:0] emi_169_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_169_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_169_out1;  // uint8
  wire y1_26;
  wire [7:0] cfblk184_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  reg [7:0] emi_137_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_137_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_137_out1;  // uint8
  wire y1_27;
  reg [7:0] emi_273_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_273_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_273_out1;  // uint8
  wire y1_28;
  wire [7:0] cfblk79_out1;  // uint8
  wire [7:0] cfblk91_out1;  // uint8
  wire [7:0] cfblk33_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  wire [7:0] cfblk28_out1;  // uint8
  reg [7:0] cfblk159_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk159_out1;  // uint8
  wire [7:0] cfblk121_out2;  // uint8
  reg [7:0] cfblk169_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_out1;  // uint8
  wire [7:0] cfblk188_out1;  // uint8
  reg [7:0] emi_249_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_249_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_249_out1;  // uint8
  wire y1_29;
  wire [15:0] cfblk31_out1;  // ufix16_En7
  reg [15:0] emi_185_reg [0:1];  // ufix16 [2]
  wire [15:0] emi_185_reg_next [0:1];  // ufix16_En7 [2]
  wire [15:0] emi_185_out1;  // ufix16_En7
  wire [7:0] emi_184_out1;  // uint8
  wire y1_30;
  wire [7:0] cfblk82_out1;  // uint8
  reg [7:0] emi_233_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_233_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_233_out1;  // uint8
  wire y1_31;
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk71_out1;  // uint8
  wire [7:0] cfblk47_out1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk105_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk46_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] cfblk62_out1;  // uint8
  wire [7:0] cfblk74_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] cfblk121_out1;  // uint8
  reg [7:0] emi_64_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_64_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_64_out1;  // uint8
  wire y1_32;
  wire [7:0] cfblk192_out1;  // uint8
  reg [7:0] emi_89_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_89_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_89_out1;  // uint8
  wire y1_33;
  wire [7:0] cfblk30_out1;  // uint8
  reg [7:0] emi_193_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_193_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_193_out1;  // uint8
  wire y1_34;
  wire [7:0] cfblk168_out1;  // uint8
  reg [7:0] cfblk122_out1;  // uint8
  wire [7:0] cfblk123_out1;  // uint8
  wire [7:0] cfblk125_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  wire [7:0] cfblk137_out1;  // uint8
  wire [7:0] cfblk116_out1;  // uint8
  wire [7:0] cfblk98_out1;  // uint8
  wire [7:0] cfblk94_out1;  // uint8
  reg [7:0] cfblk161_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_out1;  // uint8
  reg [7:0] cfblk88_out1;  // uint8
  wire [7:0] cfblk84_out1;  // uint8
  wire [7:0] cfblk124_out1;  // uint8
  wire [7:0] cfblk48_out1;  // uint8
  wire [7:0] cfblk115_out1;  // uint8
  reg [7:0] emi_23_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_23_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_23_out1;  // uint8
  wire y1_35;
  wire [7:0] cfblk21_out1;  // uint8
  reg [7:0] cfblk162_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_out1;  // uint8
  wire [15:0] cfblk110_out1;  // ufix16_En7
  wire [7:0] cfblk23_out1;  // uint8
  reg [7:0] emi_290_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_290_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_290_out1;  // uint8
  wire y1_36;
  wire [7:0] cfblk81_out1;  // uint8
  reg [7:0] cfblk176_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_out1;  // uint8
  wire signed [31:0] cfblk40_sub_cast;  // sfix32_En7
  wire signed [31:0] cfblk40_sub_cast_1;  // sfix32_En7
  wire signed [31:0] cfblk40_sub_temp;  // sfix32_En7
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] cfblk142_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  wire [7:0] cfblk153_out1;  // uint8
  wire [7:0] cfblk51_out1;  // uint8
  reg [7:0] cfblk99_out1;  // uint8
  wire [7:0] dtc_out_10;  // ufix8
  wire [7:0] cfblk90_out1;  // uint8
  wire [7:0] cfblk119_out1;  // uint8
  reg [7:0] cfblk164_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_out1;  // uint8
  wire [7:0] cfblk41_out2;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  wire [7:0] cfblk50_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  reg [7:0] cfblk167_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_reg_next [0:1];  // ufix8 [2]
  reg signed [31:0] emi_7_t_0_0;  // int32
  reg signed [31:0] emi_7_t_1;  // int32
  reg signed [31:0] cfblk170_t_0_0;  // int32
  reg signed [31:0] cfblk170_t_1;  // int32
  reg signed [31:0] emi_209_t_0_0;  // int32
  reg signed [31:0] emi_209_t_1;  // int32
  reg signed [31:0] emi_282_t_0_0;  // int32
  reg signed [31:0] emi_282_t_1;  // int32
  reg signed [31:0] emi_307_t_0_0;  // int32
  reg signed [31:0] emi_307_t_1;  // int32
  reg signed [31:0] emi_105_t_0_0;  // int32
  reg signed [31:0] emi_105_t_1;  // int32
  reg signed [31:0] emi_15_t_0_0;  // int32
  reg signed [31:0] emi_15_t_1;  // int32
  reg signed [31:0] cfblk175_t_0_0;  // int32
  reg signed [31:0] cfblk175_t_1;  // int32
  reg signed [31:0] emi_80_t_0_0;  // int32
  reg signed [31:0] emi_80_t_1;  // int32
  reg signed [31:0] emi_225_t_0_0;  // int32
  reg signed [31:0] emi_225_t_1;  // int32
  reg signed [31:0] emi_31_t_0_0;  // int32
  reg signed [31:0] emi_31_t_1;  // int32
  reg signed [31:0] emi_145_t_0_0;  // int32
  reg signed [31:0] emi_145_t_1;  // int32
  reg signed [31:0] cfblk165_t_0_0;  // int32
  reg signed [31:0] cfblk165_t_1;  // int32
  reg signed [31:0] emi_217_t_0_0;  // int32
  reg signed [31:0] emi_217_t_1;  // int32
  reg [8:0] cfblk146_div_temp;  // ufix9
  reg [8:0] cfblk146_t_0_0;  // ufix9
  reg signed [31:0] emi_129_t_0_0;  // int32
  reg signed [31:0] emi_129_t_1;  // int32
  reg signed [31:0] emi_265_t_0_0;  // int32
  reg signed [31:0] emi_265_t_1;  // int32
  reg signed [31:0] emi_56_t_0_0;  // int32
  reg signed [31:0] emi_56_t_1;  // int32
  reg signed [31:0] emi_48_t_0_0;  // int32
  reg signed [31:0] emi_48_t_1;  // int32
  reg signed [31:0] cfblk173_t_0_0;  // int32
  reg signed [31:0] cfblk173_t_1;  // int32
  reg [8:0] cfblk49_div_temp;  // ufix9
  reg [8:0] cfblk49_t_0_0;  // ufix9
  reg signed [31:0] cfblk166_t_0_0;  // int32
  reg signed [31:0] cfblk166_t_1;  // int32
  reg signed [31:0] emi_257_t_0_0;  // int32
  reg signed [31:0] emi_257_t_1;  // int32
  reg signed [31:0] cfblk163_t_0_0;  // int32
  reg signed [31:0] cfblk163_t_1;  // int32
  reg signed [31:0] emi_177_t_0_0;  // int32
  reg signed [31:0] emi_177_t_1;  // int32
  reg signed [31:0] emi_72_t_0_0;  // int32
  reg signed [31:0] emi_72_t_1;  // int32
  reg signed [31:0] emi_121_t_0_0;  // int32
  reg signed [31:0] emi_121_t_1;  // int32
  reg signed [31:0] emi_40_t_0_0;  // int32
  reg signed [31:0] emi_40_t_1;  // int32
  reg signed [31:0] emi_161_t_0_0;  // int32
  reg signed [31:0] emi_161_t_1;  // int32
  reg signed [31:0] cfblk158_t_0_0;  // int32
  reg signed [31:0] cfblk158_t_1;  // int32
  reg signed [31:0] emi_153_t_0_0;  // int32
  reg signed [31:0] emi_153_t_1;  // int32
  reg signed [31:0] cfblk174_t_0_0;  // int32
  reg signed [31:0] cfblk174_t_1;  // int32
  reg signed [31:0] emi_113_t_0_0;  // int32
  reg signed [31:0] emi_113_t_1;  // int32
  reg signed [31:0] emi_97_t_0_0;  // int32
  reg signed [31:0] emi_97_t_1;  // int32
  reg signed [31:0] emi_241_t_0_0;  // int32
  reg signed [31:0] emi_241_t_1;  // int32
  reg signed [31:0] cfblk172_t_0_0;  // int32
  reg signed [31:0] cfblk172_t_1;  // int32
  reg signed [31:0] emi_201_t_0_0;  // int32
  reg signed [31:0] emi_201_t_1;  // int32
  reg signed [31:0] emi_169_t_0_0;  // int32
  reg signed [31:0] emi_169_t_1;  // int32
  reg signed [31:0] emi_137_t_0_0;  // int32
  reg signed [31:0] emi_137_t_1;  // int32
  reg signed [31:0] emi_273_t_0_0;  // int32
  reg signed [31:0] emi_273_t_1;  // int32
  reg signed [31:0] cfblk159_t_0_0;  // int32
  reg signed [31:0] cfblk159_t_1;  // int32
  reg signed [31:0] cfblk169_t_0_0;  // int32
  reg signed [31:0] cfblk169_t_1;  // int32
  reg signed [31:0] emi_249_t_0_0;  // int32
  reg signed [31:0] emi_249_t_1;  // int32
  reg signed [31:0] emi_185_t_0_0;  // int32
  reg signed [31:0] emi_185_t_1;  // int32
  reg signed [31:0] emi_233_t_0_0;  // int32
  reg signed [31:0] emi_233_t_1;  // int32
  reg signed [31:0] cfblk171_t_0_0;  // int32
  reg signed [31:0] cfblk171_t_1;  // int32
  reg signed [31:0] emi_64_t_0_0;  // int32
  reg signed [31:0] emi_64_t_1;  // int32
  reg signed [31:0] emi_89_t_0_0;  // int32
  reg signed [31:0] emi_89_t_1;  // int32
  reg signed [31:0] emi_193_t_0_0;  // int32
  reg signed [31:0] emi_193_t_1;  // int32
  reg [8:0] cfblk122_div_temp;  // ufix9
  reg [8:0] cfblk122_t_0_0;  // ufix9
  reg signed [31:0] cfblk161_t_0_0;  // int32
  reg signed [31:0] cfblk161_t_1;  // int32
  reg [8:0] cfblk88_div_temp;  // ufix9
  reg [8:0] cfblk88_t_0_0;  // ufix9
  reg signed [31:0] emi_23_t_0_0;  // int32
  reg signed [31:0] emi_23_t_1;  // int32
  reg signed [31:0] cfblk162_t_0_0;  // int32
  reg signed [31:0] cfblk162_t_1;  // int32
  reg signed [31:0] emi_290_t_0_0;  // int32
  reg signed [31:0] emi_290_t_1;  // int32
  reg signed [31:0] cfblk176_t_0_0;  // int32
  reg signed [31:0] cfblk176_t_1;  // int32
  reg [8:0] cfblk99_div_temp;  // ufix9
  reg [8:0] cfblk99_t_0_0;  // ufix9
  reg signed [31:0] cfblk164_t_0_0;  // int32
  reg signed [31:0] cfblk164_t_1;  // int32
  reg signed [31:0] cfblk167_t_0_0;  // int32
  reg signed [31:0] cfblk167_t_1;  // int32


  assign enb = clk_enable;

  assign cfblk19_const_val_1 = 8'b00000000;



  assign cfblk30_const_val_1 = 8'b00000000;



  assign cfblk117_const_val_1 = 8'b00000000;



  assign cfblk33_const_val_1 = 8'b00000000;



  assign cfblk151_out1 = 8'b00000001;



  assign cfblk85_const_val_1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : emi_7_process
      if (reset == 1'b1) begin
        for(emi_7_t_1 = 32'sd0; emi_7_t_1 <= 32'sd1; emi_7_t_1 = emi_7_t_1 + 32'sd1) begin
          emi_7_reg[emi_7_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_7_t_0_0 = 32'sd0; emi_7_t_0_0 <= 32'sd1; emi_7_t_0_0 = emi_7_t_0_0 + 32'sd1) begin
            emi_7_reg[emi_7_t_0_0] <= emi_7_reg_next[emi_7_t_0_0];
          end
        end
      end
    end

  assign emi_7_out1 = emi_7_reg[1];
  assign emi_7_reg_next[0] = cfblk167_out1;
  assign emi_7_reg_next[1] = emi_7_reg[0];



  assign y1 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        for(cfblk170_t_1 = 32'sd0; cfblk170_t_1 <= 32'sd1; cfblk170_t_1 = cfblk170_t_1 + 32'sd1) begin
          cfblk170_reg[cfblk170_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk170_t_0_0 = 32'sd0; cfblk170_t_0_0 <= 32'sd1; cfblk170_t_0_0 = cfblk170_t_0_0 + 32'sd1) begin
            cfblk170_reg[cfblk170_t_0_0] <= cfblk170_reg_next[cfblk170_t_0_0];
          end
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk109_out2;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  always @(posedge clk or posedge reset)
    begin : emi_209_process
      if (reset == 1'b1) begin
        for(emi_209_t_1 = 32'sd0; emi_209_t_1 <= 32'sd1; emi_209_t_1 = emi_209_t_1 + 32'sd1) begin
          emi_209_reg[emi_209_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_209_t_0_0 = 32'sd0; emi_209_t_0_0 <= 32'sd1; emi_209_t_0_0 = emi_209_t_0_0 + 32'sd1) begin
            emi_209_reg[emi_209_t_0_0] <= emi_209_reg_next[emi_209_t_0_0];
          end
        end
      end
    end

  assign emi_209_out1 = emi_209_reg[1];
  assign emi_209_reg_next[0] = cfblk80_out1;
  assign emi_209_reg_next[1] = emi_209_reg[0];



  assign y1_1 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_282_process
      if (reset == 1'b1) begin
        for(emi_282_t_1 = 32'sd0; emi_282_t_1 <= 32'sd1; emi_282_t_1 = emi_282_t_1 + 32'sd1) begin
          emi_282_reg[emi_282_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_282_t_0_0 = 32'sd0; emi_282_t_0_0 <= 32'sd1; emi_282_t_0_0 = emi_282_t_0_0 + 32'sd1) begin
            emi_282_reg[emi_282_t_0_0] <= emi_282_reg_next[emi_282_t_0_0];
          end
        end
      end
    end

  assign emi_282_out1 = emi_282_reg[1];
  assign emi_282_reg_next[0] = cfblk85_out1;
  assign emi_282_reg_next[1] = emi_282_reg[0];



  assign y1_2 = 1'b1;



  cfblk80 u_cfblk80 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_275(cfblk85_out1),  // uint8
                     .Action_Port(y1_2),
                     .emi_276(cfblk80_out1)  // uint8
                     );

  cfblk2_block u_cfblk2 (.clk(clk),
                         .reset(reset),
                         .enb(clk_enable),
                         .emi_203(cfblk80_out1),  // uint8
                         .Action_Port(y1_1),
                         .emi_204(cfblk2_out1)  // uint8
                         );

  always @(posedge clk or posedge reset)
    begin : emi_307_process
      if (reset == 1'b1) begin
        for(emi_307_t_1 = 32'sd0; emi_307_t_1 <= 32'sd1; emi_307_t_1 = emi_307_t_1 + 32'sd1) begin
          emi_307_reg[emi_307_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_307_t_0_0 = 32'sd0; emi_307_t_0_0 <= 32'sd1; emi_307_t_0_0 = emi_307_t_0_0 + 32'sd1) begin
            emi_307_reg[emi_307_t_0_0] <= emi_307_reg_next[emi_307_t_0_0];
          end
        end
      end
    end

  assign emi_307_out1 = emi_307_reg[1];
  assign emi_307_reg_next[0] = cfblk185_out1;
  assign emi_307_reg_next[1] = emi_307_reg[0];



  assign y1_3 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_105_process
      if (reset == 1'b1) begin
        for(emi_105_t_1 = 32'sd0; emi_105_t_1 <= 32'sd1; emi_105_t_1 = emi_105_t_1 + 32'sd1) begin
          emi_105_reg[emi_105_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_105_t_0_0 = 32'sd0; emi_105_t_0_0 <= 32'sd1; emi_105_t_0_0 = emi_105_t_0_0 + 32'sd1) begin
            emi_105_reg[emi_105_t_0_0] <= emi_105_reg_next[emi_105_t_0_0];
          end
        end
      end
    end

  assign emi_105_out1 = emi_105_reg[1];
  assign emi_105_reg_next[0] = cfblk36_out1;
  assign emi_105_reg_next[1] = emi_105_reg[0];



  assign y1_4 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_15_process
      if (reset == 1'b1) begin
        for(emi_15_t_1 = 32'sd0; emi_15_t_1 <= 32'sd1; emi_15_t_1 = emi_15_t_1 + 32'sd1) begin
          emi_15_reg[emi_15_t_1] <= 8'b00000001;
        end
      end
      else begin
        if (enb) begin
          for(emi_15_t_0_0 = 32'sd0; emi_15_t_0_0 <= 32'sd1; emi_15_t_0_0 = emi_15_t_0_0 + 32'sd1) begin
            emi_15_reg[emi_15_t_0_0] <= emi_15_reg_next[emi_15_t_0_0];
          end
        end
      end
    end

  assign emi_15_out1 = emi_15_reg[1];
  assign emi_15_reg_next[0] = cfblk27_out1;
  assign emi_15_reg_next[1] = emi_15_reg[0];



  assign y1_5 = emi_15_out1 >= 8'b00000001;



  cfblk100 u_cfblk100 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_9(cfblk27_out1),  // uint8
                       .Action_Port(y1_5),
                       .emi_10(cfblk100_out1)  // uint8
                       );

  cfblk106 u_cfblk106 (.u(cfblk100_out1),  // uint8
                       .y(cfblk106_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk175_process
      if (reset == 1'b1) begin
        for(cfblk175_t_1 = 32'sd0; cfblk175_t_1 <= 32'sd1; cfblk175_t_1 = cfblk175_t_1 + 32'sd1) begin
          cfblk175_reg[cfblk175_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk175_t_0_0 = 32'sd0; cfblk175_t_0_0 <= 32'sd1; cfblk175_t_0_0 = cfblk175_t_0_0 + 32'sd1) begin
            cfblk175_reg[cfblk175_t_0_0] <= cfblk175_reg_next[cfblk175_t_0_0];
          end
        end
      end
    end

  assign cfblk175_out1 = cfblk175_reg[1];
  assign cfblk175_reg_next[0] = cfblk106_out1;
  assign cfblk175_reg_next[1] = cfblk175_reg[0];



  assign cfblk103_out1 = cfblk141_out1 - cfblk175_out1;



  always @(posedge clk or posedge reset)
    begin : emi_80_process
      if (reset == 1'b1) begin
        for(emi_80_t_1 = 32'sd0; emi_80_t_1 <= 32'sd1; emi_80_t_1 = emi_80_t_1 + 32'sd1) begin
          emi_80_reg[emi_80_t_1] <= 8'b00000001;
        end
      end
      else begin
        if (enb) begin
          for(emi_80_t_0_0 = 32'sd0; emi_80_t_0_0 <= 32'sd1; emi_80_t_0_0 = emi_80_t_0_0 + 32'sd1) begin
            emi_80_reg[emi_80_t_0_0] <= emi_80_reg_next[emi_80_t_0_0];
          end
        end
      end
    end

  assign emi_80_out1 = emi_80_reg[1];
  assign emi_80_reg_next[0] = cfblk3_out1;
  assign emi_80_reg_next[1] = emi_80_reg[0];



  assign y1_6 = emi_80_out1 >= 8'b00000001;



  always @(posedge clk or posedge reset)
    begin : emi_225_process
      if (reset == 1'b1) begin
        for(emi_225_t_1 = 32'sd0; emi_225_t_1 <= 32'sd1; emi_225_t_1 = emi_225_t_1 + 32'sd1) begin
          emi_225_reg[emi_225_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_225_t_0_0 = 32'sd0; emi_225_t_0_0 <= 32'sd1; emi_225_t_0_0 = emi_225_t_0_0 + 32'sd1) begin
            emi_225_reg[emi_225_t_0_0] <= emi_225_reg_next[emi_225_t_0_0];
          end
        end
      end
    end

  assign emi_225_out1 = emi_225_reg[1];
  assign emi_225_reg_next[0] = cfblk108_out1;
  assign emi_225_reg_next[1] = emi_225_reg[0];



  assign y1_7 = emi_225_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_31_process
      if (reset == 1'b1) begin
        for(emi_31_t_1 = 32'sd0; emi_31_t_1 <= 32'sd1; emi_31_t_1 = emi_31_t_1 + 32'sd1) begin
          emi_31_reg[emi_31_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_31_t_0_0 = 32'sd0; emi_31_t_0_0 <= 32'sd1; emi_31_t_0_0 = emi_31_t_0_0 + 32'sd1) begin
            emi_31_reg[emi_31_t_0_0] <= emi_31_reg_next[emi_31_t_0_0];
          end
        end
      end
    end

  assign emi_31_out1 = emi_31_reg[1];
  assign emi_31_reg_next[0] = cfblk145_out1;
  assign emi_31_reg_next[1] = emi_31_reg[0];



  assign y1_8 = emi_31_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_145_process
      if (reset == 1'b1) begin
        for(emi_145_t_1 = 32'sd0; emi_145_t_1 <= 32'sd1; emi_145_t_1 = emi_145_t_1 + 32'sd1) begin
          emi_145_reg[emi_145_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_145_t_0_0 = 32'sd0; emi_145_t_0_0 <= 32'sd1; emi_145_t_0_0 = emi_145_t_0_0 + 32'sd1) begin
            emi_145_reg[emi_145_t_0_0] <= emi_145_reg_next[emi_145_t_0_0];
          end
        end
      end
    end

  assign emi_145_out1 = emi_145_reg[1];
  assign emi_145_reg_next[0] = cfblk45_out1;
  assign emi_145_reg_next[1] = emi_145_reg[0];



  assign y1_9 = emi_145_out1 == 8'b11111111;



  cfblk156 u_cfblk156 (.In1(cfblk70_out1),  // uint8
                       .Out1(cfblk156_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk165_process
      if (reset == 1'b1) begin
        for(cfblk165_t_1 = 32'sd0; cfblk165_t_1 <= 32'sd1; cfblk165_t_1 = cfblk165_t_1 + 32'sd1) begin
          cfblk165_reg[cfblk165_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk165_t_0_0 = 32'sd0; cfblk165_t_0_0 <= 32'sd1; cfblk165_t_0_0 = cfblk165_t_0_0 + 32'sd1) begin
            cfblk165_reg[cfblk165_t_0_0] <= cfblk165_reg_next[cfblk165_t_0_0];
          end
        end
      end
    end

  assign cfblk165_out1 = cfblk165_reg[1];
  assign cfblk165_reg_next[0] = cfblk156_out1;
  assign cfblk165_reg_next[1] = cfblk165_reg[0];



  cfblk143 u_cfblk143 (.u(cfblk109_out1),  // uint8
                       .y(cfblk143_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : emi_217_process
      if (reset == 1'b1) begin
        for(emi_217_t_1 = 32'sd0; emi_217_t_1 <= 32'sd1; emi_217_t_1 = emi_217_t_1 + 32'sd1) begin
          emi_217_reg[emi_217_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_217_t_0_0 = 32'sd0; emi_217_t_0_0 <= 32'sd1; emi_217_t_0_0 = emi_217_t_0_0 + 32'sd1) begin
            emi_217_reg[emi_217_t_0_0] <= emi_217_reg_next[emi_217_t_0_0];
          end
        end
      end
    end

  assign emi_217_out1 = emi_217_reg[1];
  assign emi_217_reg_next[0] = cfblk146_out1;
  assign emi_217_reg_next[1] = emi_217_reg[0];



  assign y1_10 = emi_217_out1 == 8'b11111111;



  always @(cfblk101_out1, cfblk15_out1) begin
    cfblk146_div_temp = 9'b000000000;
    cfblk146_t_0_0 = 9'b000000000;
    if (cfblk15_out1 == 8'b00000000) begin
      cfblk146_out1 = 8'b11111111;
    end
    else begin
      cfblk146_t_0_0 = {1'b0, cfblk101_out1};
      cfblk146_div_temp = cfblk146_t_0_0 / cfblk15_out1;
      if (cfblk146_div_temp[8] != 1'b0) begin
        cfblk146_out1 = 8'b11111111;
      end
      else begin
        cfblk146_out1 = cfblk146_div_temp[7:0];
      end
    end
  end



  cfblk20 u_cfblk20 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_211(cfblk146_out1),  // uint8
                     .Action_Port(y1_10),
                     .emi_212(cfblk20_out1)  // uint8
                     );

  always @(posedge clk or posedge reset)
    begin : emi_129_process
      if (reset == 1'b1) begin
        for(emi_129_t_1 = 32'sd0; emi_129_t_1 <= 32'sd1; emi_129_t_1 = emi_129_t_1 + 32'sd1) begin
          emi_129_reg[emi_129_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_129_t_0_0 = 32'sd0; emi_129_t_0_0 <= 32'sd1; emi_129_t_0_0 = emi_129_t_0_0 + 32'sd1) begin
            emi_129_reg[emi_129_t_0_0] <= emi_129_reg_next[emi_129_t_0_0];
          end
        end
      end
    end

  assign emi_129_out1 = emi_129_reg[1];
  assign emi_129_reg_next[0] = cfblk10_out1;
  assign emi_129_reg_next[1] = emi_129_reg[0];



  assign y1_11 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_265_process
      if (reset == 1'b1) begin
        for(emi_265_t_1 = 32'sd0; emi_265_t_1 <= 32'sd1; emi_265_t_1 = emi_265_t_1 + 32'sd1) begin
          emi_265_reg[emi_265_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_265_t_0_0 = 32'sd0; emi_265_t_0_0 <= 32'sd1; emi_265_t_0_0 = emi_265_t_0_0 + 32'sd1) begin
            emi_265_reg[emi_265_t_0_0] <= emi_265_reg_next[emi_265_t_0_0];
          end
        end
      end
    end

  assign emi_265_out1 = emi_265_reg[1];
  assign emi_265_reg_next[0] = cfblk40_out1;
  assign emi_265_reg_next[1] = emi_265_reg[0];



  assign y1_12 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_56_process
      if (reset == 1'b1) begin
        for(emi_56_t_1 = 32'sd0; emi_56_t_1 <= 32'sd1; emi_56_t_1 = emi_56_t_1 + 32'sd1) begin
          emi_56_reg[emi_56_t_1] <= 8'b00000001;
        end
      end
      else begin
        if (enb) begin
          for(emi_56_t_0_0 = 32'sd0; emi_56_t_0_0 <= 32'sd1; emi_56_t_0_0 = emi_56_t_0_0 + 32'sd1) begin
            emi_56_reg[emi_56_t_0_0] <= emi_56_reg_next[emi_56_t_0_0];
          end
        end
      end
    end

  assign emi_56_out1 = emi_56_reg[1];
  assign emi_56_reg_next[0] = cfblk27_out1;
  assign emi_56_reg_next[1] = emi_56_reg[0];



  assign y1_13 = emi_56_out1 >= 8'b00000001;



  always @(posedge clk or posedge reset)
    begin : emi_48_process
      if (reset == 1'b1) begin
        for(emi_48_t_1 = 32'sd0; emi_48_t_1 <= 32'sd1; emi_48_t_1 = emi_48_t_1 + 32'sd1) begin
          emi_48_reg[emi_48_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_48_t_0_0 = 32'sd0; emi_48_t_0_0 <= 32'sd1; emi_48_t_0_0 = emi_48_t_0_0 + 32'sd1) begin
            emi_48_reg[emi_48_t_0_0] <= emi_48_reg_next[emi_48_t_0_0];
          end
        end
      end
    end

  assign emi_48_out1 = emi_48_reg[1];
  assign emi_48_reg_next[0] = cfblk49_out1;
  assign emi_48_reg_next[1] = emi_48_reg[0];



  assign y1_14 = emi_48_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : cfblk173_process
      if (reset == 1'b1) begin
        for(cfblk173_t_1 = 32'sd0; cfblk173_t_1 <= 32'sd1; cfblk173_t_1 = cfblk173_t_1 + 32'sd1) begin
          cfblk173_reg[cfblk173_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk173_t_0_0 = 32'sd0; cfblk173_t_0_0 <= 32'sd1; cfblk173_t_0_0 = cfblk173_t_0_0 + 32'sd1) begin
            cfblk173_reg[cfblk173_t_0_0] <= cfblk173_reg_next[cfblk173_t_0_0];
          end
        end
      end
    end

  assign cfblk173_out1 = cfblk173_reg[1];
  assign cfblk173_reg_next[0] = cfblk50_out2;
  assign cfblk173_reg_next[1] = cfblk173_reg[0];



  always @(cfblk157_out1, cfblk173_out1) begin
    cfblk49_div_temp = 9'b000000000;
    cfblk49_t_0_0 = 9'b000000000;
    if (cfblk173_out1 == 8'b00000000) begin
      cfblk49_out1 = 8'b11111111;
    end
    else begin
      cfblk49_t_0_0 = {1'b0, cfblk157_out1};
      cfblk49_div_temp = cfblk49_t_0_0 / cfblk173_out1;
      if (cfblk49_div_temp[8] != 1'b0) begin
        cfblk49_out1 = 8'b11111111;
      end
      else begin
        cfblk49_out1 = cfblk49_div_temp[7:0];
      end
    end
  end



  cfblk11 u_cfblk11 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_42(cfblk49_out1),  // uint8
                     .Action_Port(y1_14),
                     .emi_43(cfblk11_out1)  // uint8
                     );

  assign cfblk101_out1 = cfblk11_out1;
  assign cfblk101_out2 = 8'b00000000;



  DotProduct_block4 u_cfblk52_inst (.in1(cfblk101_out2),  // uint8
                                    .in2(cfblk70_out1),  // uint8
                                    .out1(cfblk52_out1)  // uint8
                                    );

  assign cfblk42_out1 = cfblk52_out1 - cfblk87_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk166_process
      if (reset == 1'b1) begin
        for(cfblk166_t_1 = 32'sd0; cfblk166_t_1 <= 32'sd1; cfblk166_t_1 = cfblk166_t_1 + 32'sd1) begin
          cfblk166_reg[cfblk166_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk166_t_0_0 = 32'sd0; cfblk166_t_0_0 <= 32'sd1; cfblk166_t_0_0 = cfblk166_t_0_0 + 32'sd1) begin
            cfblk166_reg[cfblk166_t_0_0] <= cfblk166_reg_next[cfblk166_t_0_0];
          end
        end
      end
    end

  assign cfblk166_out1 = cfblk166_reg[1];
  assign cfblk166_reg_next[0] = cfblk42_out1;
  assign cfblk166_reg_next[1] = cfblk166_reg[0];



  always @(posedge clk or posedge reset)
    begin : emi_257_process
      if (reset == 1'b1) begin
        for(emi_257_t_1 = 32'sd0; emi_257_t_1 <= 32'sd1; emi_257_t_1 = emi_257_t_1 + 32'sd1) begin
          emi_257_reg[emi_257_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_257_t_0_0 = 32'sd0; emi_257_t_0_0 <= 32'sd1; emi_257_t_0_0 = emi_257_t_0_0 + 32'sd1) begin
            emi_257_reg[emi_257_t_0_0] <= emi_257_reg_next[emi_257_t_0_0];
          end
        end
      end
    end

  assign emi_257_out1 = emi_257_reg[1];
  assign emi_257_reg_next[0] = cfblk130_out1;
  assign emi_257_reg_next[1] = emi_257_reg[0];



  assign y1_15 = emi_257_out1 == 8'b11111111;



  cfblk72 u_cfblk72 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_251(cfblk130_out1),  // uint8
                     .Action_Port(y1_15),
                     .emi_252(cfblk72_out1)  // uint8
                     );

  assign dtc_out = cfblk72_out1;



  assign cfblk93_out1 = dtc_out;



  always @(posedge clk or posedge reset)
    begin : cfblk163_process
      if (reset == 1'b1) begin
        for(cfblk163_t_1 = 32'sd0; cfblk163_t_1 <= 32'sd1; cfblk163_t_1 = cfblk163_t_1 + 32'sd1) begin
          cfblk163_reg[cfblk163_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk163_t_0_0 = 32'sd0; cfblk163_t_0_0 <= 32'sd1; cfblk163_t_0_0 = cfblk163_t_0_0 + 32'sd1) begin
            cfblk163_reg[cfblk163_t_0_0] <= cfblk163_reg_next[cfblk163_t_0_0];
          end
        end
      end
    end

  assign cfblk163_out1 = cfblk163_reg[1];
  assign cfblk163_reg_next[0] = cfblk93_out1;
  assign cfblk163_reg_next[1] = cfblk163_reg[0];



  assign cfblk61_out1 = cfblk163_out1 + cfblk41_out1;



  assign dtc_out_1 = cfblk61_out1;



  assign cfblk66_out1 = dtc_out_1;



  assign cfblk57_out1 = cfblk66_out1 - cfblk166_out1;



  assign cfblk44_out1 = cfblk151_out1 - cfblk57_out1;



  assign dtc_out_2 = cfblk44_out1;



  assign cfblk22_out1 = dtc_out_2;



  always @(posedge clk or posedge reset)
    begin : emi_177_process
      if (reset == 1'b1) begin
        for(emi_177_t_1 = 32'sd0; emi_177_t_1 <= 32'sd1; emi_177_t_1 = emi_177_t_1 + 32'sd1) begin
          emi_177_reg[emi_177_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_177_t_0_0 = 32'sd0; emi_177_t_0_0 <= 32'sd1; emi_177_t_0_0 = emi_177_t_0_0 + 32'sd1) begin
            emi_177_reg[emi_177_t_0_0] <= emi_177_reg_next[emi_177_t_0_0];
          end
        end
      end
    end

  assign emi_177_out1 = emi_177_reg[1];
  assign emi_177_reg_next[0] = cfblk114_out1;
  assign emi_177_reg_next[1] = emi_177_reg[0];



  assign y1_16 = emi_177_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_72_process
      if (reset == 1'b1) begin
        for(emi_72_t_1 = 32'sd0; emi_72_t_1 <= 32'sd1; emi_72_t_1 = emi_72_t_1 + 32'sd1) begin
          emi_72_reg[emi_72_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_72_t_0_0 = 32'sd0; emi_72_t_0_0 <= 32'sd1; emi_72_t_0_0 = emi_72_t_0_0 + 32'sd1) begin
            emi_72_reg[emi_72_t_0_0] <= emi_72_reg_next[emi_72_t_0_0];
          end
        end
      end
    end

  assign emi_72_out1 = emi_72_reg[1];
  assign emi_72_reg_next[0] = cfblk14_out1;
  assign emi_72_reg_next[1] = emi_72_reg[0];



  assign y1_17 = emi_72_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_121_process
      if (reset == 1'b1) begin
        for(emi_121_t_1 = 32'sd0; emi_121_t_1 <= 32'sd1; emi_121_t_1 = emi_121_t_1 + 32'sd1) begin
          emi_121_reg[emi_121_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_121_t_0_0 = 32'sd0; emi_121_t_0_0 <= 32'sd1; emi_121_t_0_0 = emi_121_t_0_0 + 32'sd1) begin
            emi_121_reg[emi_121_t_0_0] <= emi_121_reg_next[emi_121_t_0_0];
          end
        end
      end
    end

  assign emi_121_out1 = emi_121_reg[1];
  assign emi_121_reg_next[0] = cfblk83_out1;
  assign emi_121_reg_next[1] = emi_121_reg[0];



  assign y1_18 = emi_121_out1 == 8'b11111111;



  assign dtc_out_3 = cfblk87_out1;



  assign cfblk83_out1 = dtc_out_3;



  cfblk144 u_cfblk144 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_115(cfblk83_out1),  // uint8
                       .Action_Port(y1_18),
                       .emi_116(cfblk144_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : emi_40_process
      if (reset == 1'b1) begin
        for(emi_40_t_1 = 32'sd0; emi_40_t_1 <= 32'sd1; emi_40_t_1 = emi_40_t_1 + 32'sd1) begin
          emi_40_reg[emi_40_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_40_t_0_0 = 32'sd0; emi_40_t_0_0 <= 32'sd1; emi_40_t_0_0 = emi_40_t_0_0 + 32'sd1) begin
            emi_40_reg[emi_40_t_0_0] <= emi_40_reg_next[emi_40_t_0_0];
          end
        end
      end
    end

  assign emi_40_out1 = emi_40_reg[1];
  assign emi_40_reg_next[0] = cfblk132_out1;
  assign emi_40_reg_next[1] = emi_40_reg[0];



  assign y1_19 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_161_process
      if (reset == 1'b1) begin
        for(emi_161_t_1 = 32'sd0; emi_161_t_1 <= 32'sd1; emi_161_t_1 = emi_161_t_1 + 32'sd1) begin
          emi_161_reg[emi_161_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_161_t_0_0 = 32'sd0; emi_161_t_0_0 <= 32'sd1; emi_161_t_0_0 = emi_161_t_0_0 + 32'sd1) begin
            emi_161_reg[emi_161_t_0_0] <= emi_161_reg_next[emi_161_t_0_0];
          end
        end
      end
    end

  assign emi_161_out1 = emi_161_reg[1];
  assign emi_161_reg_next[0] = cfblk158_out1;
  assign emi_161_reg_next[1] = emi_161_reg[0];



  assign y1_20 = 1'b1;



  DotProduct_block5 u_cfblk54_inst (.in1(cfblk126_out1),  // uint8
                                    .in2(cfblk77_out1),  // uint8
                                    .out1(cfblk54_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk158_process
      if (reset == 1'b1) begin
        for(cfblk158_t_1 = 32'sd0; cfblk158_t_1 <= 32'sd1; cfblk158_t_1 = cfblk158_t_1 + 32'sd1) begin
          cfblk158_reg[cfblk158_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk158_t_0_0 = 32'sd0; cfblk158_t_0_0 <= 32'sd1; cfblk158_t_0_0 = cfblk158_t_0_0 + 32'sd1) begin
            cfblk158_reg[cfblk158_t_0_0] <= cfblk158_reg_next[cfblk158_t_0_0];
          end
        end
      end
    end

  assign cfblk158_out1 = cfblk158_reg[1];
  assign cfblk158_reg_next[0] = cfblk54_out1;
  assign cfblk158_reg_next[1] = cfblk158_reg[0];



  cfblk181 u_cfblk181 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_155(cfblk158_out1),  // uint8
                       .Action_Port(y1_20),
                       .emi_156(cfblk181_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : emi_153_process
      if (reset == 1'b1) begin
        for(emi_153_t_1 = 32'sd0; emi_153_t_1 <= 32'sd1; emi_153_t_1 = emi_153_t_1 + 32'sd1) begin
          emi_153_reg[emi_153_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_153_t_0_0 = 32'sd0; emi_153_t_0_0 <= 32'sd1; emi_153_t_0_0 = emi_153_t_0_0 + 32'sd1) begin
            emi_153_reg[emi_153_t_0_0] <= emi_153_reg_next[emi_153_t_0_0];
          end
        end
      end
    end

  assign emi_153_out1 = emi_153_reg[1];
  assign emi_153_reg_next[0] = cfblk24_out1;
  assign emi_153_reg_next[1] = emi_153_reg[0];



  assign y1_21 = 1'b1;



  assign dtc_out_4 = cfblk59_out1;



  assign cfblk24_out1 = dtc_out_4;



  cfblk180 u_cfblk180 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_147(cfblk24_out1),  // uint8
                       .Action_Port(y1_21),
                       .emi_148(cfblk180_out1)  // uint8
                       );

  assign cfblk118_out1 = cfblk180_out1 + cfblk181_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk174_process
      if (reset == 1'b1) begin
        for(cfblk174_t_1 = 32'sd0; cfblk174_t_1 <= 32'sd1; cfblk174_t_1 = cfblk174_t_1 + 32'sd1) begin
          cfblk174_reg[cfblk174_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk174_t_0_0 = 32'sd0; cfblk174_t_0_0 <= 32'sd1; cfblk174_t_0_0 = cfblk174_t_0_0 + 32'sd1) begin
            cfblk174_reg[cfblk174_t_0_0] <= cfblk174_reg_next[cfblk174_t_0_0];
          end
        end
      end
    end

  assign cfblk174_out1 = cfblk174_reg[1];
  assign cfblk174_reg_next[0] = cfblk135_out1;
  assign cfblk174_reg_next[1] = cfblk174_reg[0];



  DotProduct_block1 u_cfblk141_inst (.in1(cfblk174_out1),  // uint8
                                     .in2(cfblk118_out1),  // uint8
                                     .out1(cfblk141_out1)  // uint8
                                     );

  always @(posedge clk or posedge reset)
    begin : emi_113_process
      if (reset == 1'b1) begin
        for(emi_113_t_1 = 32'sd0; emi_113_t_1 <= 32'sd1; emi_113_t_1 = emi_113_t_1 + 32'sd1) begin
          emi_113_reg[emi_113_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_113_t_0_0 = 32'sd0; emi_113_t_0_0 <= 32'sd1; emi_113_t_0_0 = emi_113_t_0_0 + 32'sd1) begin
            emi_113_reg[emi_113_t_0_0] <= emi_113_reg_next[emi_113_t_0_0];
          end
        end
      end
    end

  assign emi_113_out1 = emi_113_reg[1];
  assign emi_113_reg_next[0] = cfblk75_out1;
  assign emi_113_reg_next[1] = emi_113_reg[0];



  assign y1_22 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_97_process
      if (reset == 1'b1) begin
        for(emi_97_t_1 = 32'sd0; emi_97_t_1 <= 32'sd1; emi_97_t_1 = emi_97_t_1 + 32'sd1) begin
          emi_97_reg[emi_97_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_97_t_0_0 = 32'sd0; emi_97_t_0_0 <= 32'sd1; emi_97_t_0_0 = emi_97_t_0_0 + 32'sd1) begin
            emi_97_reg[emi_97_t_0_0] <= emi_97_reg_next[emi_97_t_0_0];
          end
        end
      end
    end

  assign emi_97_out1 = emi_97_reg[1];
  assign emi_97_reg_next[0] = cfblk134_out1;
  assign emi_97_reg_next[1] = emi_97_reg[0];



  assign y1_23 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_241_process
      if (reset == 1'b1) begin
        for(emi_241_t_1 = 32'sd0; emi_241_t_1 <= 32'sd1; emi_241_t_1 = emi_241_t_1 + 32'sd1) begin
          emi_241_reg[emi_241_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_241_t_0_0 = 32'sd0; emi_241_t_0_0 <= 32'sd1; emi_241_t_0_0 = emi_241_t_0_0 + 32'sd1) begin
            emi_241_reg[emi_241_t_0_0] <= emi_241_reg_next[emi_241_t_0_0];
          end
        end
      end
    end

  assign emi_241_out1 = emi_241_reg[1];
  assign emi_241_reg_next[0] = cfblk18_out1;
  assign emi_241_reg_next[1] = emi_241_reg[0];



  assign y1_24 = 1'b1;



  assign dtc_out_5 = cfblk18_out2;



  assign cfblk104_out1 = dtc_out_5;



  always @(posedge clk or posedge reset)
    begin : cfblk172_process
      if (reset == 1'b1) begin
        for(cfblk172_t_1 = 32'sd0; cfblk172_t_1 <= 32'sd1; cfblk172_t_1 = cfblk172_t_1 + 32'sd1) begin
          cfblk172_reg[cfblk172_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk172_t_0_0 = 32'sd0; cfblk172_t_0_0 <= 32'sd1; cfblk172_t_0_0 = cfblk172_t_0_0 + 32'sd1) begin
            cfblk172_reg[cfblk172_t_0_0] <= cfblk172_reg_next[cfblk172_t_0_0];
          end
        end
      end
    end

  assign cfblk172_out1 = cfblk172_reg[1];
  assign cfblk172_reg_next[0] = cfblk104_out1;
  assign cfblk172_reg_next[1] = cfblk172_reg[0];



  assign cfblk73_out1 = cfblk77_out1 - cfblk8_out1;



  always @(posedge clk or posedge reset)
    begin : emi_201_process
      if (reset == 1'b1) begin
        for(emi_201_t_1 = 32'sd0; emi_201_t_1 <= 32'sd1; emi_201_t_1 = emi_201_t_1 + 32'sd1) begin
          emi_201_reg[emi_201_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_201_t_0_0 = 32'sd0; emi_201_t_0_0 <= 32'sd1; emi_201_t_0_0 = emi_201_t_0_0 + 32'sd1) begin
            emi_201_reg[emi_201_t_0_0] <= emi_201_reg_next[emi_201_t_0_0];
          end
        end
      end
    end

  assign emi_201_out1 = emi_201_reg[1];
  assign emi_201_reg_next[0] = cfblk139_out1;
  assign emi_201_reg_next[1] = emi_201_reg[0];



  assign y1_25 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_169_process
      if (reset == 1'b1) begin
        for(emi_169_t_1 = 32'sd0; emi_169_t_1 <= 32'sd1; emi_169_t_1 = emi_169_t_1 + 32'sd1) begin
          emi_169_reg[emi_169_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_169_t_0_0 = 32'sd0; emi_169_t_0_0 <= 32'sd1; emi_169_t_0_0 = emi_169_t_0_0 + 32'sd1) begin
            emi_169_reg[emi_169_t_0_0] <= emi_169_reg_next[emi_169_t_0_0];
          end
        end
      end
    end

  assign emi_169_out1 = emi_169_reg[1];
  assign emi_169_reg_next[0] = cfblk117_out1;
  assign emi_169_reg_next[1] = emi_169_reg[0];



  assign y1_26 = 1'b1;



  cfblk184 u_cfblk184 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_163(cfblk117_out1),  // uint8
                       .Action_Port(y1_26),
                       .emi_164(cfblk184_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : emi_137_process
      if (reset == 1'b1) begin
        for(emi_137_t_1 = 32'sd0; emi_137_t_1 <= 32'sd1; emi_137_t_1 = emi_137_t_1 + 32'sd1) begin
          emi_137_reg[emi_137_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_137_t_0_0 = 32'sd0; emi_137_t_0_0 <= 32'sd1; emi_137_t_0_0 = emi_137_t_0_0 + 32'sd1) begin
            emi_137_reg[emi_137_t_0_0] <= emi_137_reg_next[emi_137_t_0_0];
          end
        end
      end
    end

  assign emi_137_out1 = emi_137_reg[1];
  assign emi_137_reg_next[0] = cfblk16_out1;
  assign emi_137_reg_next[1] = emi_137_reg[0];



  assign y1_27 = emi_137_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_273_process
      if (reset == 1'b1) begin
        for(emi_273_t_1 = 32'sd0; emi_273_t_1 <= 32'sd1; emi_273_t_1 = emi_273_t_1 + 32'sd1) begin
          emi_273_reg[emi_273_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_273_t_0_0 = 32'sd0; emi_273_t_0_0 <= 32'sd1; emi_273_t_0_0 = emi_273_t_0_0 + 32'sd1) begin
            emi_273_reg[emi_273_t_0_0] <= emi_273_reg_next[emi_273_t_0_0];
          end
        end
      end
    end

  assign emi_273_out1 = emi_273_reg[1];
  assign emi_273_reg_next[0] = cfblk132_out1;
  assign emi_273_reg_next[1] = emi_273_reg[0];



  assign y1_28 = 1'b1;



  cfblk79 u_cfblk79 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_267(cfblk132_out1),  // uint8
                     .Action_Port(y1_28),
                     .emi_268(cfblk79_out1)  // uint8
                     );

  cfblk91 u_cfblk91 (.u(cfblk79_out1),  // uint8
                     .y(cfblk91_out1)  // uint8
                     );

  assign cfblk126_out1 = cfblk91_out1 + cfblk33_out1;



  assign cfblk16_out1 = cfblk19_out1 + cfblk126_out1;



  cfblk78 u_cfblk78 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_131(cfblk16_out1),  // uint8
                     .Action_Port(y1_27),
                     .emi_132(cfblk78_out1)  // uint8
                     );

  DotProduct_block u_cfblk139_inst (.in1(cfblk78_out1),  // uint8
                                    .in2(cfblk184_out1),  // uint8
                                    .out1(cfblk139_out1)  // uint8
                                    );

  cfblk28_block u_cfblk28 (.clk(clk),
                           .reset(reset),
                           .enb(clk_enable),
                           .emi_195(cfblk139_out1),  // uint8
                           .Action_Port(y1_25),
                           .emi_196(cfblk28_out1)  // uint8
                           );

  always @(posedge clk or posedge reset)
    begin : cfblk159_process
      if (reset == 1'b1) begin
        for(cfblk159_t_1 = 32'sd0; cfblk159_t_1 <= 32'sd1; cfblk159_t_1 = cfblk159_t_1 + 32'sd1) begin
          cfblk159_reg[cfblk159_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk159_t_0_0 = 32'sd0; cfblk159_t_0_0 <= 32'sd1; cfblk159_t_0_0 = cfblk159_t_0_0 + 32'sd1) begin
            cfblk159_reg[cfblk159_t_0_0] <= cfblk159_reg_next[cfblk159_t_0_0];
          end
        end
      end
    end

  assign cfblk159_out1 = cfblk159_reg[1];
  assign cfblk159_reg_next[0] = cfblk28_out1;
  assign cfblk159_reg_next[1] = cfblk159_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk169_process
      if (reset == 1'b1) begin
        for(cfblk169_t_1 = 32'sd0; cfblk169_t_1 <= 32'sd1; cfblk169_t_1 = cfblk169_t_1 + 32'sd1) begin
          cfblk169_reg[cfblk169_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk169_t_0_0 = 32'sd0; cfblk169_t_0_0 <= 32'sd1; cfblk169_t_0_0 = cfblk169_t_0_0 + 32'sd1) begin
            cfblk169_reg[cfblk169_t_0_0] <= cfblk169_reg_next[cfblk169_t_0_0];
          end
        end
      end
    end

  assign cfblk169_out1 = cfblk169_reg[1];
  assign cfblk169_reg_next[0] = cfblk121_out2;
  assign cfblk169_reg_next[1] = cfblk169_reg[0];



  always @(posedge clk or posedge reset)
    begin : emi_249_process
      if (reset == 1'b1) begin
        for(emi_249_t_1 = 32'sd0; emi_249_t_1 <= 32'sd1; emi_249_t_1 = emi_249_t_1 + 32'sd1) begin
          emi_249_reg[emi_249_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_249_t_0_0 = 32'sd0; emi_249_t_0_0 <= 32'sd1; emi_249_t_0_0 = emi_249_t_0_0 + 32'sd1) begin
            emi_249_reg[emi_249_t_0_0] <= emi_249_reg_next[emi_249_t_0_0];
          end
        end
      end
    end

  assign emi_249_out1 = emi_249_reg[1];
  assign emi_249_reg_next[0] = cfblk188_out1;
  assign emi_249_reg_next[1] = emi_249_reg[0];



  assign y1_29 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_185_process
      if (reset == 1'b1) begin
        for(emi_185_t_1 = 32'sd0; emi_185_t_1 <= 32'sd1; emi_185_t_1 = emi_185_t_1 + 32'sd1) begin
          emi_185_reg[emi_185_t_1] <= 16'b0000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_185_t_0_0 = 32'sd0; emi_185_t_0_0 <= 32'sd1; emi_185_t_0_0 = emi_185_t_0_0 + 32'sd1) begin
            emi_185_reg[emi_185_t_0_0] <= emi_185_reg_next[emi_185_t_0_0];
          end
        end
      end
    end

  assign emi_185_out1 = emi_185_reg[1];
  assign emi_185_reg_next[0] = cfblk31_out1;
  assign emi_185_reg_next[1] = emi_185_reg[0];



  assign emi_184_out1 = emi_185_out1[14:7];



  assign y1_30 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_233_process
      if (reset == 1'b1) begin
        for(emi_233_t_1 = 32'sd0; emi_233_t_1 <= 32'sd1; emi_233_t_1 = emi_233_t_1 + 32'sd1) begin
          emi_233_reg[emi_233_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_233_t_0_0 = 32'sd0; emi_233_t_0_0 <= 32'sd1; emi_233_t_0_0 = emi_233_t_0_0 + 32'sd1) begin
            emi_233_reg[emi_233_t_0_0] <= emi_233_reg_next[emi_233_t_0_0];
          end
        end
      end
    end

  assign emi_233_out1 = emi_233_reg[1];
  assign emi_233_reg_next[0] = cfblk82_out1;
  assign emi_233_reg_next[1] = emi_233_reg[0];



  assign y1_31 = 1'b1;



  assign cfblk117_out1 = cfblk75_out1 + cfblk117_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        for(cfblk171_t_1 = 32'sd0; cfblk171_t_1 <= 32'sd1; cfblk171_t_1 = cfblk171_t_1 + 32'sd1) begin
          cfblk171_reg[cfblk171_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk171_t_0_0 = 32'sd0; cfblk171_t_0_0 <= 32'sd1; cfblk171_t_0_0 = cfblk171_t_0_0 + 32'sd1) begin
            cfblk171_reg[cfblk171_t_0_0] <= cfblk171_reg_next[cfblk171_t_0_0];
          end
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk117_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  assign cfblk82_out1 = cfblk1_out1 + cfblk171_out1;



  cfblk31 u_cfblk31 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_227(cfblk82_out1),  // uint8
                     .Action_Port(y1_31),
                     .emi_228(cfblk31_out1)  // ufix16_En7
                     );

  cfblk188 u_cfblk188 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_179(cfblk31_out1),  // ufix16_En7
                       .Action_Port(y1_30),
                       .emi_180(cfblk188_out1)  // uint8
                       );

  cfblk71 u_cfblk71 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_243(cfblk188_out1),  // uint8
                     .Action_Port(y1_29),
                     .emi_244(cfblk71_out1)  // uint8
                     );

  DotProduct_block3 u_cfblk47_inst (.in1(cfblk71_out1),  // uint8
                                    .in2(cfblk169_out1),  // uint8
                                    .out1(cfblk47_out1)  // uint8
                                    );

  assign cfblk43_out1 = cfblk47_out1 + cfblk159_out1;



  assign dtc_out_6 = cfblk43_out1;



  assign cfblk59_out1 = dtc_out_6;



  assign cfblk58_out1 = cfblk19_out1 - cfblk105_out1;



  cfblk32 u_cfblk32 (.u(cfblk58_out1),  // uint8
                     .y(cfblk32_out1)  // uint8
                     );

  assign cfblk5_out1 = cfblk32_out1 - cfblk59_out1;



  assign dtc_out_7 = cfblk5_out1;



  assign cfblk46_out1 = dtc_out_7;



  assign dtc_out_8 = cfblk46_out1;



  assign cfblk62_out1 = dtc_out_8;



  assign cfblk74_out1 = cfblk62_out1 - cfblk73_out1;



  assign cfblk4_out1 = cfblk74_out1 - cfblk172_out1;



  always @(posedge clk or posedge reset)
    begin : emi_64_process
      if (reset == 1'b1) begin
        for(emi_64_t_1 = 32'sd0; emi_64_t_1 <= 32'sd1; emi_64_t_1 = emi_64_t_1 + 32'sd1) begin
          emi_64_reg[emi_64_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_64_t_0_0 = 32'sd0; emi_64_t_0_0 <= 32'sd1; emi_64_t_0_0 = emi_64_t_0_0 + 32'sd1) begin
            emi_64_reg[emi_64_t_0_0] <= emi_64_reg_next[emi_64_t_0_0];
          end
        end
      end
    end

  assign emi_64_out1 = emi_64_reg[1];
  assign emi_64_reg_next[0] = cfblk121_out1;
  assign emi_64_reg_next[1] = emi_64_reg[0];



  assign y1_32 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_89_process
      if (reset == 1'b1) begin
        for(emi_89_t_1 = 32'sd0; emi_89_t_1 <= 32'sd1; emi_89_t_1 = emi_89_t_1 + 32'sd1) begin
          emi_89_reg[emi_89_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_89_t_0_0 = 32'sd0; emi_89_t_0_0 <= 32'sd1; emi_89_t_0_0 = emi_89_t_0_0 + 32'sd1) begin
            emi_89_reg[emi_89_t_0_0] <= emi_89_reg_next[emi_89_t_0_0];
          end
        end
      end
    end

  assign emi_89_out1 = emi_89_reg[1];
  assign emi_89_reg_next[0] = cfblk192_out1;
  assign emi_89_reg_next[1] = emi_89_reg[0];



  assign y1_33 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_193_process
      if (reset == 1'b1) begin
        for(emi_193_t_1 = 32'sd0; emi_193_t_1 <= 32'sd1; emi_193_t_1 = emi_193_t_1 + 32'sd1) begin
          emi_193_reg[emi_193_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_193_t_0_0 = 32'sd0; emi_193_t_0_0 <= 32'sd1; emi_193_t_0_0 = emi_193_t_0_0 + 32'sd1) begin
            emi_193_reg[emi_193_t_0_0] <= emi_193_reg_next[emi_193_t_0_0];
          end
        end
      end
    end

  assign emi_193_out1 = emi_193_reg[1];
  assign emi_193_reg_next[0] = cfblk30_out1;
  assign emi_193_reg_next[1] = emi_193_reg[0];



  assign y1_34 = 1'b1;



  assign cfblk30_out1 = cfblk109_out2 + cfblk30_const_val_1;



  cfblk192 u_cfblk192 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_187(cfblk30_out1),  // uint8
                       .Action_Port(y1_34),
                       .emi_188(cfblk192_out1)  // uint8
                       );

  cfblk121 u_cfblk121 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_82(cfblk192_out1),  // uint8
                       .Action_Port(y1_33),
                       .emi_83(cfblk121_out1),  // uint8
                       .emi_84(cfblk121_out2)  // uint8
                       );

  cfblk168 u_cfblk168 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_58(cfblk121_out1),  // uint8
                       .Action_Port(y1_32),
                       .emi_59(cfblk168_out1)  // uint8
                       );

  always @(cfblk168_out1, cfblk4_out1) begin
    cfblk122_div_temp = 9'b000000000;
    cfblk122_t_0_0 = 9'b000000000;
    if (cfblk4_out1 == 8'b00000000) begin
      cfblk122_out1 = 8'b11111111;
    end
    else begin
      cfblk122_t_0_0 = {1'b0, cfblk168_out1};
      cfblk122_div_temp = cfblk122_t_0_0 / cfblk4_out1;
      if (cfblk122_div_temp[8] != 1'b0) begin
        cfblk122_out1 = 8'b11111111;
      end
      else begin
        cfblk122_out1 = cfblk122_div_temp[7:0];
      end
    end
  end



  assign cfblk123_out1 = (cfblk122_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk18_out1 = cfblk123_out1;
  assign cfblk18_out2 = 8'b00000000;



  cfblk134 u_cfblk134 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_235(cfblk18_out1),  // uint8
                       .Action_Port(y1_24),
                       .emi_236(cfblk134_out1)  // uint8
                       );

  cfblk125 u_cfblk125 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_91(cfblk134_out1),  // uint8
                       .Action_Port(y1_23),
                       .emi_92(cfblk125_out1)  // uint8
                       );

  assign cfblk135_out1 = (cfblk50_out2 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk19_out1 = cfblk135_out1 + cfblk19_const_val_1;



  assign cfblk39_out1 = (cfblk19_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  DotProduct_block6 u_cfblk75_inst (.in1(cfblk39_out1),  // uint8
                                    .in2(cfblk125_out1),  // uint8
                                    .out1(cfblk75_out1)  // uint8
                                    );

  cfblk137 u_cfblk137 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_107(cfblk75_out1),  // uint8
                       .Action_Port(y1_22),
                       .emi_108(cfblk137_out1)  // uint8
                       );

  assign cfblk132_out1 = cfblk137_out1 + cfblk141_out1;



  cfblk109 u_cfblk109 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_33(cfblk132_out1),  // uint8
                       .Action_Port(y1_19),
                       .emi_34(cfblk109_out1),  // uint8
                       .emi_35(cfblk109_out2)  // uint8
                       );

  assign cfblk14_out1 = cfblk109_out2 - cfblk144_out1;



  cfblk116 u_cfblk116 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_66(cfblk14_out1),  // uint8
                       .Action_Port(y1_17),
                       .emi_67(cfblk116_out1)  // uint8
                       );

  assign cfblk33_out1 = cfblk116_out1 + cfblk33_const_val_1;



  assign cfblk98_out1 = (cfblk27_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk161_process
      if (reset == 1'b1) begin
        for(cfblk161_t_1 = 32'sd0; cfblk161_t_1 <= 32'sd1; cfblk161_t_1 = cfblk161_t_1 + 32'sd1) begin
          cfblk161_reg[cfblk161_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk161_t_0_0 = 32'sd0; cfblk161_t_0_0 <= 32'sd1; cfblk161_t_0_0 = cfblk161_t_0_0 + 32'sd1) begin
            cfblk161_reg[cfblk161_t_0_0] <= cfblk161_reg_next[cfblk161_t_0_0];
          end
        end
      end
    end

  assign cfblk161_out1 = cfblk161_reg[1];
  assign cfblk161_reg_next[0] = cfblk94_out1;
  assign cfblk161_reg_next[1] = cfblk161_reg[0];



  always @(cfblk161_out1, cfblk98_out1) begin
    cfblk88_div_temp = 9'b000000000;
    cfblk88_t_0_0 = 9'b000000000;
    if (cfblk98_out1 == 8'b00000000) begin
      cfblk88_out1 = 8'b11111111;
    end
    else begin
      cfblk88_t_0_0 = {1'b0, cfblk161_out1};
      cfblk88_div_temp = cfblk88_t_0_0 / cfblk98_out1;
      if (cfblk88_div_temp[8] != 1'b0) begin
        cfblk88_out1 = 8'b11111111;
      end
      else begin
        cfblk88_out1 = cfblk88_div_temp[7:0];
      end
    end
  end



  cfblk157 u_cfblk157 (.In1(cfblk88_out1),  // uint8
                       .Out1(cfblk157_out1)  // uint8
                       );

  cfblk84 u_cfblk84 (.u(cfblk157_out1),  // uint8
                     .y(cfblk84_out1)  // uint8
                     );

  cfblk124 u_cfblk124 (.u(cfblk84_out1),  // uint8
                       .y(cfblk124_out1)  // uint8
                       );

  assign cfblk70_out1 = cfblk124_out1 + cfblk48_out1;



  DotProduct_block8 u_cfblk94_inst (.in1(cfblk70_out1),  // uint8
                                    .in2(cfblk33_out1),  // uint8
                                    .out1(cfblk94_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : emi_23_process
      if (reset == 1'b1) begin
        for(emi_23_t_1 = 32'sd0; emi_23_t_1 <= 32'sd1; emi_23_t_1 = emi_23_t_1 + 32'sd1) begin
          emi_23_reg[emi_23_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_23_t_0_0 = 32'sd0; emi_23_t_0_0 <= 32'sd1; emi_23_t_0_0 = emi_23_t_0_0 + 32'sd1) begin
            emi_23_reg[emi_23_t_0_0] <= emi_23_reg_next[emi_23_t_0_0];
          end
        end
      end
    end

  assign emi_23_out1 = emi_23_reg[1];
  assign emi_23_reg_next[0] = cfblk115_out1;
  assign emi_23_reg_next[1] = emi_23_reg[0];



  assign y1_35 = 1'b1;



  cfblk105 u_cfblk105 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_17(cfblk115_out1),  // uint8
                       .Action_Port(y1_35),
                       .emi_18(cfblk105_out1)  // uint8
                       );

  assign cfblk114_out1 = cfblk105_out1 + cfblk94_out1;



  cfblk21 u_cfblk21 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_171(cfblk114_out1),  // uint8
                     .Action_Port(y1_16),
                     .emi_172(cfblk21_out1)  // uint8
                     );

  DotProduct u_cfblk130_inst (.in1(cfblk21_out1),  // uint8
                              .in2(cfblk134_out1),  // uint8
                              .out1(cfblk130_out1)  // uint8
                              );

  always @(posedge clk or posedge reset)
    begin : cfblk162_process
      if (reset == 1'b1) begin
        for(cfblk162_t_1 = 32'sd0; cfblk162_t_1 <= 32'sd1; cfblk162_t_1 = cfblk162_t_1 + 32'sd1) begin
          cfblk162_reg[cfblk162_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk162_t_0_0 = 32'sd0; cfblk162_t_0_0 <= 32'sd1; cfblk162_t_0_0 = cfblk162_t_0_0 + 32'sd1) begin
            cfblk162_reg[cfblk162_t_0_0] <= cfblk162_reg_next[cfblk162_t_0_0];
          end
        end
      end
    end

  assign cfblk162_out1 = cfblk162_reg[1];
  assign cfblk162_reg_next[0] = cfblk130_out1;
  assign cfblk162_reg_next[1] = cfblk162_reg[0];



  assign cfblk27_out1 = cfblk162_out1 + cfblk22_out1;



  cfblk110 u_cfblk110 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_50(cfblk27_out1),  // uint8
                       .Action_Port(y1_13),
                       .emi_51(cfblk110_out1)  // ufix16_En7
                       );

  always @(posedge clk or posedge reset)
    begin : emi_290_process
      if (reset == 1'b1) begin
        for(emi_290_t_1 = 32'sd0; emi_290_t_1 <= 32'sd1; emi_290_t_1 = emi_290_t_1 + 32'sd1) begin
          emi_290_reg[emi_290_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_290_t_0_0 = 32'sd0; emi_290_t_0_0 <= 32'sd1; emi_290_t_0_0 = emi_290_t_0_0 + 32'sd1) begin
            emi_290_reg[emi_290_t_0_0] <= emi_290_reg_next[emi_290_t_0_0];
          end
        end
      end
    end

  assign emi_290_out1 = emi_290_reg[1];
  assign emi_290_reg_next[0] = cfblk23_out1;
  assign emi_290_reg_next[1] = emi_290_reg[0];



  assign y1_36 = 1'b1;



  cfblk81 u_cfblk81 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_284(cfblk23_out1),  // uint8
                     .Action_Port(y1_36),
                     .emi_285(cfblk81_out1)  // uint8
                     );

  always @(posedge clk or posedge reset)
    begin : cfblk176_process
      if (reset == 1'b1) begin
        for(cfblk176_t_1 = 32'sd0; cfblk176_t_1 <= 32'sd1; cfblk176_t_1 = cfblk176_t_1 + 32'sd1) begin
          cfblk176_reg[cfblk176_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk176_t_0_0 = 32'sd0; cfblk176_t_0_0 <= 32'sd1; cfblk176_t_0_0 = cfblk176_t_0_0 + 32'sd1) begin
            cfblk176_reg[cfblk176_t_0_0] <= cfblk176_reg_next[cfblk176_t_0_0];
          end
        end
      end
    end

  assign cfblk176_out1 = cfblk176_reg[1];
  assign cfblk176_reg_next[0] = cfblk81_out1;
  assign cfblk176_reg_next[1] = cfblk176_reg[0];



  assign cfblk40_sub_cast = {17'b0, {cfblk176_out1, 7'b0000000}};
  assign cfblk40_sub_cast_1 = {16'b0, cfblk110_out1};
  assign cfblk40_sub_temp = cfblk40_sub_cast - cfblk40_sub_cast_1;
  assign cfblk40_out1 = cfblk40_sub_temp[14:7];



  cfblk77_block u_cfblk77 (.clk(clk),
                           .reset(reset),
                           .enb(clk_enable),
                           .emi_259(cfblk40_out1),  // uint8
                           .Action_Port(y1_12),
                           .emi_260(cfblk77_out1)  // uint8
                           );

  assign dtc_out_9 = cfblk77_out1;



  assign cfblk10_out1 = dtc_out_9;



  cfblk15 u_cfblk15 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_123(cfblk10_out1),  // uint8
                     .Action_Port(y1_11),
                     .emi_124(cfblk15_out1)  // uint8
                     );

  assign cfblk23_out1 = (cfblk15_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk142_out1 = cfblk23_out1 + cfblk88_out1;



  assign cfblk92_out1 = (cfblk142_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk87_out1 = cfblk92_out1 - cfblk20_out1;



  cfblk153 u_cfblk153 (.In1(cfblk87_out1),  // uint8
                       .Out1(cfblk153_out1)  // uint8
                       );

  assign cfblk51_out1 = cfblk153_out1 + cfblk143_out1;



  always @(cfblk165_out1, cfblk51_out1) begin
    cfblk99_div_temp = 9'b000000000;
    cfblk99_t_0_0 = 9'b000000000;
    if (cfblk165_out1 == 8'b00000000) begin
      cfblk99_out1 = 8'b11111111;
    end
    else begin
      cfblk99_t_0_0 = {1'b0, cfblk51_out1};
      cfblk99_div_temp = cfblk99_t_0_0 / cfblk165_out1;
      if (cfblk99_div_temp[8] != 1'b0) begin
        cfblk99_out1 = 8'b11111111;
      end
      else begin
        cfblk99_out1 = cfblk99_div_temp[7:0];
      end
    end
  end



  assign dtc_out_10 = cfblk99_out1;



  assign cfblk90_out1 = dtc_out_10;



  assign cfblk45_out1 = (cfblk90_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk48 u_cfblk48 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_139(cfblk45_out1),  // uint8
                     .Action_Port(y1_9),
                     .emi_140(cfblk48_out1)  // uint8
                     );

  cfblk145 u_cfblk145 (.u(cfblk48_out1),  // uint8
                       .y(cfblk145_out1)  // uint8
                       );

  cfblk108 u_cfblk108 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_25(cfblk145_out1),  // uint8
                       .Action_Port(y1_8),
                       .emi_26(cfblk108_out1)  // uint8
                       );

  cfblk3_block u_cfblk3 (.clk(clk),
                         .reset(reset),
                         .enb(clk_enable),
                         .emi_219(cfblk108_out1),  // uint8
                         .Action_Port(y1_7),
                         .emi_220(cfblk3_out1)  // uint8
                         );

  cfblk119_block u_cfblk119 (.clk(clk),
                             .reset(reset),
                             .enb(clk_enable),
                             .emi_74(cfblk3_out1),  // uint8
                             .Action_Port(y1_6),
                             .emi_75(cfblk119_out1)  // uint8
                             );

  always @(posedge clk or posedge reset)
    begin : cfblk164_process
      if (reset == 1'b1) begin
        for(cfblk164_t_1 = 32'sd0; cfblk164_t_1 <= 32'sd1; cfblk164_t_1 = cfblk164_t_1 + 32'sd1) begin
          cfblk164_reg[cfblk164_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk164_t_0_0 = 32'sd0; cfblk164_t_0_0 <= 32'sd1; cfblk164_t_0_0 = cfblk164_t_0_0 + 32'sd1) begin
            cfblk164_reg[cfblk164_t_0_0] <= cfblk164_reg_next[cfblk164_t_0_0];
          end
        end
      end
    end

  assign cfblk164_out1 = cfblk164_reg[1];
  assign cfblk164_reg_next[0] = cfblk119_out1;
  assign cfblk164_reg_next[1] = cfblk164_reg[0];



  assign cfblk115_out1 = cfblk164_out1 + cfblk103_out1;



  assign cfblk41_out1 = cfblk115_out1;
  assign cfblk41_out2 = 8'b00000000;



  assign cfblk36_out1 = cfblk41_out2 + cfblk101_out2;



  cfblk185 u_cfblk185 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_99(cfblk36_out1),  // uint8
                       .Action_Port(y1_4),
                       .emi_100(cfblk185_out1)  // uint8
                       );

  cfblk97 u_cfblk97 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_300(cfblk185_out1),  // uint8
                     .Action_Port(y1_3),
                     .emi_301(cfblk97_out1)  // uint8
                     );

  assign cfblk50_out1 = cfblk97_out1;
  assign cfblk50_out2 = 8'b00000000;



  assign cfblk85_out1 = cfblk50_out1 + cfblk85_const_val_1;



  DotProduct_block2 u_cfblk25_inst (.in1(cfblk85_out1),  // uint8
                                    .in2(cfblk2_out1),  // uint8
                                    .out1(cfblk25_out1)  // uint8
                                    );

  DotProduct_block7 u_cfblk8_inst (.in1(cfblk25_out1),  // uint8
                                   .in2(cfblk170_out1),  // uint8
                                   .out1(cfblk8_out1)  // uint8
                                   );

  always @(posedge clk or posedge reset)
    begin : cfblk167_process
      if (reset == 1'b1) begin
        for(cfblk167_t_1 = 32'sd0; cfblk167_t_1 <= 32'sd1; cfblk167_t_1 = cfblk167_t_1 + 32'sd1) begin
          cfblk167_reg[cfblk167_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk167_t_0_0 = 32'sd0; cfblk167_t_0_0 <= 32'sd1; cfblk167_t_0_0 = cfblk167_t_0_0 + 32'sd1) begin
            cfblk167_reg[cfblk167_t_0_0] <= cfblk167_reg_next[cfblk167_t_0_0];
          end
        end
      end
    end

  assign cfblk167_out1 = cfblk167_reg[1];
  assign cfblk167_reg_next[0] = cfblk8_out1;
  assign cfblk167_reg_next[1] = cfblk167_reg[0];



  cfblk1_block u_cfblk1 (.clk(clk),
                         .reset(reset),
                         .enb(clk_enable),
                         .emi_1(cfblk167_out1),  // uint8
                         .Action_Port(y1),
                         .emi_2(cfblk1_out1)  // uint8
                         );

  assign Hdl_out = cfblk1_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem_1

