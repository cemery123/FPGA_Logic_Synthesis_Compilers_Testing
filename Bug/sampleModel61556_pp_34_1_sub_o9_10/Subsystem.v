// -------------------------------------------------------------
// 
// File Name: E:\zgl\gen_10\slemi\emi_results\2024-05-23-02-20-21\SampleModel61556\Verilog_hdlsrc\sampleModel61556_pp_34_1_sub\Subsystem.v
// Created: 2024-05-23 02:55:47
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// cfblk169                      ce_out        1
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel61556_pp_34_1_sub/Subsystem
// Hierarchy Level: 0
// Model version: 1.1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns
`include "cfblk153_block.v"
`include "cfblk78.v"
`include "cfblk65.v"
`include "cfblk21.v"
`include "cfblk9.v"
`include "cfblk125.v"
`include "cfblk111_block.v"
`include "cfblk175.v"
`include "cfblk111.v"
`include "cfblk36.v"
`include "DotProduct_block.v"
`include "cfblk2.v"
`include "cfblk86.v"
`include "cfblk8.v"
`include "cfblk103.v"
`include "cfblk16.v"
`include "cfblk211.v"
`include "cfblk96.v"
`include "cfblk133.v"
`include "cfblk12.v"
`include "cfblk178.v"
`include "cfblk4.v"
`include "DotProduct_block2.v"
`include "cfblk3.v"
`include "cfblk176.v"
`include "cfblk129.v"
`include "cfblk49.v"
`include "DotProduct_block1.v"
`include "cfblk157.v"
`include "Positive.v"
`include "cfblk37.v"
`include "cfblk177.v"
`include "cfblk38.v"
`include "cfblk139.v"
`include "cfblk127.v"
`include "cfblk118.v"
`include "cfblk91.v"
`include "DotProduct.v"
`include "cfblk35.v"
`include "cfblk4_block.v"
`include "cfblk119.v"
`include "cfblk66.v"
`include "cfblk10.v"
`include "cfblk173.v"
`include "cfblk54.v"
`include "cfblk191.v"
`include "cfblk83.v"
`include "cfblk179.v"
`include "Nonnegative.v"
`include "cfblk153.v"
`include "cfblk67.v"
`include "cfblk212.v"
`include "cfblk110.v"
`include "cfblk144.v"


module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           cfblk169,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] cfblk169;  // uint8
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  real cfblk61_const_val_1;  // double
  wire [7:0] cfblk122_out1;  // uint8
  wire [7:0] cfblk6_const_val_1;  // uint8
  wire [7:0] cfblk60_const_val_1;  // uint8
  wire [7:0] cfblk132_const_val_1;  // uint8
  wire [7:0] cfblk41_const_val_1;  // uint8
  wire [7:0] cfblk75_const_val_1;  // uint8
  wire [7:0] cfblk172_out1;  // uint8
  wire [7:0] cfblk161_const_val_1;  // uint8
  wire [7:0] cfblk44_const_val_1;  // uint8
  wire [7:0] cfblk163_const_val_1;  // uint8
  wire [7:0] cfblk124_const_val_1;  // uint8
  reg [7:0] cfblk5_out1;  // uint8
  reg [7:0] emi_129_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_129_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_129_out1;  // uint8
  wire y1;
  wire [7:0] cfblk88_out1;  // uint8
  reg [7:0] emi_258_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_258_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_258_out1;  // uint8
  wire y1_1;
  wire [7:0] cfblk78_out1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  reg [7:0] emi_267_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_267_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_267_out1;  // uint8
  wire y1_2;
  wire [7:0] cfblk84_out1;  // uint8
  reg [7:0] emi_185_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_185_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_185_out1;  // uint8
  wire y1_3;
  wire [7:0] cfblk19_out1;  // uint8
  reg [7:0] emi_145_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_145_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_145_out1;  // uint8
  wire y1_4;
  wire [7:0] cfblk21_out1;  // uint8
  wire [7:0] cfblk176_out1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  wire [7:0] cfblk12_out1;  // uint8
  wire [7:0] cfblk134_out1;  // uint8
  wire [7:0] cfblk26_out1;  // uint8
  wire [7:0] cfblk75_out1;  // uint8
  reg [7:0] emi_177_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_177_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_177_out1;  // uint8
  wire y1_5;
  wire [7:0] cfblk65_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk30_out1;  // uint8
  reg [7:0] emi_23_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_23_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_23_out1;  // uint8
  wire y1_6;
  wire [7:0] cfblk150_out1;  // uint8
  reg [7:0] emi_250_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_250_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_250_out1;  // uint8
  wire y1_7;
  wire [7:0] cfblk103_out1;  // uint8
  wire [7:0] cfblk35_out1;  // uint8
  reg [7:0] cfblk15_out1;  // uint8
  reg [7:0] cfblk187_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk187_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk187_out1;  // uint8
  wire [7:0] cfblk154_out1;  // uint8
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] cfblk157_out1;  // uint8
  reg [7:0] emi_283_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_283_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_283_out1;  // uint8
  wire y1_8;
  wire [7:0] cfblk127_out1;  // uint8
  reg [7:0] emi_39_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_39_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_39_out1;  // uint8
  wire y1_9;
  wire [7:0] cfblk46_out1;  // uint8
  reg [7:0] emi_88_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_88_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_88_out1;  // uint8
  wire y1_10;
  wire [7:0] cfblk173_out1;  // uint8
  wire [7:0] cfblk178_out1;  // uint8
  wire [7:0] cfblk111_out1;  // uint8
  wire [7:0] cfblk67_out1;  // uint8
  wire [7:0] cfblk110_out1;  // uint8
  wire [7:0] cfblk86_out1;  // uint8
  wire [7:0] cfblk116_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  wire [7:0] cfblk119_out1;  // uint8
  wire [7:0] cfblk158_out1;  // uint8
  wire [7:0] cfblk20_out1;  // uint8
  wire [7:0] cfblk177_out1;  // uint8
  wire [7:0] cfblk70_out1;  // uint8
  reg [7:0] cfblk188_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk188_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk188_out1;  // uint8
  wire [7:0] cfblk59_out1;  // uint8
  wire [7:0] cfblk161_out1;  // uint8
  reg [7:0] emi_64_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_64_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_64_out1;  // uint8
  wire y1_11;
  wire [7:0] cfblk212_out1;  // uint8
  reg [7:0] emi_161_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_161_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_161_out1;  // uint8
  wire y1_12;
  wire [7:0] cfblk132_out1;  // uint8
  reg [7:0] emi_234_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_234_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_234_out1;  // uint8
  wire y1_13;
  wire [7:0] cfblk125_out1;  // uint8
  reg [7:0] emi_201_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_201_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_201_out1;  // uint8
  wire y1_14;
  wire [7:0] cfblk129_out1;  // uint8
  reg [7:0] emi_80_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_80_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_80_out1;  // uint8
  wire y1_15;
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk105_out1;  // uint8
  wire [7:0] cfblk49_out2;  // uint8
  reg [7:0] emi_47_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_47_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_47_out1;  // uint8
  wire y1_16;
  wire [7:0] cfblk118_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk71_out1;  // uint8
  reg [7:0] cfblk192_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk192_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk192_out1;  // uint8
  wire [7:0] cfblk82_out1;  // uint8
  reg [7:0] emi_7_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_7_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_7_out1;  // uint8
  wire y1_17;
  wire [7:0] cfblk10_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  reg [7:0] cfblk195_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk195_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk195_out1;  // uint8
  wire [7:0] cfblk150_out2;  // uint8
  reg [7:0] cfblk203_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk203_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk203_out1;  // uint8
  wire [7:0] cfblk6_out1;  // uint8
  reg [7:0] emi_97_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_97_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_97_out1;  // uint8
  wire y1_18;
  wire [7:0] cfblk129_out2;  // uint8
  wire [7:0] cfblk14_out1;  // uint8
  wire [7:0] cfblk14_out2;  // uint8
  wire [7:0] cfblk175_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  wire [7:0] cfblk133_out1;  // uint8
  reg [7:0] emi_299_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_299_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_299_out1;  // uint8
  wire y1_19;
  wire [7:0] cfblk9_out1;  // uint8
  reg [7:0] cfblk189_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk189_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk189_out1;  // uint8
  wire [7:0] cfblk128_out1;  // uint8
  wire [7:0] cfblk121_out1;  // uint8
  wire [7:0] cfblk104_out1;  // uint8
  reg [7:0] emi_113_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_113_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_113_out1;  // uint8
  wire y1_20;
  reg [7:0] cfblk162_out1;  // uint8
  reg [7:0] emi_105_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_105_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_105_out1;  // uint8
  wire y1_21;
  wire [7:0] cfblk13_out1;  // uint8
  reg [7:0] emi_226_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_226_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_226_out1;  // uint8
  wire y1_22;
  wire [7:0] cfblk140_out1;  // uint8
  reg [7:0] emi_169_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_169_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_169_out1;  // uint8
  wire y1_23;
  wire [7:0] cfblk3_out1;  // uint8
  wire [7:0] cfblk60_out1;  // uint8
  reg [7:0] emi_307_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_307_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_307_out1;  // uint8
  wire y1_24;
  reg [7:0] emi_56_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_56_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_56_out1;  // uint8
  wire y1_25;
  wire [7:0] cfblk119_out2;  // uint8
  reg [7:0] emi_31_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_31_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_31_out1;  // uint8
  wire y1_26;
  reg [7:0] emi_153_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_153_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_153_out1;  // uint8
  wire y1_27;
  wire [7:0] cfblk106_out1;  // uint8
  reg [7:0] emi_121_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_121_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_121_out1;  // uint8
  wire y1_28;
  wire [7:0] cfblk62_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk191_out1;  // uint8
  wire [7:0] cfblk8_out1;  // uint8
  wire [7:0] cfblk139_out1;  // uint8
  wire [7:0] cfblk138_out1;  // uint8
  wire [7:0] cfblk141_out1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  wire [7:0] cfblk91_out1;  // uint8
  wire [7:0] cfblk49_out1;  // uint8
  reg [7:0] cfblk190_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk190_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk190_out1;  // uint8
  wire [7:0] cfblk115_out1;  // uint8
  wire [7:0] cfblk179_out1;  // uint8
  wire [7:0] cfblk144_out1;  // uint8
  wire [7:0] cfblk55_out1;  // uint8
  reg [7:0] cfblk186_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk186_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk186_out1;  // uint8
  reg [7:0] cfblk109_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  wire [7:0] cfblk211_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk97_out1;  // uint8
  reg [7:0] cfblk204_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk204_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk204_out1;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  reg [7:0] cfblk201_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk201_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk201_out1;  // uint8
  reg [7:0] cfblk146_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  reg [7:0] cfblk200_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk200_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk200_out1;  // uint8
  wire [7:0] cfblk124_out1;  // uint8
  reg [7:0] emi_315_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_315_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_315_out1;  // uint8
  wire y1_29;
  wire [7:0] cfblk96_out1;  // uint8
  wire [7:0] cfblk8_out2;  // uint8
  wire [7:0] cfblk72_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  wire [7:0] cfblk163_out1;  // uint8
  reg [7:0] cfblk42_out1;  // uint8
  reg [7:0] cfblk196_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk196_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk196_out1;  // uint8
  wire [7:0] cfblk153_out1;  // uint8
  reg [7:0] cfblk193_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk193_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk193_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk53_out1;  // uint8
  wire [7:0] cfblk107_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  wire [7:0] cfblk39_out2;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  wire [7:0] cfblk57_out1;  // uint8
  reg [7:0] cfblk145_out1;  // uint8
  reg [7:0] emi_275_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_275_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_275_out1;  // uint8
  wire y1_30;
  wire [7:0] cfblk83_out1;  // uint8
  reg [7:0] emi_193_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_193_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_193_out1;  // uint8
  wire y1_31;
  wire [7:0] cfblk37_out1;  // uint8
  reg [7:0] emi_242_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_242_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_242_out1;  // uint8
  wire y1_32;
  wire [7:0] cfblk54_out1;  // uint8
  wire [7:0] cfblk50_out1;  // uint8
  wire [7:0] cfblk90_out1;  // uint8
  reg signed [31:0] emi_129_t_0_0;  // int32
  reg signed [31:0] emi_129_t_1;  // int32
  reg signed [31:0] emi_258_t_0_0;  // int32
  reg signed [31:0] emi_258_t_1;  // int32
  reg signed [31:0] emi_267_t_0_0;  // int32
  reg signed [31:0] emi_267_t_1;  // int32
  reg signed [31:0] emi_185_t_0_0;  // int32
  reg signed [31:0] emi_185_t_1;  // int32
  reg signed [31:0] emi_145_t_0_0;  // int32
  reg signed [31:0] emi_145_t_1;  // int32
  reg signed [31:0] emi_177_t_0_0;  // int32
  reg signed [31:0] emi_177_t_1;  // int32
  reg signed [31:0] emi_23_t_0_0;  // int32
  reg signed [31:0] emi_23_t_1;  // int32
  reg signed [31:0] emi_250_t_0_0;  // int32
  reg signed [31:0] emi_250_t_1;  // int32
  reg [8:0] cfblk15_div_temp;  // ufix9
  reg [8:0] cfblk15_t_0_0;  // ufix9
  reg signed [31:0] cfblk187_t_0_0;  // int32
  reg signed [31:0] cfblk187_t_1;  // int32
  reg signed [31:0] emi_283_t_0_0;  // int32
  reg signed [31:0] emi_283_t_1;  // int32
  reg signed [31:0] emi_39_t_0_0;  // int32
  reg signed [31:0] emi_39_t_1;  // int32
  reg signed [31:0] emi_88_t_0_0;  // int32
  reg signed [31:0] emi_88_t_1;  // int32
  reg signed [31:0] cfblk188_t_0_0;  // int32
  reg signed [31:0] cfblk188_t_1;  // int32
  reg signed [31:0] emi_64_t_0_0;  // int32
  reg signed [31:0] emi_64_t_1;  // int32
  reg signed [31:0] emi_161_t_0_0;  // int32
  reg signed [31:0] emi_161_t_1;  // int32
  reg signed [31:0] emi_234_t_0_0;  // int32
  reg signed [31:0] emi_234_t_1;  // int32
  reg signed [31:0] emi_201_t_0_0;  // int32
  reg signed [31:0] emi_201_t_1;  // int32
  reg signed [31:0] emi_80_t_0_0;  // int32
  reg signed [31:0] emi_80_t_1;  // int32
  reg signed [31:0] emi_47_t_0_0;  // int32
  reg signed [31:0] emi_47_t_1;  // int32
  reg signed [31:0] cfblk192_t_0_0;  // int32
  reg signed [31:0] cfblk192_t_1;  // int32
  reg signed [31:0] emi_7_t_0_0;  // int32
  reg signed [31:0] emi_7_t_1;  // int32
  reg signed [31:0] cfblk195_t_0_0;  // int32
  reg signed [31:0] cfblk195_t_1;  // int32
  reg signed [31:0] cfblk203_t_0_0;  // int32
  reg signed [31:0] cfblk203_t_1;  // int32
  reg signed [31:0] emi_97_t_0_0;  // int32
  reg signed [31:0] emi_97_t_1;  // int32
  reg signed [31:0] emi_299_t_0_0;  // int32
  reg signed [31:0] emi_299_t_1;  // int32
  reg signed [31:0] cfblk189_t_0_0;  // int32
  reg signed [31:0] cfblk189_t_1;  // int32
  reg signed [31:0] emi_113_t_0_0;  // int32
  reg signed [31:0] emi_113_t_1;  // int32
  reg signed [31:0] emi_105_t_0_0;  // int32
  reg signed [31:0] emi_105_t_1;  // int32
  reg signed [31:0] emi_226_t_0_0;  // int32
  reg signed [31:0] emi_226_t_1;  // int32
  reg signed [31:0] emi_169_t_0_0;  // int32
  reg signed [31:0] emi_169_t_1;  // int32
  reg signed [31:0] emi_307_t_0_0;  // int32
  reg signed [31:0] emi_307_t_1;  // int32
  reg signed [31:0] emi_56_t_0_0;  // int32
  reg signed [31:0] emi_56_t_1;  // int32
  reg signed [31:0] emi_31_t_0_0;  // int32
  reg signed [31:0] emi_31_t_1;  // int32
  reg signed [31:0] emi_153_t_0_0;  // int32
  reg signed [31:0] emi_153_t_1;  // int32
  reg signed [31:0] emi_121_t_0_0;  // int32
  reg signed [31:0] emi_121_t_1;  // int32
  reg signed [31:0] cfblk190_t_0_0;  // int32
  reg signed [31:0] cfblk190_t_1;  // int32
  reg [8:0] cfblk162_div_temp;  // ufix9
  reg [8:0] cfblk162_t_0_0;  // ufix9
  reg signed [31:0] cfblk186_t_0_0;  // int32
  reg signed [31:0] cfblk186_t_1;  // int32
  reg [8:0] cfblk109_div_temp;  // ufix9
  reg [8:0] cfblk109_t_0_0;  // ufix9
  reg signed [31:0] cfblk204_t_0_0;  // int32
  reg signed [31:0] cfblk204_t_1;  // int32
  reg signed [31:0] cfblk201_t_0_0;  // int32
  reg signed [31:0] cfblk201_t_1;  // int32
  reg [8:0] cfblk146_div_temp;  // ufix9
  reg [8:0] cfblk146_t_0_0;  // ufix9
  reg signed [31:0] cfblk200_t_0_0;  // int32
  reg signed [31:0] cfblk200_t_1;  // int32
  reg signed [31:0] emi_315_t_0_0;  // int32
  reg signed [31:0] emi_315_t_1;  // int32
  reg [8:0] cfblk42_div_temp;  // ufix9
  reg [8:0] cfblk42_t_0_0;  // ufix9
  reg signed [31:0] cfblk196_t_0_0;  // int32
  reg signed [31:0] cfblk196_t_1;  // int32
  reg [8:0] cfblk5_div_temp;  // ufix9
  reg [8:0] cfblk5_t_0_0;  // ufix9
  reg signed [31:0] cfblk193_t_0_0;  // int32
  reg signed [31:0] cfblk193_t_1;  // int32
  reg [8:0] cfblk145_div_temp;  // ufix9
  reg [8:0] cfblk145_t_0_0;  // ufix9
  reg signed [31:0] emi_275_t_0_0;  // int32
  reg signed [31:0] emi_275_t_1;  // int32
  reg signed [31:0] emi_193_t_0_0;  // int32
  reg signed [31:0] emi_193_t_1;  // int32
  reg signed [31:0] emi_242_t_0_0;  // int32
  reg signed [31:0] emi_242_t_1;  // int32


  assign enb = clk_enable;

  initial cfblk61_const_val_1 = 0.0;



  assign cfblk122_out1 = $rtoi(cfblk61_const_val_1);



  assign cfblk6_const_val_1 = 8'b00000000;



  assign cfblk60_const_val_1 = 8'b00000000;



  assign cfblk132_const_val_1 = 8'b00000000;



  assign cfblk41_const_val_1 = 8'b00000000;



  assign cfblk75_const_val_1 = 8'b00000000;



  assign cfblk172_out1 = 8'b00000001;



  assign cfblk161_const_val_1 = 8'b00000000;



  assign cfblk44_const_val_1 = 8'b00000000;



  assign cfblk163_const_val_1 = 8'b00000000;



  assign cfblk124_const_val_1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : emi_129_process
      if (reset == 1'b1) begin
        for(emi_129_t_1 = 32'sd0; emi_129_t_1 <= 32'sd1; emi_129_t_1 = emi_129_t_1 + 32'sd1) begin
          emi_129_reg[emi_129_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_129_t_0_0 = 32'sd0; emi_129_t_0_0 <= 32'sd1; emi_129_t_0_0 = emi_129_t_0_0 + 32'sd1) begin
            emi_129_reg[emi_129_t_0_0] <= emi_129_reg_next[emi_129_t_0_0];
          end
        end
      end
    end

  assign emi_129_out1 = emi_129_reg[1];
  assign emi_129_reg_next[0] = cfblk5_out1;
  assign emi_129_reg_next[1] = emi_129_reg[0];



  assign y1 = emi_129_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_258_process
      if (reset == 1'b1) begin
        for(emi_258_t_1 = 32'sd0; emi_258_t_1 <= 32'sd1; emi_258_t_1 = emi_258_t_1 + 32'sd1) begin
          emi_258_reg[emi_258_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_258_t_0_0 = 32'sd0; emi_258_t_0_0 <= 32'sd1; emi_258_t_0_0 = emi_258_t_0_0 + 32'sd1) begin
            emi_258_reg[emi_258_t_0_0] <= emi_258_reg_next[emi_258_t_0_0];
          end
        end
      end
    end

  assign emi_258_out1 = emi_258_reg[1];
  assign emi_258_reg_next[0] = cfblk88_out1;
  assign emi_258_reg_next[1] = emi_258_reg[0];



  assign y1_1 = 1'b1;



  cfblk78 u_cfblk78 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_252(cfblk88_out1),  // uint8
                     .Action_Port(y1_1),
                     .emi_253(cfblk78_out1)  // uint8
                     );

  always @(posedge clk or posedge reset)
    begin : emi_267_process
      if (reset == 1'b1) begin
        for(emi_267_t_1 = 32'sd0; emi_267_t_1 <= 32'sd1; emi_267_t_1 = emi_267_t_1 + 32'sd1) begin
          emi_267_reg[emi_267_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_267_t_0_0 = 32'sd0; emi_267_t_0_0 <= 32'sd1; emi_267_t_0_0 = emi_267_t_0_0 + 32'sd1) begin
            emi_267_reg[emi_267_t_0_0] <= emi_267_reg_next[emi_267_t_0_0];
          end
        end
      end
    end

  assign emi_267_out1 = emi_267_reg[1];
  assign emi_267_reg_next[0] = cfblk36_out1;
  assign emi_267_reg_next[1] = emi_267_reg[0];



  assign y1_2 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_185_process
      if (reset == 1'b1) begin
        for(emi_185_t_1 = 32'sd0; emi_185_t_1 <= 32'sd1; emi_185_t_1 = emi_185_t_1 + 32'sd1) begin
          emi_185_reg[emi_185_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_185_t_0_0 = 32'sd0; emi_185_t_0_0 <= 32'sd1; emi_185_t_0_0 = emi_185_t_0_0 + 32'sd1) begin
            emi_185_reg[emi_185_t_0_0] <= emi_185_reg_next[emi_185_t_0_0];
          end
        end
      end
    end

  assign emi_185_out1 = emi_185_reg[1];
  assign emi_185_reg_next[0] = cfblk84_out1;
  assign emi_185_reg_next[1] = emi_185_reg[0];



  assign y1_3 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_145_process
      if (reset == 1'b1) begin
        for(emi_145_t_1 = 32'sd0; emi_145_t_1 <= 32'sd1; emi_145_t_1 = emi_145_t_1 + 32'sd1) begin
          emi_145_reg[emi_145_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_145_t_0_0 = 32'sd0; emi_145_t_0_0 <= 32'sd1; emi_145_t_0_0 = emi_145_t_0_0 + 32'sd1) begin
            emi_145_reg[emi_145_t_0_0] <= emi_145_reg_next[emi_145_t_0_0];
          end
        end
      end
    end

  assign emi_145_out1 = emi_145_reg[1];
  assign emi_145_reg_next[0] = cfblk19_out1;
  assign emi_145_reg_next[1] = emi_145_reg[0];



  assign y1_4 = 1'b1;



  cfblk21 u_cfblk21 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_139(cfblk19_out1),  // uint8
                     .Action_Port(y1_4),
                     .emi_140(cfblk21_out1)  // uint8
                     );

  assign cfblk113_out1 = (cfblk176_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk134_out1 = cfblk113_out1 - cfblk12_out1;



  assign cfblk26_out1 = cfblk134_out1 + cfblk172_out1;



  always @(posedge clk or posedge reset)
    begin : emi_177_process
      if (reset == 1'b1) begin
        for(emi_177_t_1 = 32'sd0; emi_177_t_1 <= 32'sd1; emi_177_t_1 = emi_177_t_1 + 32'sd1) begin
          emi_177_reg[emi_177_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_177_t_0_0 = 32'sd0; emi_177_t_0_0 <= 32'sd1; emi_177_t_0_0 = emi_177_t_0_0 + 32'sd1) begin
            emi_177_reg[emi_177_t_0_0] <= emi_177_reg_next[emi_177_t_0_0];
          end
        end
      end
    end

  assign emi_177_out1 = emi_177_reg[1];
  assign emi_177_reg_next[0] = cfblk75_out1;
  assign emi_177_reg_next[1] = emi_177_reg[0];



  assign y1_5 = emi_177_out1 == 8'b11111111;



  assign dtc_out = cfblk65_out1;



  assign cfblk30_out1 = dtc_out;



  always @(posedge clk or posedge reset)
    begin : emi_23_process
      if (reset == 1'b1) begin
        for(emi_23_t_1 = 32'sd0; emi_23_t_1 <= 32'sd1; emi_23_t_1 = emi_23_t_1 + 32'sd1) begin
          emi_23_reg[emi_23_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_23_t_0_0 = 32'sd0; emi_23_t_0_0 <= 32'sd1; emi_23_t_0_0 = emi_23_t_0_0 + 32'sd1) begin
            emi_23_reg[emi_23_t_0_0] <= emi_23_reg_next[emi_23_t_0_0];
          end
        end
      end
    end

  assign emi_23_out1 = emi_23_reg[1];
  assign emi_23_reg_next[0] = cfblk65_out1;
  assign emi_23_reg_next[1] = emi_23_reg[0];



  assign y1_6 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_250_process
      if (reset == 1'b1) begin
        for(emi_250_t_1 = 32'sd0; emi_250_t_1 <= 32'sd1; emi_250_t_1 = emi_250_t_1 + 32'sd1) begin
          emi_250_reg[emi_250_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_250_t_0_0 = 32'sd0; emi_250_t_0_0 <= 32'sd1; emi_250_t_0_0 = emi_250_t_0_0 + 32'sd1) begin
            emi_250_reg[emi_250_t_0_0] <= emi_250_reg_next[emi_250_t_0_0];
          end
        end
      end
    end

  assign emi_250_out1 = emi_250_reg[1];
  assign emi_250_reg_next[0] = cfblk150_out1;
  assign emi_250_reg_next[1] = emi_250_reg[0];



  assign y1_7 = 1'b1;



  cfblk65 u_cfblk65 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_244(cfblk150_out1),  // uint8
                     .Action_Port(y1_7),
                     .emi_245(cfblk65_out1)  // uint8
                     );

  cfblk103 u_cfblk103 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_17(cfblk65_out1),  // uint8
                       .Action_Port(y1_6),
                       .emi_18(cfblk103_out1)  // uint8
                       );

  always @(cfblk103_out1, cfblk35_out1) begin
    cfblk15_div_temp = 9'b000000000;
    cfblk15_t_0_0 = 9'b000000000;
    if (cfblk35_out1 == 8'b00000000) begin
      cfblk15_out1 = 8'b11111111;
    end
    else begin
      cfblk15_t_0_0 = {1'b0, cfblk103_out1};
      cfblk15_div_temp = cfblk15_t_0_0 / cfblk35_out1;
      if (cfblk15_div_temp[8] != 1'b0) begin
        cfblk15_out1 = 8'b11111111;
      end
      else begin
        cfblk15_out1 = cfblk15_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk187_process
      if (reset == 1'b1) begin
        for(cfblk187_t_1 = 32'sd0; cfblk187_t_1 <= 32'sd1; cfblk187_t_1 = cfblk187_t_1 + 32'sd1) begin
          cfblk187_reg[cfblk187_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk187_t_0_0 = 32'sd0; cfblk187_t_0_0 <= 32'sd1; cfblk187_t_0_0 = cfblk187_t_0_0 + 32'sd1) begin
            cfblk187_reg[cfblk187_t_0_0] <= cfblk187_reg_next[cfblk187_t_0_0];
          end
        end
      end
    end

  assign cfblk187_out1 = cfblk187_reg[1];
  assign cfblk187_reg_next[0] = cfblk15_out1;
  assign cfblk187_reg_next[1] = cfblk187_reg[0];



  assign cfblk135_out1 = cfblk154_out1 - cfblk187_out1;



  always @(posedge clk or posedge reset)
    begin : emi_283_process
      if (reset == 1'b1) begin
        for(emi_283_t_1 = 32'sd0; emi_283_t_1 <= 32'sd1; emi_283_t_1 = emi_283_t_1 + 32'sd1) begin
          emi_283_reg[emi_283_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_283_t_0_0 = 32'sd0; emi_283_t_0_0 <= 32'sd1; emi_283_t_0_0 = emi_283_t_0_0 + 32'sd1) begin
            emi_283_reg[emi_283_t_0_0] <= emi_283_reg_next[emi_283_t_0_0];
          end
        end
      end
    end

  assign emi_283_out1 = emi_283_reg[1];
  assign emi_283_reg_next[0] = cfblk157_out1;
  assign emi_283_reg_next[1] = emi_283_reg[0];



  assign y1_8 = emi_283_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_39_process
      if (reset == 1'b1) begin
        for(emi_39_t_1 = 32'sd0; emi_39_t_1 <= 32'sd1; emi_39_t_1 = emi_39_t_1 + 32'sd1) begin
          emi_39_reg[emi_39_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_39_t_0_0 = 32'sd0; emi_39_t_0_0 <= 32'sd1; emi_39_t_0_0 = emi_39_t_0_0 + 32'sd1) begin
            emi_39_reg[emi_39_t_0_0] <= emi_39_reg_next[emi_39_t_0_0];
          end
        end
      end
    end

  assign emi_39_out1 = emi_39_reg[1];
  assign emi_39_reg_next[0] = cfblk127_out1;
  assign emi_39_reg_next[1] = emi_39_reg[0];



  assign y1_9 = emi_39_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_88_process
      if (reset == 1'b1) begin
        for(emi_88_t_1 = 32'sd0; emi_88_t_1 <= 32'sd1; emi_88_t_1 = emi_88_t_1 + 32'sd1) begin
          emi_88_reg[emi_88_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_88_t_0_0 = 32'sd0; emi_88_t_0_0 <= 32'sd1; emi_88_t_0_0 = emi_88_t_0_0 + 32'sd1) begin
            emi_88_reg[emi_88_t_0_0] <= emi_88_reg_next[emi_88_t_0_0];
          end
        end
      end
    end

  assign emi_88_out1 = emi_88_reg[1];
  assign emi_88_reg_next[0] = cfblk46_out1;
  assign emi_88_reg_next[1] = emi_88_reg[0];



  assign y1_10 = emi_88_out1 == 8'b11111111;



  cfblk178 u_cfblk178 (.In1(cfblk173_out1),  // uint8
                       .Out1(cfblk178_out1)  // uint8
                       );

  cfblk67 u_cfblk67 (.u(cfblk111_out1),  // uint8
                     .y(cfblk67_out1)  // uint8
                     );

  cfblk110 u_cfblk110 (.u(cfblk67_out1),  // uint8
                       .y(cfblk110_out1)  // uint8
                       );

  assign cfblk46_out1 = cfblk110_out1 - cfblk178_out1;



  cfblk127 u_cfblk127 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_82(cfblk46_out1),  // uint8
                       .Action_Port(y1_10),
                       .emi_83(cfblk127_out1)  // uint8
                       );

  cfblk157 u_cfblk157 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_33(cfblk127_out1),  // uint8
                       .Action_Port(y1_9),
                       .emi_34(cfblk157_out1)  // uint8
                       );

  cfblk86 u_cfblk86 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_277(cfblk157_out1),  // uint8
                     .Action_Port(y1_8),
                     .emi_278(cfblk86_out1)  // uint8
                     );

  assign cfblk116_out1 = cfblk86_out1 - cfblk135_out1;



  assign cfblk41_out1 = cfblk116_out1 + cfblk41_const_val_1;



  assign cfblk158_out1 = cfblk41_out1 + cfblk119_out1;



  assign cfblk20_out1 = cfblk158_out1 - cfblk30_out1;



  cfblk177 u_cfblk177 (.In1(cfblk20_out1),  // uint8
                       .Out1(cfblk177_out1)  // uint8
                       );

  assign cfblk75_out1 = cfblk177_out1 + cfblk75_const_val_1;



  cfblk35 u_cfblk35 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_171(cfblk75_out1),  // uint8
                     .Action_Port(y1_5),
                     .emi_172(cfblk35_out1)  // uint8
                     );

  DotProduct u_cfblk70_inst (.in1(cfblk35_out1),  // uint8
                             .in2(cfblk26_out1),  // uint8
                             .out1(cfblk70_out1)  // uint8
                             );

  always @(posedge clk or posedge reset)
    begin : cfblk188_process
      if (reset == 1'b1) begin
        for(cfblk188_t_1 = 32'sd0; cfblk188_t_1 <= 32'sd1; cfblk188_t_1 = cfblk188_t_1 + 32'sd1) begin
          cfblk188_reg[cfblk188_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk188_t_0_0 = 32'sd0; cfblk188_t_0_0 <= 32'sd1; cfblk188_t_0_0 = cfblk188_t_0_0 + 32'sd1) begin
            cfblk188_reg[cfblk188_t_0_0] <= cfblk188_reg_next[cfblk188_t_0_0];
          end
        end
      end
    end

  assign cfblk188_out1 = cfblk188_reg[1];
  assign cfblk188_reg_next[0] = cfblk70_out1;
  assign cfblk188_reg_next[1] = cfblk188_reg[0];



  assign cfblk59_out1 = cfblk188_out1 + cfblk21_out1;



  assign cfblk161_out1 = cfblk59_out1 + cfblk161_const_val_1;



  always @(posedge clk or posedge reset)
    begin : emi_64_process
      if (reset == 1'b1) begin
        for(emi_64_t_1 = 32'sd0; emi_64_t_1 <= 32'sd1; emi_64_t_1 = emi_64_t_1 + 32'sd1) begin
          emi_64_reg[emi_64_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_64_t_0_0 = 32'sd0; emi_64_t_0_0 <= 32'sd1; emi_64_t_0_0 = emi_64_t_0_0 + 32'sd1) begin
            emi_64_reg[emi_64_t_0_0] <= emi_64_reg_next[emi_64_t_0_0];
          end
        end
      end
    end

  assign emi_64_out1 = emi_64_reg[1];
  assign emi_64_reg_next[0] = cfblk88_out1;
  assign emi_64_reg_next[1] = emi_64_reg[0];



  assign y1_11 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_161_process
      if (reset == 1'b1) begin
        for(emi_161_t_1 = 32'sd0; emi_161_t_1 <= 32'sd1; emi_161_t_1 = emi_161_t_1 + 32'sd1) begin
          emi_161_reg[emi_161_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_161_t_0_0 = 32'sd0; emi_161_t_0_0 <= 32'sd1; emi_161_t_0_0 = emi_161_t_0_0 + 32'sd1) begin
            emi_161_reg[emi_161_t_0_0] <= emi_161_reg_next[emi_161_t_0_0];
          end
        end
      end
    end

  assign emi_161_out1 = emi_161_reg[1];
  assign emi_161_reg_next[0] = cfblk212_out1;
  assign emi_161_reg_next[1] = emi_161_reg[0];



  assign y1_12 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_234_process
      if (reset == 1'b1) begin
        for(emi_234_t_1 = 32'sd0; emi_234_t_1 <= 32'sd1; emi_234_t_1 = emi_234_t_1 + 32'sd1) begin
          emi_234_reg[emi_234_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_234_t_0_0 = 32'sd0; emi_234_t_0_0 <= 32'sd1; emi_234_t_0_0 = emi_234_t_0_0 + 32'sd1) begin
            emi_234_reg[emi_234_t_0_0] <= emi_234_reg_next[emi_234_t_0_0];
          end
        end
      end
    end

  assign emi_234_out1 = emi_234_reg[1];
  assign emi_234_reg_next[0] = cfblk132_out1;
  assign emi_234_reg_next[1] = emi_234_reg[0];



  assign y1_13 = emi_234_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_201_process
      if (reset == 1'b1) begin
        for(emi_201_t_1 = 32'sd0; emi_201_t_1 <= 32'sd1; emi_201_t_1 = emi_201_t_1 + 32'sd1) begin
          emi_201_reg[emi_201_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_201_t_0_0 = 32'sd0; emi_201_t_0_0 <= 32'sd1; emi_201_t_0_0 = emi_201_t_0_0 + 32'sd1) begin
            emi_201_reg[emi_201_t_0_0] <= emi_201_reg_next[emi_201_t_0_0];
          end
        end
      end
    end

  assign emi_201_out1 = emi_201_reg[1];
  assign emi_201_reg_next[0] = cfblk125_out1;
  assign emi_201_reg_next[1] = emi_201_reg[0];



  assign y1_14 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_80_process
      if (reset == 1'b1) begin
        for(emi_80_t_1 = 32'sd0; emi_80_t_1 <= 32'sd1; emi_80_t_1 = emi_80_t_1 + 32'sd1) begin
          emi_80_reg[emi_80_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_80_t_0_0 = 32'sd0; emi_80_t_0_0 <= 32'sd1; emi_80_t_0_0 = emi_80_t_0_0 + 32'sd1) begin
            emi_80_reg[emi_80_t_0_0] <= emi_80_reg_next[emi_80_t_0_0];
          end
        end
      end
    end

  assign emi_80_out1 = emi_80_reg[1];
  assign emi_80_reg_next[0] = cfblk129_out1;
  assign emi_80_reg_next[1] = emi_80_reg[0];



  assign y1_15 = 1'b1;



  cfblk125 u_cfblk125 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_74(cfblk129_out1),  // uint8
                       .Action_Port(y1_15),
                       .emi_75(cfblk125_out1)  // uint8
                       );

  cfblk4_block u_cfblk4 (.clk(clk),
                         .reset(reset),
                         .enb(clk_enable),
                         .emi_195(cfblk125_out1),  // uint8
                         .Action_Port(y1_14),
                         .emi_196(cfblk4_out1)  // uint8
                         );

  assign cfblk105_out1 = cfblk4_out1 + cfblk160_out1;



  always @(posedge clk or posedge reset)
    begin : emi_47_process
      if (reset == 1'b1) begin
        for(emi_47_t_1 = 32'sd0; emi_47_t_1 <= 32'sd1; emi_47_t_1 = emi_47_t_1 + 32'sd1) begin
          emi_47_reg[emi_47_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_47_t_0_0 = 32'sd0; emi_47_t_0_0 <= 32'sd1; emi_47_t_0_0 = emi_47_t_0_0 + 32'sd1) begin
            emi_47_reg[emi_47_t_0_0] <= emi_47_reg_next[emi_47_t_0_0];
          end
        end
      end
    end

  assign emi_47_out1 = emi_47_reg[1];
  assign emi_47_reg_next[0] = cfblk49_out2;
  assign emi_47_reg_next[1] = emi_47_reg[0];



  assign y1_16 = 1'b1;



  cfblk118 u_cfblk118 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_41(cfblk49_out2),  // uint8
                       .Action_Port(y1_16),
                       .emi_42(cfblk118_out1)  // uint8
                       );

  assign dtc_out_1 = cfblk118_out1;



  assign cfblk71_out1 = dtc_out_1;



  always @(posedge clk or posedge reset)
    begin : cfblk192_process
      if (reset == 1'b1) begin
        for(cfblk192_t_1 = 32'sd0; cfblk192_t_1 <= 32'sd1; cfblk192_t_1 = cfblk192_t_1 + 32'sd1) begin
          cfblk192_reg[cfblk192_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk192_t_0_0 = 32'sd0; cfblk192_t_0_0 <= 32'sd1; cfblk192_t_0_0 = cfblk192_t_0_0 + 32'sd1) begin
            cfblk192_reg[cfblk192_t_0_0] <= cfblk192_reg_next[cfblk192_t_0_0];
          end
        end
      end
    end

  assign cfblk192_out1 = cfblk192_reg[1];
  assign cfblk192_reg_next[0] = cfblk71_out1;
  assign cfblk192_reg_next[1] = cfblk192_reg[0];



  always @(posedge clk or posedge reset)
    begin : emi_7_process
      if (reset == 1'b1) begin
        for(emi_7_t_1 = 32'sd0; emi_7_t_1 <= 32'sd1; emi_7_t_1 = emi_7_t_1 + 32'sd1) begin
          emi_7_reg[emi_7_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_7_t_0_0 = 32'sd0; emi_7_t_0_0 <= 32'sd1; emi_7_t_0_0 = emi_7_t_0_0 + 32'sd1) begin
            emi_7_reg[emi_7_t_0_0] <= emi_7_reg_next[emi_7_t_0_0];
          end
        end
      end
    end

  assign emi_7_out1 = emi_7_reg[1];
  assign emi_7_reg_next[0] = cfblk82_out1;
  assign emi_7_reg_next[1] = emi_7_reg[0];



  assign y1_17 = emi_7_out1 == 8'b11111111;



  cfblk10 u_cfblk10 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_1(cfblk82_out1),  // uint8
                     .Action_Port(y1_17),
                     .emi_2(cfblk10_out1)  // uint8
                     );

  cfblk66 u_cfblk66 (.u(cfblk10_out1),  // uint8
                     .y(cfblk66_out1)  // uint8
                     );

  always @(posedge clk or posedge reset)
    begin : cfblk195_process
      if (reset == 1'b1) begin
        for(cfblk195_t_1 = 32'sd0; cfblk195_t_1 <= 32'sd1; cfblk195_t_1 = cfblk195_t_1 + 32'sd1) begin
          cfblk195_reg[cfblk195_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk195_t_0_0 = 32'sd0; cfblk195_t_0_0 <= 32'sd1; cfblk195_t_0_0 = cfblk195_t_0_0 + 32'sd1) begin
            cfblk195_reg[cfblk195_t_0_0] <= cfblk195_reg_next[cfblk195_t_0_0];
          end
        end
      end
    end

  assign cfblk195_out1 = cfblk195_reg[1];
  assign cfblk195_reg_next[0] = cfblk66_out1;
  assign cfblk195_reg_next[1] = cfblk195_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk203_process
      if (reset == 1'b1) begin
        for(cfblk203_t_1 = 32'sd0; cfblk203_t_1 <= 32'sd1; cfblk203_t_1 = cfblk203_t_1 + 32'sd1) begin
          cfblk203_reg[cfblk203_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk203_t_0_0 = 32'sd0; cfblk203_t_0_0 <= 32'sd1; cfblk203_t_0_0 = cfblk203_t_0_0 + 32'sd1) begin
            cfblk203_reg[cfblk203_t_0_0] <= cfblk203_reg_next[cfblk203_t_0_0];
          end
        end
      end
    end

  assign cfblk203_out1 = cfblk203_reg[1];
  assign cfblk203_reg_next[0] = cfblk150_out2;
  assign cfblk203_reg_next[1] = cfblk203_reg[0];



  always @(posedge clk or posedge reset)
    begin : emi_97_process
      if (reset == 1'b1) begin
        for(emi_97_t_1 = 32'sd0; emi_97_t_1 <= 32'sd1; emi_97_t_1 = emi_97_t_1 + 32'sd1) begin
          emi_97_reg[emi_97_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_97_t_0_0 = 32'sd0; emi_97_t_0_0 <= 32'sd1; emi_97_t_0_0 = emi_97_t_0_0 + 32'sd1) begin
            emi_97_reg[emi_97_t_0_0] <= emi_97_reg_next[emi_97_t_0_0];
          end
        end
      end
    end

  assign emi_97_out1 = emi_97_reg[1];
  assign emi_97_reg_next[0] = cfblk6_out1;
  assign emi_97_reg_next[1] = emi_97_reg[0];



  assign y1_18 = 1'b1;



  cfblk129 u_cfblk129 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_90(cfblk6_out1),  // uint8
                       .Action_Port(y1_18),
                       .emi_91(cfblk129_out1),  // uint8
                       .emi_92(cfblk129_out2)  // uint8
                       );

  assign cfblk14_out1 = cfblk129_out2;
  assign cfblk14_out2 = 8'b00000000;



  cfblk175 u_cfblk175 (.In1(cfblk14_out2),  // uint8
                       .Out1(cfblk175_out1)  // uint8
                       );

  cfblk2 u_cfblk2 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk175_out1),  // uint8
                   .Y(cfblk2_out1)  // uint8
                   );

  assign cfblk85_out1 = cfblk2_out1 - cfblk203_out1;



  always @(posedge clk or posedge reset)
    begin : emi_299_process
      if (reset == 1'b1) begin
        for(emi_299_t_1 = 32'sd0; emi_299_t_1 <= 32'sd1; emi_299_t_1 = emi_299_t_1 + 32'sd1) begin
          emi_299_reg[emi_299_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_299_t_0_0 = 32'sd0; emi_299_t_0_0 <= 32'sd1; emi_299_t_0_0 = emi_299_t_0_0 + 32'sd1) begin
            emi_299_reg[emi_299_t_0_0] <= emi_299_reg_next[emi_299_t_0_0];
          end
        end
      end
    end

  assign emi_299_out1 = emi_299_reg[1];
  assign emi_299_reg_next[0] = cfblk133_out1;
  assign emi_299_reg_next[1] = emi_299_reg[0];



  assign y1_19 = emi_299_out1 == 8'b11111111;



  cfblk9 u_cfblk9 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .emi_293(cfblk133_out1),  // uint8
                   .Action_Port(y1_19),
                   .emi_294(cfblk9_out1)  // uint8
                   );

  always @(posedge clk or posedge reset)
    begin : cfblk189_process
      if (reset == 1'b1) begin
        for(cfblk189_t_1 = 32'sd0; cfblk189_t_1 <= 32'sd1; cfblk189_t_1 = cfblk189_t_1 + 32'sd1) begin
          cfblk189_reg[cfblk189_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk189_t_0_0 = 32'sd0; cfblk189_t_0_0 <= 32'sd1; cfblk189_t_0_0 = cfblk189_t_0_0 + 32'sd1) begin
            cfblk189_reg[cfblk189_t_0_0] <= cfblk189_reg_next[cfblk189_t_0_0];
          end
        end
      end
    end

  assign cfblk189_out1 = cfblk189_reg[1];
  assign cfblk189_reg_next[0] = cfblk9_out1;
  assign cfblk189_reg_next[1] = cfblk189_reg[0];



  assign cfblk128_out1 = cfblk189_out1 + cfblk85_out1;



  assign cfblk121_out1 = cfblk128_out1 - cfblk195_out1;



  always @(posedge clk or posedge reset)
    begin : emi_113_process
      if (reset == 1'b1) begin
        for(emi_113_t_1 = 32'sd0; emi_113_t_1 <= 32'sd1; emi_113_t_1 = emi_113_t_1 + 32'sd1) begin
          emi_113_reg[emi_113_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_113_t_0_0 = 32'sd0; emi_113_t_0_0 <= 32'sd1; emi_113_t_0_0 = emi_113_t_0_0 + 32'sd1) begin
            emi_113_reg[emi_113_t_0_0] <= emi_113_reg_next[emi_113_t_0_0];
          end
        end
      end
    end

  assign emi_113_out1 = emi_113_reg[1];
  assign emi_113_reg_next[0] = cfblk104_out1;
  assign emi_113_reg_next[1] = emi_113_reg[0];



  assign y1_20 = emi_113_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_105_process
      if (reset == 1'b1) begin
        for(emi_105_t_1 = 32'sd0; emi_105_t_1 <= 32'sd1; emi_105_t_1 = emi_105_t_1 + 32'sd1) begin
          emi_105_reg[emi_105_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_105_t_0_0 = 32'sd0; emi_105_t_0_0 <= 32'sd1; emi_105_t_0_0 = emi_105_t_0_0 + 32'sd1) begin
            emi_105_reg[emi_105_t_0_0] <= emi_105_reg_next[emi_105_t_0_0];
          end
        end
      end
    end

  assign emi_105_out1 = emi_105_reg[1];
  assign emi_105_reg_next[0] = cfblk162_out1;
  assign emi_105_reg_next[1] = emi_105_reg[0];



  assign y1_21 = emi_105_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_226_process
      if (reset == 1'b1) begin
        for(emi_226_t_1 = 32'sd0; emi_226_t_1 <= 32'sd1; emi_226_t_1 = emi_226_t_1 + 32'sd1) begin
          emi_226_reg[emi_226_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_226_t_0_0 = 32'sd0; emi_226_t_0_0 <= 32'sd1; emi_226_t_0_0 = emi_226_t_0_0 + 32'sd1) begin
            emi_226_reg[emi_226_t_0_0] <= emi_226_reg_next[emi_226_t_0_0];
          end
        end
      end
    end

  assign emi_226_out1 = emi_226_reg[1];
  assign emi_226_reg_next[0] = cfblk13_out1;
  assign emi_226_reg_next[1] = emi_226_reg[0];



  assign y1_22 = emi_226_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_169_process
      if (reset == 1'b1) begin
        for(emi_169_t_1 = 32'sd0; emi_169_t_1 <= 32'sd1; emi_169_t_1 = emi_169_t_1 + 32'sd1) begin
          emi_169_reg[emi_169_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_169_t_0_0 = 32'sd0; emi_169_t_0_0 <= 32'sd1; emi_169_t_0_0 = emi_169_t_0_0 + 32'sd1) begin
            emi_169_reg[emi_169_t_0_0] <= emi_169_reg_next[emi_169_t_0_0];
          end
        end
      end
    end

  assign emi_169_out1 = emi_169_reg[1];
  assign emi_169_reg_next[0] = cfblk140_out1;
  assign emi_169_reg_next[1] = emi_169_reg[0];



  assign y1_23 = 1'b1;



  cfblk3 u_cfblk3 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .Action_Port(y1_23),
                   .emi_164(cfblk3_out1)  // uint8
                   );

  always @(posedge clk or posedge reset)
    begin : emi_307_process
      if (reset == 1'b1) begin
        for(emi_307_t_1 = 32'sd0; emi_307_t_1 <= 32'sd1; emi_307_t_1 = emi_307_t_1 + 32'sd1) begin
          emi_307_reg[emi_307_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_307_t_0_0 = 32'sd0; emi_307_t_0_0 <= 32'sd1; emi_307_t_0_0 = emi_307_t_0_0 + 32'sd1) begin
            emi_307_reg[emi_307_t_0_0] <= emi_307_reg_next[emi_307_t_0_0];
          end
        end
      end
    end

  assign emi_307_out1 = emi_307_reg[1];
  assign emi_307_reg_next[0] = cfblk60_out1;
  assign emi_307_reg_next[1] = emi_307_reg[0];



  assign y1_24 = emi_307_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_56_process
      if (reset == 1'b1) begin
        for(emi_56_t_1 = 32'sd0; emi_56_t_1 <= 32'sd1; emi_56_t_1 = emi_56_t_1 + 32'sd1) begin
          emi_56_reg[emi_56_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_56_t_0_0 = 32'sd0; emi_56_t_0_0 <= 32'sd1; emi_56_t_0_0 = emi_56_t_0_0 + 32'sd1) begin
            emi_56_reg[emi_56_t_0_0] <= emi_56_reg_next[emi_56_t_0_0];
          end
        end
      end
    end

  assign emi_56_out1 = emi_56_reg[1];
  assign emi_56_reg_next[0] = cfblk19_out1;
  assign emi_56_reg_next[1] = emi_56_reg[0];



  assign y1_25 = 1'b1;



  cfblk119 u_cfblk119 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_49(cfblk19_out1),  // uint8
                       .Action_Port(y1_25),
                       .emi_50(cfblk119_out1),  // uint8
                       .emi_51(cfblk119_out2)  // uint8
                       );

  assign cfblk6_out1 = cfblk119_out2 + cfblk6_const_val_1;



  always @(posedge clk or posedge reset)
    begin : emi_31_process
      if (reset == 1'b1) begin
        for(emi_31_t_1 = 32'sd0; emi_31_t_1 <= 32'sd1; emi_31_t_1 = emi_31_t_1 + 32'sd1) begin
          emi_31_reg[emi_31_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_31_t_0_0 = 32'sd0; emi_31_t_0_0 <= 32'sd1; emi_31_t_0_0 = emi_31_t_0_0 + 32'sd1) begin
            emi_31_reg[emi_31_t_0_0] <= emi_31_reg_next[emi_31_t_0_0];
          end
        end
      end
    end

  assign emi_31_out1 = emi_31_reg[1];
  assign emi_31_reg_next[0] = cfblk133_out1;
  assign emi_31_reg_next[1] = emi_31_reg[0];



  assign y1_26 = emi_31_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_153_process
      if (reset == 1'b1) begin
        for(emi_153_t_1 = 32'sd0; emi_153_t_1 <= 32'sd1; emi_153_t_1 = emi_153_t_1 + 32'sd1) begin
          emi_153_reg[emi_153_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_153_t_0_0 = 32'sd0; emi_153_t_0_0 <= 32'sd1; emi_153_t_0_0 = emi_153_t_0_0 + 32'sd1) begin
            emi_153_reg[emi_153_t_0_0] <= emi_153_reg_next[emi_153_t_0_0];
          end
        end
      end
    end

  assign emi_153_out1 = emi_153_reg[1];
  assign emi_153_reg_next[0] = cfblk154_out1;
  assign emi_153_reg_next[1] = emi_153_reg[0];



  assign y1_27 = emi_153_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_121_process
      if (reset == 1'b1) begin
        for(emi_121_t_1 = 32'sd0; emi_121_t_1 <= 32'sd1; emi_121_t_1 = emi_121_t_1 + 32'sd1) begin
          emi_121_reg[emi_121_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_121_t_0_0 = 32'sd0; emi_121_t_0_0 <= 32'sd1; emi_121_t_0_0 = emi_121_t_0_0 + 32'sd1) begin
            emi_121_reg[emi_121_t_0_0] <= emi_121_reg_next[emi_121_t_0_0];
          end
        end
      end
    end

  assign emi_121_out1 = emi_121_reg[1];
  assign emi_121_reg_next[0] = cfblk106_out1;
  assign emi_121_reg_next[1] = emi_121_reg[0];



  assign y1_28 = emi_121_out1 == 8'b11111111;



  assign dtc_out_2 = cfblk62_out1;



  assign cfblk106_out1 = dtc_out_2;



  cfblk191 u_cfblk191 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_115(cfblk106_out1),  // uint8
                       .Action_Port(y1_28),
                       .emi_116(cfblk191_out1)  // uint8
                       );

  assign cfblk140_out1 = cfblk8_out1 - cfblk191_out1;



  assign cfblk138_out1 = cfblk140_out1 + cfblk139_out1;



  assign cfblk154_out1 = cfblk138_out1 - cfblk122_out1;



  cfblk133 u_cfblk133 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_147(cfblk154_out1),  // uint8
                       .Action_Port(y1_27),
                       .emi_148(cfblk133_out1)  // uint8
                       );

  cfblk111_block u_cfblk111 (.clk(clk),
                             .reset(reset),
                             .enb(clk_enable),
                             .emi_25(cfblk133_out1),  // uint8
                             .Action_Port(y1_26),
                             .emi_26(cfblk111_out1)  // uint8
                             );

  assign cfblk82_out1 = cfblk111_out1 - cfblk6_out1;



  assign cfblk24_out1 = cfblk141_out1 + cfblk82_out1;



  assign cfblk60_out1 = cfblk24_out1 + cfblk60_const_val_1;



  cfblk91 u_cfblk91 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_301(cfblk60_out1),  // uint8
                     .Action_Port(y1_24),
                     .emi_302(cfblk91_out1)  // uint8
                     );

  assign cfblk13_out1 = cfblk91_out1 - cfblk3_out1;



  cfblk49 u_cfblk49 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_219(cfblk13_out1),  // uint8
                     .Action_Port(y1_22),
                     .emi_220(cfblk49_out1),  // uint8
                     .emi_221(cfblk49_out2)  // uint8
                     );

  assign cfblk62_out1 = (cfblk49_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk176 u_cfblk176 (.In1(cfblk62_out1),  // uint8
                       .Out1(cfblk176_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk190_process
      if (reset == 1'b1) begin
        for(cfblk190_t_1 = 32'sd0; cfblk190_t_1 <= 32'sd1; cfblk190_t_1 = cfblk190_t_1 + 32'sd1) begin
          cfblk190_reg[cfblk190_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk190_t_0_0 = 32'sd0; cfblk190_t_0_0 <= 32'sd1; cfblk190_t_0_0 = cfblk190_t_0_0 + 32'sd1) begin
            cfblk190_reg[cfblk190_t_0_0] <= cfblk190_reg_next[cfblk190_t_0_0];
          end
        end
      end
    end

  assign cfblk190_out1 = cfblk190_reg[1];
  assign cfblk190_reg_next[0] = cfblk176_out1;
  assign cfblk190_reg_next[1] = cfblk190_reg[0];



  always @(cfblk115_out1, cfblk190_out1) begin
    cfblk162_div_temp = 9'b000000000;
    cfblk162_t_0_0 = 9'b000000000;
    if (cfblk190_out1 == 8'b00000000) begin
      cfblk162_out1 = 8'b11111111;
    end
    else begin
      cfblk162_t_0_0 = {1'b0, cfblk115_out1};
      cfblk162_div_temp = cfblk162_t_0_0 / cfblk190_out1;
      if (cfblk162_div_temp[8] != 1'b0) begin
        cfblk162_out1 = 8'b11111111;
      end
      else begin
        cfblk162_out1 = cfblk162_div_temp[7:0];
      end
    end
  end



  cfblk139 u_cfblk139 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_99(cfblk162_out1),  // uint8
                       .Action_Port(y1_21),
                       .emi_100(cfblk139_out1)  // uint8
                       );

  cfblk179 u_cfblk179 (.In1(cfblk139_out1),  // uint8
                       .Out1(cfblk179_out1)  // uint8
                       );

  assign cfblk104_out1 = cfblk179_out1 + cfblk150_out1;



  cfblk144 u_cfblk144 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_107(cfblk104_out1),  // uint8
                       .Action_Port(y1_20),
                       .emi_108(cfblk144_out1)  // uint8
                       );

  assign cfblk55_out1 = cfblk144_out1 + cfblk5_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk186_process
      if (reset == 1'b1) begin
        for(cfblk186_t_1 = 32'sd0; cfblk186_t_1 <= 32'sd1; cfblk186_t_1 = cfblk186_t_1 + 32'sd1) begin
          cfblk186_reg[cfblk186_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk186_t_0_0 = 32'sd0; cfblk186_t_0_0 <= 32'sd1; cfblk186_t_0_0 = cfblk186_t_0_0 + 32'sd1) begin
            cfblk186_reg[cfblk186_t_0_0] <= cfblk186_reg_next[cfblk186_t_0_0];
          end
        end
      end
    end

  assign cfblk186_out1 = cfblk186_reg[1];
  assign cfblk186_reg_next[0] = cfblk55_out1;
  assign cfblk186_reg_next[1] = cfblk186_reg[0];



  always @(cfblk121_out1, cfblk186_out1) begin
    cfblk109_div_temp = 9'b000000000;
    cfblk109_t_0_0 = 9'b000000000;
    if (cfblk121_out1 == 8'b00000000) begin
      cfblk109_out1 = 8'b11111111;
    end
    else begin
      cfblk109_t_0_0 = {1'b0, cfblk186_out1};
      cfblk109_div_temp = cfblk109_t_0_0 / cfblk121_out1;
      if (cfblk109_div_temp[8] != 1'b0) begin
        cfblk109_out1 = 8'b11111111;
      end
      else begin
        cfblk109_out1 = cfblk109_div_temp[7:0];
      end
    end
  end



  DotProduct_block2 u_cfblk93_inst (.in1(cfblk109_out1),  // uint8
                                    .in2(cfblk192_out1),  // uint8
                                    .out1(cfblk93_out1)  // uint8
                                    );

  assign cfblk115_out1 = cfblk93_out1 + cfblk105_out1;



  assign cfblk132_out1 = cfblk115_out1 + cfblk132_const_val_1;



  cfblk212 u_cfblk212 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_228(cfblk132_out1),  // uint8
                       .Action_Port(y1_13),
                       .emi_229(cfblk212_out1)  // uint8
                       );

  cfblk211 u_cfblk211 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_155(cfblk212_out1),  // uint8
                       .Action_Port(y1_12),
                       .emi_156(cfblk211_out1)  // uint8
                       );

  assign dtc_out_3 = cfblk150_out2;



  assign cfblk97_out1 = dtc_out_3;



  always @(posedge clk or posedge reset)
    begin : cfblk204_process
      if (reset == 1'b1) begin
        for(cfblk204_t_1 = 32'sd0; cfblk204_t_1 <= 32'sd1; cfblk204_t_1 = cfblk204_t_1 + 32'sd1) begin
          cfblk204_reg[cfblk204_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk204_t_0_0 = 32'sd0; cfblk204_t_0_0 <= 32'sd1; cfblk204_t_0_0 = cfblk204_t_0_0 + 32'sd1) begin
            cfblk204_reg[cfblk204_t_0_0] <= cfblk204_reg_next[cfblk204_t_0_0];
          end
        end
      end
    end

  assign cfblk204_out1 = cfblk204_reg[1];
  assign cfblk204_reg_next[0] = cfblk97_out1;
  assign cfblk204_reg_next[1] = cfblk204_reg[0];



  assign cfblk88_out1 = cfblk204_out1 - cfblk211_out1;



  cfblk12 u_cfblk12 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_58(cfblk88_out1),  // uint8
                     .Action_Port(y1_11),
                     .emi_59(cfblk12_out1)  // uint8
                     );

  assign cfblk150_out1 = cfblk12_out1;
  assign cfblk150_out2 = 8'b00000000;



  assign cfblk32_out1 = cfblk150_out1 - cfblk105_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk201_process
      if (reset == 1'b1) begin
        for(cfblk201_t_1 = 32'sd0; cfblk201_t_1 <= 32'sd1; cfblk201_t_1 = cfblk201_t_1 + 32'sd1) begin
          cfblk201_reg[cfblk201_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk201_t_0_0 = 32'sd0; cfblk201_t_0_0 <= 32'sd1; cfblk201_t_0_0 = cfblk201_t_0_0 + 32'sd1) begin
            cfblk201_reg[cfblk201_t_0_0] <= cfblk201_reg_next[cfblk201_t_0_0];
          end
        end
      end
    end

  assign cfblk201_out1 = cfblk201_reg[1];
  assign cfblk201_reg_next[0] = cfblk32_out1;
  assign cfblk201_reg_next[1] = cfblk201_reg[0];



  always @(cfblk161_out1, cfblk201_out1) begin
    cfblk146_div_temp = 9'b000000000;
    cfblk146_t_0_0 = 9'b000000000;
    if (cfblk161_out1 == 8'b00000000) begin
      cfblk146_out1 = 8'b11111111;
    end
    else begin
      cfblk146_t_0_0 = {1'b0, cfblk201_out1};
      cfblk146_div_temp = cfblk146_t_0_0 / cfblk161_out1;
      if (cfblk146_div_temp[8] != 1'b0) begin
        cfblk146_out1 = 8'b11111111;
      end
      else begin
        cfblk146_out1 = cfblk146_div_temp[7:0];
      end
    end
  end



  assign cfblk141_out1 = cfblk146_out1 + cfblk44_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk200_process
      if (reset == 1'b1) begin
        for(cfblk200_t_1 = 32'sd0; cfblk200_t_1 <= 32'sd1; cfblk200_t_1 = cfblk200_t_1 + 32'sd1) begin
          cfblk200_reg[cfblk200_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk200_t_0_0 = 32'sd0; cfblk200_t_0_0 <= 32'sd1; cfblk200_t_0_0 = cfblk200_t_0_0 + 32'sd1) begin
            cfblk200_reg[cfblk200_t_0_0] <= cfblk200_reg_next[cfblk200_t_0_0];
          end
        end
      end
    end

  assign cfblk200_out1 = cfblk200_reg[1];
  assign cfblk200_reg_next[0] = cfblk141_out1;
  assign cfblk200_reg_next[1] = cfblk200_reg[0];



  always @(posedge clk or posedge reset)
    begin : emi_315_process
      if (reset == 1'b1) begin
        for(emi_315_t_1 = 32'sd0; emi_315_t_1 <= 32'sd1; emi_315_t_1 = emi_315_t_1 + 32'sd1) begin
          emi_315_reg[emi_315_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_315_t_0_0 = 32'sd0; emi_315_t_0_0 <= 32'sd1; emi_315_t_0_0 = emi_315_t_0_0 + 32'sd1) begin
            emi_315_reg[emi_315_t_0_0] <= emi_315_reg_next[emi_315_t_0_0];
          end
        end
      end
    end

  assign emi_315_out1 = emi_315_reg[1];
  assign emi_315_reg_next[0] = cfblk124_out1;
  assign emi_315_reg_next[1] = emi_315_reg[0];



  assign y1_29 = 1'b1;



  cfblk96 u_cfblk96 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_309(cfblk124_out1),  // uint8
                     .Action_Port(y1_29),
                     .emi_310(cfblk96_out1)  // uint8
                     );

  DotProduct_block u_cfblk84_inst (.in1(cfblk96_out1),  // uint8
                                   .in2(cfblk200_out1),  // uint8
                                   .out1(cfblk84_out1)  // uint8
                                   );

  cfblk36 u_cfblk36 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_179(cfblk84_out1),  // uint8
                     .Action_Port(y1_3),
                     .emi_180(cfblk36_out1)  // uint8
                     );

  cfblk8 u_cfblk8 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .emi_260(cfblk36_out1),  // uint8
                   .Action_Port(y1_2),
                   .emi_261(cfblk8_out1),  // uint8
                   .emi_262(cfblk8_out2)  // uint8
                   );

  assign cfblk72_out1 = cfblk8_out2 + cfblk78_out1;



  assign cfblk44_out1 = cfblk72_out1 + cfblk44_const_val_1;



  cfblk38 u_cfblk38 (.u(cfblk44_out1),  // uint8
                     .y(cfblk38_out1)  // uint8
                     );

  assign cfblk163_out1 = cfblk38_out1 + cfblk163_const_val_1;



  cfblk173 u_cfblk173 (.In1(cfblk163_out1),  // uint8
                       .Out1(cfblk173_out1)  // uint8
                       );

  always @(cfblk173_out1, cfblk66_out1) begin
    cfblk42_div_temp = 9'b000000000;
    cfblk42_t_0_0 = 9'b000000000;
    if (cfblk66_out1 == 8'b00000000) begin
      cfblk42_out1 = 8'b11111111;
    end
    else begin
      cfblk42_t_0_0 = {1'b0, cfblk173_out1};
      cfblk42_div_temp = cfblk42_t_0_0 / cfblk66_out1;
      if (cfblk42_div_temp[8] != 1'b0) begin
        cfblk42_out1 = 8'b11111111;
      end
      else begin
        cfblk42_out1 = cfblk42_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk196_process
      if (reset == 1'b1) begin
        for(cfblk196_t_1 = 32'sd0; cfblk196_t_1 <= 32'sd1; cfblk196_t_1 = cfblk196_t_1 + 32'sd1) begin
          cfblk196_reg[cfblk196_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk196_t_0_0 = 32'sd0; cfblk196_t_0_0 <= 32'sd1; cfblk196_t_0_0 = cfblk196_t_0_0 + 32'sd1) begin
            cfblk196_reg[cfblk196_t_0_0] <= cfblk196_reg_next[cfblk196_t_0_0];
          end
        end
      end
    end

  assign cfblk196_out1 = cfblk196_reg[1];
  assign cfblk196_reg_next[0] = cfblk42_out1;
  assign cfblk196_reg_next[1] = cfblk196_reg[0];



  assign cfblk19_out1 = cfblk196_out1 + cfblk3_out1;



  always @(cfblk118_out1, cfblk19_out1) begin
    cfblk5_div_temp = 9'b000000000;
    cfblk5_t_0_0 = 9'b000000000;
    if (cfblk118_out1 == 8'b00000000) begin
      cfblk5_out1 = 8'b11111111;
    end
    else begin
      cfblk5_t_0_0 = {1'b0, cfblk19_out1};
      cfblk5_div_temp = cfblk5_t_0_0 / cfblk118_out1;
      if (cfblk5_div_temp[8] != 1'b0) begin
        cfblk5_out1 = 8'b11111111;
      end
      else begin
        cfblk5_out1 = cfblk5_div_temp[7:0];
      end
    end
  end



  cfblk153_block u_cfblk153 (.clk(clk),
                             .reset(reset),
                             .enb(clk_enable),
                             .emi_123(cfblk5_out1),  // uint8
                             .Action_Port(y1),
                             .emi_124(cfblk153_out1)  // uint8
                             );

  always @(posedge clk or posedge reset)
    begin : cfblk193_process
      if (reset == 1'b1) begin
        for(cfblk193_t_1 = 32'sd0; cfblk193_t_1 <= 32'sd1; cfblk193_t_1 = cfblk193_t_1 + 32'sd1) begin
          cfblk193_reg[cfblk193_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk193_t_0_0 = 32'sd0; cfblk193_t_0_0 <= 32'sd1; cfblk193_t_0_0 = cfblk193_t_0_0 + 32'sd1) begin
            cfblk193_reg[cfblk193_t_0_0] <= cfblk193_reg_next[cfblk193_t_0_0];
          end
        end
      end
    end

  assign cfblk193_out1 = cfblk193_reg[1];
  assign cfblk193_reg_next[0] = cfblk153_out1;
  assign cfblk193_reg_next[1] = cfblk193_reg[0];



  assign dtc_out_4 = cfblk193_out1;



  assign cfblk53_out1 = dtc_out_4;



  assign cfblk124_out1 = cfblk53_out1 + cfblk124_const_val_1;



  assign cfblk107_out1 = cfblk124_out1 - cfblk4_out1;



  assign cfblk39_out1 = cfblk107_out1;
  assign cfblk39_out2 = 8'b00000000;



  assign cfblk160_out1 = cfblk39_out1 + cfblk14_out1;



  cfblk16 u_cfblk16 (.u(cfblk21_out1),  // uint8
                     .y(cfblk16_out1)  // uint8
                     );

  assign cfblk57_out1 = cfblk39_out2 + cfblk16_out1;



  always @(cfblk160_out1, cfblk57_out1) begin
    cfblk145_div_temp = 9'b000000000;
    cfblk145_t_0_0 = 9'b000000000;
    if (cfblk57_out1 == 8'b00000000) begin
      cfblk145_out1 = 8'b11111111;
    end
    else begin
      cfblk145_t_0_0 = {1'b0, cfblk160_out1};
      cfblk145_div_temp = cfblk145_t_0_0 / cfblk57_out1;
      if (cfblk145_div_temp[8] != 1'b0) begin
        cfblk145_out1 = 8'b11111111;
      end
      else begin
        cfblk145_out1 = cfblk145_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : emi_275_process
      if (reset == 1'b1) begin
        for(emi_275_t_1 = 32'sd0; emi_275_t_1 <= 32'sd1; emi_275_t_1 = emi_275_t_1 + 32'sd1) begin
          emi_275_reg[emi_275_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_275_t_0_0 = 32'sd0; emi_275_t_0_0 <= 32'sd1; emi_275_t_0_0 = emi_275_t_0_0 + 32'sd1) begin
            emi_275_reg[emi_275_t_0_0] <= emi_275_reg_next[emi_275_t_0_0];
          end
        end
      end
    end

  assign emi_275_out1 = emi_275_reg[1];
  assign emi_275_reg_next[0] = cfblk145_out1;
  assign emi_275_reg_next[1] = emi_275_reg[0];



  assign y1_30 = 1'b1;



  cfblk83 u_cfblk83 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_269(cfblk145_out1),  // uint8
                     .Action_Port(y1_30),
                     .emi_270(cfblk83_out1)  // uint8
                     );

  always @(posedge clk or posedge reset)
    begin : emi_193_process
      if (reset == 1'b1) begin
        for(emi_193_t_1 = 32'sd0; emi_193_t_1 <= 32'sd1; emi_193_t_1 = emi_193_t_1 + 32'sd1) begin
          emi_193_reg[emi_193_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_193_t_0_0 = 32'sd0; emi_193_t_0_0 <= 32'sd1; emi_193_t_0_0 = emi_193_t_0_0 + 32'sd1) begin
            emi_193_reg[emi_193_t_0_0] <= emi_193_reg_next[emi_193_t_0_0];
          end
        end
      end
    end

  assign emi_193_out1 = emi_193_reg[1];
  assign emi_193_reg_next[0] = cfblk145_out1;
  assign emi_193_reg_next[1] = emi_193_reg[0];



  assign y1_31 = 1'b1;



  cfblk37 u_cfblk37 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_187(cfblk145_out1),  // uint8
                     .Action_Port(y1_31),
                     .emi_188(cfblk37_out1)  // uint8
                     );

  always @(posedge clk or posedge reset)
    begin : emi_242_process
      if (reset == 1'b1) begin
        for(emi_242_t_1 = 32'sd0; emi_242_t_1 <= 32'sd1; emi_242_t_1 = emi_242_t_1 + 32'sd1) begin
          emi_242_reg[emi_242_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_242_t_0_0 = 32'sd0; emi_242_t_0_0 <= 32'sd1; emi_242_t_0_0 = emi_242_t_0_0 + 32'sd1) begin
            emi_242_reg[emi_242_t_0_0] <= emi_242_reg_next[emi_242_t_0_0];
          end
        end
      end
    end

  assign emi_242_out1 = emi_242_reg[1];
  assign emi_242_reg_next[0] = cfblk37_out1;
  assign emi_242_reg_next[1] = emi_242_reg[0];



  assign y1_32 = 1'b1;



  cfblk54 u_cfblk54 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_236(cfblk37_out1),  // uint8
                     .Action_Port(y1_32),
                     .emi_237(cfblk54_out1)  // uint8
                     );

  assign cfblk50_out1 = cfblk83_out1 + cfblk54_out1;



  DotProduct_block1 u_cfblk90_inst (.in1(cfblk50_out1),  // uint8
                                    .in2(cfblk65_out1),  // uint8
                                    .out1(cfblk90_out1)  // uint8
                                    );

  assign cfblk169 = cfblk90_out1;

  assign Hdl_out = cfblk41_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

