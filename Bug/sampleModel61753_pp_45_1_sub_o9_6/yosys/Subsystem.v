// -------------------------------------------------------------
// 
// File Name: E:\zgl\gen_6\slemi\emi_results\2024-05-23-07-46-43\SampleModel61753\Verilog_hdlsrc\sampleModel61753_pp_45_1_sub\Subsystem_1.v
// Created: 2024-05-23 08:17:52
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem_1
// Source Path: sampleModel61753_pp_45_1_sub/Subsystem_1
// Hierarchy Level: 0
// Model version: 1.1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns
`include "cfblk134.v"
`include "cfblk57.v"
`include "cfblk21.v"
`include "cfblk48.v"
`include "cfblk172.v"
`include "DotProduct_block4.v"
`include "cfblk46.v"
`include "cfblk9.v"
`include "cfblk125.v"
`include "DotProduct_block.v"
`include "cfblk24.v"
`include "cfblk2.v"
`include "cfblk43.v"
`include "cfblk20.v"
`include "cfblk124.v"
`include "DotProduct_block3.v"
`include "cfblk48_block.v"
`include "cfblk159.v"
`include "cfblk30.v"
`include "cfblk58.v"
`include "cfblk109.v"
`include "cfblk133.v"
`include "cfblk88.v"
`include "cfblk180.v"
`include "cfblk167.v"
`include "cfblk150_block.v"
`include "cfblk4.v"
`include "cfblk7.v"
`include "cfblk101.v"
`include "DotProduct_block2.v"
`include "cfblk97.v"
`include "cfblk3.v"
`include "cfblk129.v"
`include "cfblk143.v"
`include "DotProduct_block7.v"
`include "Nonpositive.v"
`include "cfblk1.v"
`include "DotProduct_block1.v"
`include "cfblk69.v"
`include "Positive.v"
`include "cfblk1_block.v"
`include "DotProduct_block6.v"
`include "cfblk76.v"
`include "cfblk30_block.v"
`include "cfblk19.v"
`include "cfblk194.v"
`include "DotProduct_block5.v"
`include "cfblk192.v"
`include "cfblk165.v"
`include "cfblk113.v"
`include "Nonnegative_block.v"
`include "cfblk139.v"
`include "cfblk100.v"
`include "cfblk127.v"
`include "cfblk50.v"
`include "DotProduct.v"
`include "cfblk148.v"
`include "cfblk33.v"
`include "cfblk51.v"
`include "cfblk158.v"
`include "cfblk112.v"
`include "cfblk97_block.v"
`include "cfblk160.v"
`include "cfblk54.v"
`include "Nonnegative.v"
`include "cfblk153.v"
`include "cfblk150.v"
`include "cfblk41.v"
`include "cfblk93.v"
`include "cfblk159_block.v"
`include "cfblk130.v"
`include "cfblk95.v"


module Subsystem_1
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk21_out1;  // uint8
  reg [7:0] emi_282_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_282_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_282_out1;  // uint8
  wire y1;
  wire [7:0] cfblk178_out1;  // uint8
  reg [7:0] emi_210_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_210_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_210_out1;  // uint8
  wire y1_1;
  wire [7:0] cfblk110_out1;  // uint8
  reg [7:0] emi_218_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_218_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_218_out1;  // uint8
  wire y1_2;
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  reg [7:0] cfblk178_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk57_out1;  // uint8
  wire [7:0] cfblk23_out1;  // uint8
  wire [7:0] cfblk23_out2;  // uint8
  wire [7:0] cfblk156_out1;  // uint8
  wire [7:0] cfblk157_out1;  // uint8
  wire [7:0] cfblk116_const_val_1;  // uint8
  wire [7:0] cfblk116_out1;  // uint8
  wire [7:0] cfblk142_const_val_1;  // uint8
  wire [7:0] cfblk42_const_val_1;  // uint8
  wire [7:0] cfblk68_const_val_1;  // uint8
  wire [7:0] cfblk10_const_val_1;  // uint8
  wire [7:0] cfblk152_const_val_1;  // uint8
  wire [7:0] cfblk65_out1;  // uint8
  reg [7:0] emi_154_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_154_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_154_out1;  // uint8
  wire y1_3;
  wire [7:0] cfblk128_out1;  // uint8
  reg [7:0] emi_138_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_138_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_138_out1;  // uint8
  wire y1_4;
  wire [7:0] cfblk114_out1;  // uint8
  reg [7:0] emi_15_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_15_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_15_out1;  // uint8
  wire y1_5;
  wire [7:0] cfblk50_out1;  // uint8
  wire [7:0] cfblk74_out1;  // uint8
  reg [7:0] cfblk166_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_out1;  // uint8
  wire [7:0] cfblk125_out1;  // uint8
  reg [7:0] emi_98_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_98_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_98_out1;  // uint8
  wire y1_6;
  wire [7:0] cfblk152_out1;  // uint8
  reg [7:0] emi_226_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_226_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_226_out1;  // uint8
  wire y1_7;
  reg [7:0] cfblk78_out1;  // uint8
  reg [7:0] emi_162_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_162_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_162_out1;  // uint8
  wire y1_8;
  wire [7:0] cfblk82_out1;  // uint8
  reg [7:0] cfblk168_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk168_out1;  // uint8
  wire [7:0] cfblk72_out1;  // uint8
  reg [7:0] emi_274_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_274_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_274_out1;  // uint8
  wire y1_9;
  wire [7:0] cfblk87_out1;  // uint8
  reg [7:0] emi_72_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_72_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_72_out1;  // uint8
  wire y1_10;
  wire [7:0] cfblk172_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  reg [7:0] cfblk177_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_out1;  // uint8
  wire [7:0] cfblk4_out1;  // uint8
  reg [7:0] emi_299_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_299_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_299_out1;  // uint8
  wire y1_11;
  wire [7:0] cfblk47_out1;  // uint8
  reg [7:0] emi_250_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_250_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_250_out1;  // uint8
  wire y1_12;
  wire [7:0] emi_64_out1;  // uint8
  wire y1_13;
  wire [7:0] cfblk135_out1;  // uint8
  wire [7:0] cfblk167_out1;  // uint8
  wire [7:0] cfblk48_out1;  // uint8
  reg [7:0] emi_130_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_130_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_130_out1;  // uint8
  wire y1_14;
  wire [7:0] cfblk108_out1;  // uint8
  reg [7:0] emi_266_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_266_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_266_out1;  // uint8
  wire y1_15;
  wire [7:0] cfblk80_out1;  // uint8
  reg [7:0] emi_23_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_23_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_23_out1;  // uint8
  wire y1_16;
  wire [7:0] cfblk29_out1;  // uint8
  reg [7:0] emi_146_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_146_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_146_out1;  // uint8
  wire y1_17;
  wire [7:0] cfblk90_out1;  // uint8
  reg [7:0] cfblk162_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  wire [7:0] cfblk18_out1;  // uint8
  reg [7:0] emi_348_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_348_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_348_out1;  // uint8
  wire y1_18;
  wire [7:0] cfblk13_out1;  // uint8
  reg [7:0] emi_31_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_31_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_31_out1;  // uint8
  wire y1_19;
  reg [7:0] cfblk164_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_out1;  // uint8
  wire [7:0] cfblk161_out1;  // uint8
  reg [7:0] emi_7_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_7_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_7_out1;  // uint8
  wire y1_20;
  wire [7:0] cfblk97_out1;  // uint8
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] cfblk34_out2;  // uint8
  wire [7:0] cfblk49_out1;  // uint8
  reg [7:0] cfblk161_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk60_out1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk94_out1;  // uint8
  wire [7:0] cfblk124_out2;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  wire [7:0] cfblk86_out1;  // uint8
  reg [7:0] cfblk175_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk175_out1;  // uint8
  wire [7:0] cfblk109_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk151_out1;  // uint8
  wire [7:0] cfblk7_out1;  // uint8
  reg [7:0] emi_122_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_122_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_122_out1;  // uint8
  wire y1_21;
  wire [7:0] cfblk165_out1;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  wire [7:0] cfblk118_out1;  // uint8
  wire [7:0] cfblk118_out2;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  wire [7:0] cfblk104_out1;  // uint8
  reg [7:0] cfblk176_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_out1;  // uint8
  wire [7:0] cfblk153_out1;  // uint8
  wire [7:0] cfblk134_out1;  // uint8
  reg [7:0] emi_114_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_114_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_114_out1;  // uint8
  wire y1_22;
  reg [7:0] emi_106_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_106_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_106_out1;  // uint8
  wire y1_23;
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk143_out1;  // uint8
  reg [7:0] cfblk163_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  wire [7:0] cfblk15_out2;  // uint8
  wire [7:0] cfblk102_out1;  // uint8
  reg [7:0] cfblk79_out1;  // uint8
  wire [7:0] cfblk33_out1;  // uint8
  reg [7:0] cfblk170_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk170_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  reg [7:0] cfblk99_out1;  // uint8
  reg [7:0] emi_290_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_290_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_290_out1;  // uint8
  wire y1_24;
  reg [7:0] cfblk61_out1;  // uint8
  reg [7:0] emi_324_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_324_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_324_out1;  // uint8
  wire y1_25;
  wire [7:0] cfblk9_out2;  // uint8
  wire [7:0] cfblk88_out1;  // uint8
  reg [7:0] emi_170_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_170_out1;  // uint8
  wire y1_26;
  wire [7:0] cfblk37_out1;  // uint8
  reg [7:0] emi_315_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_315_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_315_out1;  // uint8
  wire y1_27;
  wire [7:0] cfblk119_out1;  // uint8
  reg [7:0] emi_242_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_242_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_242_out1;  // uint8
  wire y1_28;
  wire [7:0] cfblk56_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk41_out1;  // uint8
  wire [7:0] cfblk75_out1;  // uint8
  wire [7:0] cfblk77_out1;  // uint8
  wire [7:0] cfblk96_out1;  // uint8
  wire [7:0] cfblk139_out1;  // uint8
  wire [7:0] cfblk158_out1;  // uint8
  wire [7:0] cfblk138_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk113_out1;  // uint8
  reg [7:0] cfblk44_out1;  // uint8
  reg [7:0] cfblk169_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk169_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  wire [7:0] cfblk124_out1;  // uint8
  wire [7:0] cfblk137_out1;  // uint8
  wire [7:0] cfblk123_out1;  // uint8
  wire [7:0] cfblk6_out1;  // uint8
  reg [7:0] emi_81_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_81_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_81_out1;  // uint8
  wire y1_29;
  reg [7:0] cfblk149_out1;  // uint8
  wire [7:0] cfblk192_out1;  // uint8
  reg [7:0] emi_89_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_89_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_89_out1;  // uint8
  wire y1_30;
  wire [7:0] cfblk83_out1;  // uint8
  reg [7:0] emi_186_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_186_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_186_out1;  // uint8
  wire y1_31;
  wire [7:0] cfblk14_out1;  // uint8
  reg [7:0] emi_194_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_194_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_194_out1;  // uint8
  wire y1_32;
  wire [7:0] cfblk51_out1;  // uint8
  reg [7:0] emi_307_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_307_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_307_out1;  // uint8
  wire y1_33;
  wire [7:0] cfblk28_out1;  // uint8
  reg [7:0] emi_56_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_56_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_56_out1;  // uint8
  wire y1_34;
  wire [7:0] cfblk34_out1;  // uint8
  reg [7:0] emi_48_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_48_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_48_out1;  // uint8
  wire y1_35;
  wire [7:0] cfblk113_out2;  // uint8
  wire [7:0] cfblk28_out2;  // uint8
  wire [15:0] cfblk76_out1;  // ufix16_En7
  wire [16:0] cfblk40_y;  // ufix17_En7
  wire [7:0] cfblk40_out1;  // uint8
  wire [7:0] cfblk69_out1;  // uint8
  reg [7:0] emi_178_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_178_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_178_out1;  // uint8
  wire y1_36;
  wire [7:0] cfblk81_out1;  // uint8
  reg [7:0] emi_202_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_202_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_202_out1;  // uint8
  wire y1_37;
  wire [7:0] cfblk46_out1;  // uint8
  reg [7:0] emi_39_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_39_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_39_out1;  // uint8
  wire y1_38;
  wire [7:0] cfblk95_out1;  // uint8
  reg [7:0] emi_258_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_258_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_258_out1;  // uint8
  wire y1_39;
  wire [7:0] cfblk144_out1;  // uint8
  reg [7:0] emi_340_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_340_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_340_out1;  // uint8
  wire y1_40;
  wire [7:0] cfblk112_out1;  // uint8
  wire [7:0] cfblk194_out1;  // uint8
  reg [7:0] emi_234_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_234_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_234_out1;  // uint8
  wire y1_41;
  wire [7:0] cfblk30_out1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  wire [7:0] cfblk22_out1;  // uint8
  wire [7:0] cfblk142_out1;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  wire [7:0] cfblk62_out1;  // uint8
  wire [7:0] cfblk159_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk59_out1;  // uint8
  wire [7:0] cfblk36_out2;  // uint8
  wire [7:0] cfblk15_out1;  // uint8
  wire [7:0] cfblk133_out2;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk16_out1;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk120_out1;  // uint8
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  wire [7:0] cfblk70_out1;  // uint8
  wire [7:0] cfblk100_out1;  // uint8
  wire [7:0] cfblk150_out1;  // uint8
  wire [7:0] cfblk121_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  wire [7:0] cfblk20_out1;  // uint8
  reg [7:0] cfblk173_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_out1;  // uint8
  wire [7:0] cfblk101_out1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] cfblk8_out1;  // uint8
  wire [7:0] cfblk148_out1;  // uint8
  wire [7:0] cfblk145_out1;  // uint8
  wire [7:0] cfblk43_out1;  // uint8
  reg [7:0] cfblk39_out1;  // uint8
  wire [7:0] cfblk7_out2;  // uint8
  wire [7:0] cfblk130_out1;  // uint8
  reg [7:0] emi_332_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_332_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_332_out1;  // uint8
  wire y1_42;
  wire [7:0] cfblk132_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  reg [7:0] cfblk174_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_out1;  // uint8
  wire [7:0] cfblk31_out1;  // uint8
  wire [7:0] cfblk147_out1;  // uint8
  reg [7:0] cfblk136_out1;  // uint8
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] cfblk54_out1;  // uint8
  wire [7:0] cfblk133_out1;  // uint8
  reg [7:0] cfblk131_out1;  // uint8
  wire [7:0] cfblk180_out1;  // uint8
  reg [7:0] emi_64_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_64_reg_next [0:1];  // ufix8 [2]
  reg signed [31:0] emi_282_t_0_0;  // int32
  reg signed [31:0] emi_282_t_1;  // int32
  reg signed [31:0] emi_210_t_0_0;  // int32
  reg signed [31:0] emi_210_t_1;  // int32
  reg signed [31:0] emi_218_t_0_0;  // int32
  reg signed [31:0] emi_218_t_1;  // int32
  reg signed [31:0] cfblk178_t_0_0;  // int32
  reg signed [31:0] cfblk178_t_1;  // int32
  reg signed [31:0] emi_154_t_0_0;  // int32
  reg signed [31:0] emi_154_t_1;  // int32
  reg signed [31:0] emi_138_t_0_0;  // int32
  reg signed [31:0] emi_138_t_1;  // int32
  reg signed [31:0] emi_15_t_0_0;  // int32
  reg signed [31:0] emi_15_t_1;  // int32
  reg signed [31:0] cfblk166_t_0_0;  // int32
  reg signed [31:0] cfblk166_t_1;  // int32
  reg signed [31:0] emi_98_t_0_0;  // int32
  reg signed [31:0] emi_98_t_1;  // int32
  reg signed [31:0] emi_226_t_0_0;  // int32
  reg signed [31:0] emi_226_t_1;  // int32
  reg signed [31:0] emi_162_t_0_0;  // int32
  reg signed [31:0] emi_162_t_1;  // int32
  reg signed [31:0] cfblk168_t_0_0;  // int32
  reg signed [31:0] cfblk168_t_1;  // int32
  reg signed [31:0] emi_274_t_0_0;  // int32
  reg signed [31:0] emi_274_t_1;  // int32
  reg signed [31:0] emi_72_t_0_0;  // int32
  reg signed [31:0] emi_72_t_1;  // int32
  reg signed [31:0] cfblk177_t_0_0;  // int32
  reg signed [31:0] cfblk177_t_1;  // int32
  reg signed [31:0] emi_299_t_0_0;  // int32
  reg signed [31:0] emi_299_t_1;  // int32
  reg signed [31:0] emi_250_t_0_0;  // int32
  reg signed [31:0] emi_250_t_1;  // int32
  reg signed [31:0] emi_130_t_0_0;  // int32
  reg signed [31:0] emi_130_t_1;  // int32
  reg signed [31:0] emi_266_t_0_0;  // int32
  reg signed [31:0] emi_266_t_1;  // int32
  reg signed [31:0] emi_23_t_0_0;  // int32
  reg signed [31:0] emi_23_t_1;  // int32
  reg signed [31:0] emi_146_t_0_0;  // int32
  reg signed [31:0] emi_146_t_1;  // int32
  reg signed [31:0] cfblk162_t_0_0;  // int32
  reg signed [31:0] cfblk162_t_1;  // int32
  reg signed [31:0] emi_348_t_0_0;  // int32
  reg signed [31:0] emi_348_t_1;  // int32
  reg signed [31:0] emi_31_t_0_0;  // int32
  reg signed [31:0] emi_31_t_1;  // int32
  reg signed [31:0] cfblk164_t_0_0;  // int32
  reg signed [31:0] cfblk164_t_1;  // int32
  reg signed [31:0] emi_7_t_0_0;  // int32
  reg signed [31:0] emi_7_t_1;  // int32
  reg signed [31:0] cfblk161_t_0_0;  // int32
  reg signed [31:0] cfblk161_t_1;  // int32
  reg signed [31:0] cfblk175_t_0_0;  // int32
  reg signed [31:0] cfblk175_t_1;  // int32
  reg signed [31:0] emi_122_t_0_0;  // int32
  reg signed [31:0] emi_122_t_1;  // int32
  reg signed [31:0] cfblk176_t_0_0;  // int32
  reg signed [31:0] cfblk176_t_1;  // int32
  reg signed [31:0] emi_114_t_0_0;  // int32
  reg signed [31:0] emi_114_t_1;  // int32
  reg signed [31:0] emi_106_t_0_0;  // int32
  reg signed [31:0] emi_106_t_1;  // int32
  reg signed [31:0] cfblk163_t_0_0;  // int32
  reg signed [31:0] cfblk163_t_1;  // int32
  reg [8:0] cfblk79_div_temp;  // ufix9
  reg [8:0] cfblk79_t_0_0;  // ufix9
  reg signed [31:0] cfblk170_t_0_0;  // int32
  reg signed [31:0] cfblk170_t_1;  // int32
  reg signed [31:0] emi_290_t_0_0;  // int32
  reg signed [31:0] emi_290_t_1;  // int32
  reg signed [31:0] emi_324_t_0_0;  // int32
  reg signed [31:0] emi_324_t_1;  // int32
  reg [8:0] cfblk61_div_temp;  // ufix9
  reg [8:0] cfblk61_t_0_0;  // ufix9
  reg signed [31:0] emi_170_t_0_0;  // int32
  reg signed [31:0] emi_170_t_1;  // int32
  reg signed [31:0] emi_315_t_0_0;  // int32
  reg signed [31:0] emi_315_t_1;  // int32
  reg signed [31:0] emi_242_t_0_0;  // int32
  reg signed [31:0] emi_242_t_1;  // int32
  reg [8:0] cfblk44_div_temp;  // ufix9
  reg [8:0] cfblk44_t_0_0;  // ufix9
  reg signed [31:0] cfblk169_t_0_0;  // int32
  reg signed [31:0] cfblk169_t_1;  // int32
  reg signed [31:0] emi_81_t_0_0;  // int32
  reg signed [31:0] emi_81_t_1;  // int32
  reg [8:0] cfblk149_div_temp;  // ufix9
  reg [8:0] cfblk149_t_0_0;  // ufix9
  reg signed [31:0] emi_89_t_0_0;  // int32
  reg signed [31:0] emi_89_t_1;  // int32
  reg signed [31:0] emi_186_t_0_0;  // int32
  reg signed [31:0] emi_186_t_1;  // int32
  reg signed [31:0] emi_194_t_0_0;  // int32
  reg signed [31:0] emi_194_t_1;  // int32
  reg signed [31:0] emi_307_t_0_0;  // int32
  reg signed [31:0] emi_307_t_1;  // int32
  reg signed [31:0] emi_56_t_0_0;  // int32
  reg signed [31:0] emi_56_t_1;  // int32
  reg signed [31:0] emi_48_t_0_0;  // int32
  reg signed [31:0] emi_48_t_1;  // int32
  reg signed [31:0] emi_178_t_0_0;  // int32
  reg signed [31:0] emi_178_t_1;  // int32
  reg signed [31:0] emi_202_t_0_0;  // int32
  reg signed [31:0] emi_202_t_1;  // int32
  reg signed [31:0] emi_39_t_0_0;  // int32
  reg signed [31:0] emi_39_t_1;  // int32
  reg signed [31:0] emi_258_t_0_0;  // int32
  reg signed [31:0] emi_258_t_1;  // int32
  reg signed [31:0] emi_340_t_0_0;  // int32
  reg signed [31:0] emi_340_t_1;  // int32
  reg signed [31:0] emi_234_t_0_0;  // int32
  reg signed [31:0] emi_234_t_1;  // int32
  reg signed [31:0] cfblk171_t_0_0;  // int32
  reg signed [31:0] cfblk171_t_1;  // int32
  reg [8:0] cfblk99_div_temp;  // ufix9
  reg [8:0] cfblk99_t_0_0;  // ufix9
  reg signed [31:0] cfblk173_t_0_0;  // int32
  reg signed [31:0] cfblk173_t_1;  // int32
  reg [8:0] cfblk39_div_temp;  // ufix9
  reg [8:0] cfblk39_t_0_0;  // ufix9
  reg signed [31:0] emi_332_t_0_0;  // int32
  reg signed [31:0] emi_332_t_1;  // int32
  reg signed [31:0] cfblk174_t_0_0;  // int32
  reg signed [31:0] cfblk174_t_1;  // int32
  reg [8:0] cfblk136_div_temp;  // ufix9
  reg [8:0] cfblk136_t_0_0;  // ufix9
  reg [8:0] cfblk78_div_temp;  // ufix9
  reg [8:0] cfblk78_t_0_0;  // ufix9
  reg [8:0] cfblk131_div_temp;  // ufix9
  reg [8:0] cfblk131_t_0_0;  // ufix9
  reg signed [31:0] emi_64_t_0_0;  // int32
  reg signed [31:0] emi_64_t_1;  // int32


  assign enb = clk_enable;

  always @(posedge clk or posedge reset)
    begin : emi_282_process
      if (reset == 1'b1) begin
        for(emi_282_t_1 = 32'sd0; emi_282_t_1 <= 32'sd1; emi_282_t_1 = emi_282_t_1 + 32'sd1) begin
          emi_282_reg[emi_282_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_282_t_0_0 = 32'sd0; emi_282_t_0_0 <= 32'sd1; emi_282_t_0_0 = emi_282_t_0_0 + 32'sd1) begin
            emi_282_reg[emi_282_t_0_0] <= emi_282_reg_next[emi_282_t_0_0];
          end
        end
      end
    end

  assign emi_282_out1 = emi_282_reg[1];
  assign emi_282_reg_next[0] = cfblk21_out1;
  assign emi_282_reg_next[1] = emi_282_reg[0];



  assign y1 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_210_process
      if (reset == 1'b1) begin
        for(emi_210_t_1 = 32'sd0; emi_210_t_1 <= 32'sd1; emi_210_t_1 = emi_210_t_1 + 32'sd1) begin
          emi_210_reg[emi_210_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_210_t_0_0 = 32'sd0; emi_210_t_0_0 <= 32'sd1; emi_210_t_0_0 = emi_210_t_0_0 + 32'sd1) begin
            emi_210_reg[emi_210_t_0_0] <= emi_210_reg_next[emi_210_t_0_0];
          end
        end
      end
    end

  assign emi_210_out1 = emi_210_reg[1];
  assign emi_210_reg_next[0] = cfblk178_out1;
  assign emi_210_reg_next[1] = emi_210_reg[0];



  assign y1_1 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_218_process
      if (reset == 1'b1) begin
        for(emi_218_t_1 = 32'sd0; emi_218_t_1 <= 32'sd1; emi_218_t_1 = emi_218_t_1 + 32'sd1) begin
          emi_218_reg[emi_218_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_218_t_0_0 = 32'sd0; emi_218_t_0_0 <= 32'sd1; emi_218_t_0_0 = emi_218_t_0_0 + 32'sd1) begin
            emi_218_reg[emi_218_t_0_0] <= emi_218_reg_next[emi_218_t_0_0];
          end
        end
      end
    end

  assign emi_218_out1 = emi_218_reg[1];
  assign emi_218_reg_next[0] = cfblk110_out1;
  assign emi_218_reg_next[1] = emi_218_reg[0];



  assign y1_2 = 1'b1;



  assign cfblk110_out1 = (cfblk160_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk24 u_cfblk24 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_212(cfblk110_out1),  // uint8
                     .Action_Port(y1_2),
                     .emi_213(cfblk24_out1)  // uint8
                     );

  always @(posedge clk or posedge reset)
    begin : cfblk178_process
      if (reset == 1'b1) begin
        for(cfblk178_t_1 = 32'sd0; cfblk178_t_1 <= 32'sd1; cfblk178_t_1 = cfblk178_t_1 + 32'sd1) begin
          cfblk178_reg[cfblk178_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk178_t_0_0 = 32'sd0; cfblk178_t_0_0 <= 32'sd1; cfblk178_t_0_0 = cfblk178_t_0_0 + 32'sd1) begin
            cfblk178_reg[cfblk178_t_0_0] <= cfblk178_reg_next[cfblk178_t_0_0];
          end
        end
      end
    end

  assign cfblk178_out1 = cfblk178_reg[1];
  assign cfblk178_reg_next[0] = cfblk24_out1;
  assign cfblk178_reg_next[1] = cfblk178_reg[0];



  cfblk21 u_cfblk21 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_204(cfblk178_out1),  // uint8
                     .Action_Port(y1_1),
                     .emi_205(cfblk21_out1)  // uint8
                     );

  cfblk57 u_cfblk57 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_276(cfblk21_out1),  // uint8
                     .Action_Port(y1),
                     .emi_277(cfblk57_out1)  // uint8
                     );

  assign cfblk23_out1 = cfblk57_out1;
  assign cfblk23_out2 = 8'b00000000;



  cfblk160 u_cfblk160 (.In1(cfblk23_out2),  // uint8
                       .Out1(cfblk160_out1)  // uint8
                       );

  assign cfblk156_out1 = 8'b00000001;



  assign cfblk157_out1 = 8'b00000001;



  assign cfblk116_const_val_1 = 8'b00000000;



  assign cfblk116_out1 = cfblk157_out1 + cfblk116_const_val_1;



  assign cfblk142_const_val_1 = 8'b00000000;



  assign cfblk42_const_val_1 = 8'b00000000;



  assign cfblk68_const_val_1 = 8'b00000000;



  assign cfblk10_const_val_1 = 8'b00000000;



  assign cfblk152_const_val_1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : emi_154_process
      if (reset == 1'b1) begin
        for(emi_154_t_1 = 32'sd0; emi_154_t_1 <= 32'sd1; emi_154_t_1 = emi_154_t_1 + 32'sd1) begin
          emi_154_reg[emi_154_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_154_t_0_0 = 32'sd0; emi_154_t_0_0 <= 32'sd1; emi_154_t_0_0 = emi_154_t_0_0 + 32'sd1) begin
            emi_154_reg[emi_154_t_0_0] <= emi_154_reg_next[emi_154_t_0_0];
          end
        end
      end
    end

  assign emi_154_out1 = emi_154_reg[1];
  assign emi_154_reg_next[0] = cfblk65_out1;
  assign emi_154_reg_next[1] = emi_154_reg[0];



  assign y1_3 = emi_154_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_138_process
      if (reset == 1'b1) begin
        for(emi_138_t_1 = 32'sd0; emi_138_t_1 <= 32'sd1; emi_138_t_1 = emi_138_t_1 + 32'sd1) begin
          emi_138_reg[emi_138_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_138_t_0_0 = 32'sd0; emi_138_t_0_0 <= 32'sd1; emi_138_t_0_0 = emi_138_t_0_0 + 32'sd1) begin
            emi_138_reg[emi_138_t_0_0] <= emi_138_reg_next[emi_138_t_0_0];
          end
        end
      end
    end

  assign emi_138_out1 = emi_138_reg[1];
  assign emi_138_reg_next[0] = cfblk128_out1;
  assign emi_138_reg_next[1] = emi_138_reg[0];



  assign y1_4 = emi_138_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_15_process
      if (reset == 1'b1) begin
        for(emi_15_t_1 = 32'sd0; emi_15_t_1 <= 32'sd1; emi_15_t_1 = emi_15_t_1 + 32'sd1) begin
          emi_15_reg[emi_15_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_15_t_0_0 = 32'sd0; emi_15_t_0_0 <= 32'sd1; emi_15_t_0_0 = emi_15_t_0_0 + 32'sd1) begin
            emi_15_reg[emi_15_t_0_0] <= emi_15_reg_next[emi_15_t_0_0];
          end
        end
      end
    end

  assign emi_15_out1 = emi_15_reg[1];
  assign emi_15_reg_next[0] = cfblk114_out1;
  assign emi_15_reg_next[1] = emi_15_reg[0];



  assign y1_5 = 1'b1;



  cfblk50 u_cfblk50 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_9(cfblk114_out1),  // uint8
                     .Action_Port(y1_5),
                     .emi_10(cfblk50_out1)  // uint8
                     );

  always @(posedge clk or posedge reset)
    begin : cfblk166_process
      if (reset == 1'b1) begin
        for(cfblk166_t_1 = 32'sd0; cfblk166_t_1 <= 32'sd1; cfblk166_t_1 = cfblk166_t_1 + 32'sd1) begin
          cfblk166_reg[cfblk166_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk166_t_0_0 = 32'sd0; cfblk166_t_0_0 <= 32'sd1; cfblk166_t_0_0 = cfblk166_t_0_0 + 32'sd1) begin
            cfblk166_reg[cfblk166_t_0_0] <= cfblk166_reg_next[cfblk166_t_0_0];
          end
        end
      end
    end

  assign cfblk166_out1 = cfblk166_reg[1];
  assign cfblk166_reg_next[0] = cfblk74_out1;
  assign cfblk166_reg_next[1] = cfblk166_reg[0];



  always @(posedge clk or posedge reset)
    begin : emi_98_process
      if (reset == 1'b1) begin
        for(emi_98_t_1 = 32'sd0; emi_98_t_1 <= 32'sd1; emi_98_t_1 = emi_98_t_1 + 32'sd1) begin
          emi_98_reg[emi_98_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_98_t_0_0 = 32'sd0; emi_98_t_0_0 <= 32'sd1; emi_98_t_0_0 = emi_98_t_0_0 + 32'sd1) begin
            emi_98_reg[emi_98_t_0_0] <= emi_98_reg_next[emi_98_t_0_0];
          end
        end
      end
    end

  assign emi_98_out1 = emi_98_reg[1];
  assign emi_98_reg_next[0] = cfblk125_out1;
  assign emi_98_reg_next[1] = emi_98_reg[0];



  assign y1_6 = emi_98_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_226_process
      if (reset == 1'b1) begin
        for(emi_226_t_1 = 32'sd0; emi_226_t_1 <= 32'sd1; emi_226_t_1 = emi_226_t_1 + 32'sd1) begin
          emi_226_reg[emi_226_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_226_t_0_0 = 32'sd0; emi_226_t_0_0 <= 32'sd1; emi_226_t_0_0 = emi_226_t_0_0 + 32'sd1) begin
            emi_226_reg[emi_226_t_0_0] <= emi_226_reg_next[emi_226_t_0_0];
          end
        end
      end
    end

  assign emi_226_out1 = emi_226_reg[1];
  assign emi_226_reg_next[0] = cfblk152_out1;
  assign emi_226_reg_next[1] = emi_226_reg[0];



  assign y1_7 = emi_226_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_162_process
      if (reset == 1'b1) begin
        for(emi_162_t_1 = 32'sd0; emi_162_t_1 <= 32'sd1; emi_162_t_1 = emi_162_t_1 + 32'sd1) begin
          emi_162_reg[emi_162_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_162_t_0_0 = 32'sd0; emi_162_t_0_0 <= 32'sd1; emi_162_t_0_0 = emi_162_t_0_0 + 32'sd1) begin
            emi_162_reg[emi_162_t_0_0] <= emi_162_reg_next[emi_162_t_0_0];
          end
        end
      end
    end

  assign emi_162_out1 = emi_162_reg[1];
  assign emi_162_reg_next[0] = cfblk78_out1;
  assign emi_162_reg_next[1] = emi_162_reg[0];



  assign y1_8 = emi_162_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : cfblk168_process
      if (reset == 1'b1) begin
        for(cfblk168_t_1 = 32'sd0; cfblk168_t_1 <= 32'sd1; cfblk168_t_1 = cfblk168_t_1 + 32'sd1) begin
          cfblk168_reg[cfblk168_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk168_t_0_0 = 32'sd0; cfblk168_t_0_0 <= 32'sd1; cfblk168_t_0_0 = cfblk168_t_0_0 + 32'sd1) begin
            cfblk168_reg[cfblk168_t_0_0] <= cfblk168_reg_next[cfblk168_t_0_0];
          end
        end
      end
    end

  assign cfblk168_out1 = cfblk168_reg[1];
  assign cfblk168_reg_next[0] = cfblk82_out1;
  assign cfblk168_reg_next[1] = cfblk168_reg[0];



  always @(posedge clk or posedge reset)
    begin : emi_274_process
      if (reset == 1'b1) begin
        for(emi_274_t_1 = 32'sd0; emi_274_t_1 <= 32'sd1; emi_274_t_1 = emi_274_t_1 + 32'sd1) begin
          emi_274_reg[emi_274_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_274_t_0_0 = 32'sd0; emi_274_t_0_0 <= 32'sd1; emi_274_t_0_0 = emi_274_t_0_0 + 32'sd1) begin
            emi_274_reg[emi_274_t_0_0] <= emi_274_reg_next[emi_274_t_0_0];
          end
        end
      end
    end

  assign emi_274_out1 = emi_274_reg[1];
  assign emi_274_reg_next[0] = cfblk72_out1;
  assign emi_274_reg_next[1] = emi_274_reg[0];



  assign y1_9 = emi_274_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_72_process
      if (reset == 1'b1) begin
        for(emi_72_t_1 = 32'sd0; emi_72_t_1 <= 32'sd1; emi_72_t_1 = emi_72_t_1 + 32'sd1) begin
          emi_72_reg[emi_72_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_72_t_0_0 = 32'sd0; emi_72_t_0_0 <= 32'sd1; emi_72_t_0_0 = emi_72_t_0_0 + 32'sd1) begin
            emi_72_reg[emi_72_t_0_0] <= emi_72_reg_next[emi_72_t_0_0];
          end
        end
      end
    end

  assign emi_72_out1 = emi_72_reg[1];
  assign emi_72_reg_next[0] = cfblk87_out1;
  assign emi_72_reg_next[1] = emi_72_reg[0];



  assign y1_10 = emi_72_out1 == 8'b11111111;



  cfblk172 u_cfblk172 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_66(cfblk87_out1),  // uint8
                       .Action_Port(y1_10),
                       .emi_67(cfblk172_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk177_process
      if (reset == 1'b1) begin
        for(cfblk177_t_1 = 32'sd0; cfblk177_t_1 <= 32'sd1; cfblk177_t_1 = cfblk177_t_1 + 32'sd1) begin
          cfblk177_reg[cfblk177_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk177_t_0_0 = 32'sd0; cfblk177_t_0_0 <= 32'sd1; cfblk177_t_0_0 = cfblk177_t_0_0 + 32'sd1) begin
            cfblk177_reg[cfblk177_t_0_0] <= cfblk177_reg_next[cfblk177_t_0_0];
          end
        end
      end
    end

  assign cfblk177_out1 = cfblk177_reg[1];
  assign cfblk177_reg_next[0] = cfblk2_out1;
  assign cfblk177_reg_next[1] = cfblk177_reg[0];



  always @(posedge clk or posedge reset)
    begin : emi_299_process
      if (reset == 1'b1) begin
        for(emi_299_t_1 = 32'sd0; emi_299_t_1 <= 32'sd1; emi_299_t_1 = emi_299_t_1 + 32'sd1) begin
          emi_299_reg[emi_299_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_299_t_0_0 = 32'sd0; emi_299_t_0_0 <= 32'sd1; emi_299_t_0_0 = emi_299_t_0_0 + 32'sd1) begin
            emi_299_reg[emi_299_t_0_0] <= emi_299_reg_next[emi_299_t_0_0];
          end
        end
      end
    end

  assign emi_299_out1 = emi_299_reg[1];
  assign emi_299_reg_next[0] = cfblk4_out1;
  assign emi_299_reg_next[1] = emi_299_reg[0];



  assign y1_11 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_250_process
      if (reset == 1'b1) begin
        for(emi_250_t_1 = 32'sd0; emi_250_t_1 <= 32'sd1; emi_250_t_1 = emi_250_t_1 + 32'sd1) begin
          emi_250_reg[emi_250_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_250_t_0_0 = 32'sd0; emi_250_t_0_0 <= 32'sd1; emi_250_t_0_0 = emi_250_t_0_0 + 32'sd1) begin
            emi_250_reg[emi_250_t_0_0] <= emi_250_reg_next[emi_250_t_0_0];
          end
        end
      end
    end

  assign emi_250_out1 = emi_250_reg[1];
  assign emi_250_reg_next[0] = cfblk47_out1;
  assign emi_250_reg_next[1] = emi_250_reg[0];



  assign y1_12 = 1'b1;



  assign y1_13 = 1'b1;



  cfblk167 u_cfblk167 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_58(cfblk135_out1),  // uint8
                       .Action_Port(y1_13),
                       .emi_59(cfblk167_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : emi_130_process
      if (reset == 1'b1) begin
        for(emi_130_t_1 = 32'sd0; emi_130_t_1 <= 32'sd1; emi_130_t_1 = emi_130_t_1 + 32'sd1) begin
          emi_130_reg[emi_130_t_1] <= 8'b00000001;
        end
      end
      else begin
        if (enb) begin
          for(emi_130_t_0_0 = 32'sd0; emi_130_t_0_0 <= 32'sd1; emi_130_t_0_0 = emi_130_t_0_0 + 32'sd1) begin
            emi_130_reg[emi_130_t_0_0] <= emi_130_reg_next[emi_130_t_0_0];
          end
        end
      end
    end

  assign emi_130_out1 = emi_130_reg[1];
  assign emi_130_reg_next[0] = cfblk48_out1;
  assign emi_130_reg_next[1] = emi_130_reg[0];



  assign y1_14 = emi_130_out1 >= 8'b00000001;



  always @(posedge clk or posedge reset)
    begin : emi_266_process
      if (reset == 1'b1) begin
        for(emi_266_t_1 = 32'sd0; emi_266_t_1 <= 32'sd1; emi_266_t_1 = emi_266_t_1 + 32'sd1) begin
          emi_266_reg[emi_266_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_266_t_0_0 = 32'sd0; emi_266_t_0_0 <= 32'sd1; emi_266_t_0_0 = emi_266_t_0_0 + 32'sd1) begin
            emi_266_reg[emi_266_t_0_0] <= emi_266_reg_next[emi_266_t_0_0];
          end
        end
      end
    end

  assign emi_266_out1 = emi_266_reg[1];
  assign emi_266_reg_next[0] = cfblk108_out1;
  assign emi_266_reg_next[1] = emi_266_reg[0];



  assign y1_15 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_23_process
      if (reset == 1'b1) begin
        for(emi_23_t_1 = 32'sd0; emi_23_t_1 <= 32'sd1; emi_23_t_1 = emi_23_t_1 + 32'sd1) begin
          emi_23_reg[emi_23_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_23_t_0_0 = 32'sd0; emi_23_t_0_0 <= 32'sd1; emi_23_t_0_0 = emi_23_t_0_0 + 32'sd1) begin
            emi_23_reg[emi_23_t_0_0] <= emi_23_reg_next[emi_23_t_0_0];
          end
        end
      end
    end

  assign emi_23_out1 = emi_23_reg[1];
  assign emi_23_reg_next[0] = cfblk80_out1;
  assign emi_23_reg_next[1] = emi_23_reg[0];



  assign y1_16 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_146_process
      if (reset == 1'b1) begin
        for(emi_146_t_1 = 32'sd0; emi_146_t_1 <= 32'sd1; emi_146_t_1 = emi_146_t_1 + 32'sd1) begin
          emi_146_reg[emi_146_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_146_t_0_0 = 32'sd0; emi_146_t_0_0 <= 32'sd1; emi_146_t_0_0 = emi_146_t_0_0 + 32'sd1) begin
            emi_146_reg[emi_146_t_0_0] <= emi_146_reg_next[emi_146_t_0_0];
          end
        end
      end
    end

  assign emi_146_out1 = emi_146_reg[1];
  assign emi_146_reg_next[0] = cfblk29_out1;
  assign emi_146_reg_next[1] = emi_146_reg[0];



  assign y1_17 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : cfblk162_process
      if (reset == 1'b1) begin
        for(cfblk162_t_1 = 32'sd0; cfblk162_t_1 <= 32'sd1; cfblk162_t_1 = cfblk162_t_1 + 32'sd1) begin
          cfblk162_reg[cfblk162_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk162_t_0_0 = 32'sd0; cfblk162_t_0_0 <= 32'sd1; cfblk162_t_0_0 = cfblk162_t_0_0 + 32'sd1) begin
            cfblk162_reg[cfblk162_t_0_0] <= cfblk162_reg_next[cfblk162_t_0_0];
          end
        end
      end
    end

  assign cfblk162_out1 = cfblk162_reg[1];
  assign cfblk162_reg_next[0] = cfblk90_out1;
  assign cfblk162_reg_next[1] = cfblk162_reg[0];



  assign cfblk114_out1 = cfblk162_out1 + cfblk3_out1;



  always @(posedge clk or posedge reset)
    begin : emi_348_process
      if (reset == 1'b1) begin
        for(emi_348_t_1 = 32'sd0; emi_348_t_1 <= 32'sd1; emi_348_t_1 = emi_348_t_1 + 32'sd1) begin
          emi_348_reg[emi_348_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_348_t_0_0 = 32'sd0; emi_348_t_0_0 <= 32'sd1; emi_348_t_0_0 = emi_348_t_0_0 + 32'sd1) begin
            emi_348_reg[emi_348_t_0_0] <= emi_348_reg_next[emi_348_t_0_0];
          end
        end
      end
    end

  assign emi_348_out1 = emi_348_reg[1];
  assign emi_348_reg_next[0] = cfblk18_out1;
  assign emi_348_reg_next[1] = emi_348_reg[0];



  assign y1_18 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_31_process
      if (reset == 1'b1) begin
        for(emi_31_t_1 = 32'sd0; emi_31_t_1 <= 32'sd1; emi_31_t_1 = emi_31_t_1 + 32'sd1) begin
          emi_31_reg[emi_31_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_31_t_0_0 = 32'sd0; emi_31_t_0_0 <= 32'sd1; emi_31_t_0_0 = emi_31_t_0_0 + 32'sd1) begin
            emi_31_reg[emi_31_t_0_0] <= emi_31_reg_next[emi_31_t_0_0];
          end
        end
      end
    end

  assign emi_31_out1 = emi_31_reg[1];
  assign emi_31_reg_next[0] = cfblk13_out1;
  assign emi_31_reg_next[1] = emi_31_reg[0];



  assign y1_19 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : cfblk164_process
      if (reset == 1'b1) begin
        for(cfblk164_t_1 = 32'sd0; cfblk164_t_1 <= 32'sd1; cfblk164_t_1 = cfblk164_t_1 + 32'sd1) begin
          cfblk164_reg[cfblk164_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk164_t_0_0 = 32'sd0; cfblk164_t_0_0 <= 32'sd1; cfblk164_t_0_0 = cfblk164_t_0_0 + 32'sd1) begin
            cfblk164_reg[cfblk164_t_0_0] <= cfblk164_reg_next[cfblk164_t_0_0];
          end
        end
      end
    end

  assign cfblk164_out1 = cfblk164_reg[1];
  assign cfblk164_reg_next[0] = cfblk47_out1;
  assign cfblk164_reg_next[1] = cfblk164_reg[0];



  always @(posedge clk or posedge reset)
    begin : emi_7_process
      if (reset == 1'b1) begin
        for(emi_7_t_1 = 32'sd0; emi_7_t_1 <= 32'sd1; emi_7_t_1 = emi_7_t_1 + 32'sd1) begin
          emi_7_reg[emi_7_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_7_t_0_0 = 32'sd0; emi_7_t_0_0 <= 32'sd1; emi_7_t_0_0 = emi_7_t_0_0 + 32'sd1) begin
            emi_7_reg[emi_7_t_0_0] <= emi_7_reg_next[emi_7_t_0_0];
          end
        end
      end
    end

  assign emi_7_out1 = emi_7_reg[1];
  assign emi_7_reg_next[0] = cfblk161_out1;
  assign emi_7_reg_next[1] = emi_7_reg[0];



  assign y1_20 = 1'b1;



  assign cfblk146_out1 = (cfblk97_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk3 u_cfblk3 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk146_out1),  // uint8
                   .Y(cfblk3_out1)  // uint8
                   );

  assign cfblk49_out1 = cfblk3_out1 + cfblk34_out2;



  always @(posedge clk or posedge reset)
    begin : cfblk161_process
      if (reset == 1'b1) begin
        for(cfblk161_t_1 = 32'sd0; cfblk161_t_1 <= 32'sd1; cfblk161_t_1 = cfblk161_t_1 + 32'sd1) begin
          cfblk161_reg[cfblk161_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk161_t_0_0 = 32'sd0; cfblk161_t_0_0 <= 32'sd1; cfblk161_t_0_0 = cfblk161_t_0_0 + 32'sd1) begin
            cfblk161_reg[cfblk161_t_0_0] <= cfblk161_reg_next[cfblk161_t_0_0];
          end
        end
      end
    end

  assign cfblk161_out1 = cfblk161_reg[1];
  assign cfblk161_reg_next[0] = cfblk49_out1;
  assign cfblk161_reg_next[1] = cfblk161_reg[0];



  cfblk1_block u_cfblk1 (.clk(clk),
                         .reset(reset),
                         .enb(clk_enable),
                         .emi_1(cfblk161_out1),  // uint8
                         .Action_Port(y1_20),
                         .emi_2(cfblk1_out1)  // uint8
                         );

  assign cfblk60_out1 = cfblk1_out1 - cfblk164_out1;



  assign cfblk68_out1 = cfblk60_out1 + cfblk68_const_val_1;



  assign dtc_out = cfblk68_out1;



  assign cfblk94_out1 = dtc_out;



  assign cfblk32_out1 = cfblk124_out2 + cfblk127_out1;



  assign cfblk86_out1 = (cfblk32_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk175_process
      if (reset == 1'b1) begin
        for(cfblk175_t_1 = 32'sd0; cfblk175_t_1 <= 32'sd1; cfblk175_t_1 = cfblk175_t_1 + 32'sd1) begin
          cfblk175_reg[cfblk175_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk175_t_0_0 = 32'sd0; cfblk175_t_0_0 <= 32'sd1; cfblk175_t_0_0 = cfblk175_t_0_0 + 32'sd1) begin
            cfblk175_reg[cfblk175_t_0_0] <= cfblk175_reg_next[cfblk175_t_0_0];
          end
        end
      end
    end

  assign cfblk175_out1 = cfblk175_reg[1];
  assign cfblk175_reg_next[0] = cfblk86_out1;
  assign cfblk175_reg_next[1] = cfblk175_reg[0];



  assign cfblk13_out1 = cfblk175_out1 + cfblk94_out1;



  cfblk109 u_cfblk109 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_25(cfblk13_out1),  // uint8
                       .Action_Port(y1_19),
                       .emi_26(cfblk109_out1)  // uint8
                       );

  assign dtc_out_1 = cfblk109_out1;



  assign cfblk151_out1 = dtc_out_1;



  always @(posedge clk or posedge reset)
    begin : emi_122_process
      if (reset == 1'b1) begin
        for(emi_122_t_1 = 32'sd0; emi_122_t_1 <= 32'sd1; emi_122_t_1 = emi_122_t_1 + 32'sd1) begin
          emi_122_reg[emi_122_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_122_t_0_0 = 32'sd0; emi_122_t_0_0 <= 32'sd1; emi_122_t_0_0 = emi_122_t_0_0 + 32'sd1) begin
            emi_122_reg[emi_122_t_0_0] <= emi_122_reg_next[emi_122_t_0_0];
          end
        end
      end
    end

  assign emi_122_out1 = emi_122_reg[1];
  assign emi_122_reg_next[0] = cfblk7_out1;
  assign emi_122_reg_next[1] = emi_122_reg[0];



  assign y1_21 = 1'b1;



  cfblk165 u_cfblk165 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_116(cfblk7_out1),  // uint8
                       .Action_Port(y1_21),
                       .emi_117(cfblk165_out1)  // uint8
                       );

  assign cfblk18_out1 = cfblk165_out1 - cfblk151_out1;



  cfblk97_block u_cfblk97 (.clk(clk),
                           .reset(reset),
                           .enb(clk_enable),
                           .emi_342(cfblk18_out1),  // uint8
                           .Action_Port(y1_18),
                           .emi_343(cfblk97_out1)  // uint8
                           );

  assign cfblk45_out1 = (cfblk97_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk118_out1 = cfblk45_out1;
  assign cfblk118_out2 = 8'b00000000;



  assign cfblk10_out1 = cfblk118_out1 + cfblk10_const_val_1;



  assign cfblk104_out1 = cfblk10_out1 + cfblk9_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk176_process
      if (reset == 1'b1) begin
        for(cfblk176_t_1 = 32'sd0; cfblk176_t_1 <= 32'sd1; cfblk176_t_1 = cfblk176_t_1 + 32'sd1) begin
          cfblk176_reg[cfblk176_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk176_t_0_0 = 32'sd0; cfblk176_t_0_0 <= 32'sd1; cfblk176_t_0_0 = cfblk176_t_0_0 + 32'sd1) begin
            cfblk176_reg[cfblk176_t_0_0] <= cfblk176_reg_next[cfblk176_t_0_0];
          end
        end
      end
    end

  assign cfblk176_out1 = cfblk176_reg[1];
  assign cfblk176_reg_next[0] = cfblk104_out1;
  assign cfblk176_reg_next[1] = cfblk176_reg[0];



  assign cfblk29_out1 = cfblk176_out1 + cfblk114_out1;



  cfblk153 u_cfblk153 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_140(cfblk29_out1),  // uint8
                       .Action_Port(y1_17),
                       .emi_141(cfblk153_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : emi_114_process
      if (reset == 1'b1) begin
        for(emi_114_t_1 = 32'sd0; emi_114_t_1 <= 32'sd1; emi_114_t_1 = emi_114_t_1 + 32'sd1) begin
          emi_114_reg[emi_114_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_114_t_0_0 = 32'sd0; emi_114_t_0_0 <= 32'sd1; emi_114_t_0_0 = emi_114_t_0_0 + 32'sd1) begin
            emi_114_reg[emi_114_t_0_0] <= emi_114_reg_next[emi_114_t_0_0];
          end
        end
      end
    end

  assign emi_114_out1 = emi_114_reg[1];
  assign emi_114_reg_next[0] = cfblk134_out1;
  assign emi_114_reg_next[1] = emi_114_reg[0];



  assign y1_22 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_106_process
      if (reset == 1'b1) begin
        for(emi_106_t_1 = 32'sd0; emi_106_t_1 <= 32'sd1; emi_106_t_1 = emi_106_t_1 + 32'sd1) begin
          emi_106_reg[emi_106_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_106_t_0_0 = 32'sd0; emi_106_t_0_0 <= 32'sd1; emi_106_t_0_0 = emi_106_t_0_0 + 32'sd1) begin
            emi_106_reg[emi_106_t_0_0] <= emi_106_reg_next[emi_106_t_0_0];
          end
        end
      end
    end

  assign emi_106_out1 = emi_106_reg[1];
  assign emi_106_reg_next[0] = cfblk90_out1;
  assign emi_106_reg_next[1] = emi_106_reg[0];



  assign y1_23 = 1'b1;



  assign dtc_out_2 = cfblk108_out1;



  assign cfblk27_out1 = dtc_out_2;



  assign cfblk90_out1 = cfblk27_out1 + cfblk80_out1;



  cfblk134 u_cfblk134 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_100(cfblk90_out1),  // uint8
                       .Action_Port(y1_23),
                       .emi_101(cfblk134_out1)  // uint8
                       );

  cfblk143 u_cfblk143 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_108(cfblk134_out1),  // uint8
                       .Action_Port(y1_22),
                       .emi_109(cfblk143_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk163_process
      if (reset == 1'b1) begin
        for(cfblk163_t_1 = 32'sd0; cfblk163_t_1 <= 32'sd1; cfblk163_t_1 = cfblk163_t_1 + 32'sd1) begin
          cfblk163_reg[cfblk163_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk163_t_0_0 = 32'sd0; cfblk163_t_0_0 <= 32'sd1; cfblk163_t_0_0 = cfblk163_t_0_0 + 32'sd1) begin
            cfblk163_reg[cfblk163_t_0_0] <= cfblk163_reg_next[cfblk163_t_0_0];
          end
        end
      end
    end

  assign cfblk163_out1 = cfblk163_reg[1];
  assign cfblk163_reg_next[0] = cfblk143_out1;
  assign cfblk163_reg_next[1] = cfblk163_reg[0];



  assign cfblk5_out1 = cfblk163_out1 + cfblk153_out1;



  always @(cfblk102_out1, cfblk15_out2) begin
    cfblk79_div_temp = 9'b000000000;
    cfblk79_t_0_0 = 9'b000000000;
    if (cfblk102_out1 == 8'b00000000) begin
      cfblk79_out1 = 8'b11111111;
    end
    else begin
      cfblk79_t_0_0 = {1'b0, cfblk15_out2};
      cfblk79_div_temp = cfblk79_t_0_0 / cfblk102_out1;
      if (cfblk79_div_temp[8] != 1'b0) begin
        cfblk79_out1 = 8'b11111111;
      end
      else begin
        cfblk79_out1 = cfblk79_div_temp[7:0];
      end
    end
  end



  cfblk33 u_cfblk33 (.u(cfblk79_out1),  // uint8
                     .y(cfblk33_out1)  // uint8
                     );

  always @(posedge clk or posedge reset)
    begin : cfblk170_process
      if (reset == 1'b1) begin
        for(cfblk170_t_1 = 32'sd0; cfblk170_t_1 <= 32'sd1; cfblk170_t_1 = cfblk170_t_1 + 32'sd1) begin
          cfblk170_reg[cfblk170_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk170_t_0_0 = 32'sd0; cfblk170_t_0_0 <= 32'sd1; cfblk170_t_0_0 = cfblk170_t_0_0 + 32'sd1) begin
            cfblk170_reg[cfblk170_t_0_0] <= cfblk170_reg_next[cfblk170_t_0_0];
          end
        end
      end
    end

  assign cfblk170_out1 = cfblk170_reg[1];
  assign cfblk170_reg_next[0] = cfblk33_out1;
  assign cfblk170_reg_next[1] = cfblk170_reg[0];



  assign cfblk11_out1 = cfblk170_out1 - cfblk5_out1;



  always @(posedge clk or posedge reset)
    begin : emi_290_process
      if (reset == 1'b1) begin
        for(emi_290_t_1 = 32'sd0; emi_290_t_1 <= 32'sd1; emi_290_t_1 = emi_290_t_1 + 32'sd1) begin
          emi_290_reg[emi_290_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_290_t_0_0 = 32'sd0; emi_290_t_0_0 <= 32'sd1; emi_290_t_0_0 = emi_290_t_0_0 + 32'sd1) begin
            emi_290_reg[emi_290_t_0_0] <= emi_290_reg_next[emi_290_t_0_0];
          end
        end
      end
    end

  assign emi_290_out1 = emi_290_reg[1];
  assign emi_290_reg_next[0] = cfblk99_out1;
  assign emi_290_reg_next[1] = emi_290_reg[0];



  assign y1_24 = emi_290_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_324_process
      if (reset == 1'b1) begin
        for(emi_324_t_1 = 32'sd0; emi_324_t_1 <= 32'sd1; emi_324_t_1 = emi_324_t_1 + 32'sd1) begin
          emi_324_reg[emi_324_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_324_t_0_0 = 32'sd0; emi_324_t_0_0 <= 32'sd1; emi_324_t_0_0 = emi_324_t_0_0 + 32'sd1) begin
            emi_324_reg[emi_324_t_0_0] <= emi_324_reg_next[emi_324_t_0_0];
          end
        end
      end
    end

  assign emi_324_out1 = emi_324_reg[1];
  assign emi_324_reg_next[0] = cfblk61_out1;
  assign emi_324_reg_next[1] = emi_324_reg[0];



  assign y1_25 = emi_324_out1 == 8'b11111111;



  always @(cfblk110_out1, cfblk127_out1) begin
    cfblk61_div_temp = 9'b000000000;
    cfblk61_t_0_0 = 9'b000000000;
    if (cfblk110_out1 == 8'b00000000) begin
      cfblk61_out1 = 8'b11111111;
    end
    else begin
      cfblk61_t_0_0 = {1'b0, cfblk127_out1};
      cfblk61_div_temp = cfblk61_t_0_0 / cfblk110_out1;
      if (cfblk61_div_temp[8] != 1'b0) begin
        cfblk61_out1 = 8'b11111111;
      end
      else begin
        cfblk61_out1 = cfblk61_div_temp[7:0];
      end
    end
  end



  cfblk9 u_cfblk9 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .emi_317(cfblk61_out1),  // uint8
                   .Action_Port(y1_25),
                   .emi_318(cfblk9_out1),  // uint8
                   .emi_319(cfblk9_out2)  // uint8
                   );

  always @(posedge clk or posedge reset)
    begin : emi_170_process
      if (reset == 1'b1) begin
        for(emi_170_t_1 = 32'sd0; emi_170_t_1 <= 32'sd1; emi_170_t_1 = emi_170_t_1 + 32'sd1) begin
          emi_170_reg[emi_170_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_170_t_0_0 = 32'sd0; emi_170_t_0_0 <= 32'sd1; emi_170_t_0_0 = emi_170_t_0_0 + 32'sd1) begin
            emi_170_reg[emi_170_t_0_0] <= emi_170_reg_next[emi_170_t_0_0];
          end
        end
      end
    end

  assign emi_170_out1 = emi_170_reg[1];
  assign emi_170_reg_next[0] = cfblk88_out1;
  assign emi_170_reg_next[1] = emi_170_reg[0];



  assign y1_26 = emi_170_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_315_process
      if (reset == 1'b1) begin
        for(emi_315_t_1 = 32'sd0; emi_315_t_1 <= 32'sd1; emi_315_t_1 = emi_315_t_1 + 32'sd1) begin
          emi_315_reg[emi_315_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_315_t_0_0 = 32'sd0; emi_315_t_0_0 <= 32'sd1; emi_315_t_0_0 = emi_315_t_0_0 + 32'sd1) begin
            emi_315_reg[emi_315_t_0_0] <= emi_315_reg_next[emi_315_t_0_0];
          end
        end
      end
    end

  assign emi_315_out1 = emi_315_reg[1];
  assign emi_315_reg_next[0] = cfblk37_out1;
  assign emi_315_reg_next[1] = emi_315_reg[0];



  assign y1_27 = emi_315_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_242_process
      if (reset == 1'b1) begin
        for(emi_242_t_1 = 32'sd0; emi_242_t_1 <= 32'sd1; emi_242_t_1 = emi_242_t_1 + 32'sd1) begin
          emi_242_reg[emi_242_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_242_t_0_0 = 32'sd0; emi_242_t_0_0 <= 32'sd1; emi_242_t_0_0 = emi_242_t_0_0 + 32'sd1) begin
            emi_242_reg[emi_242_t_0_0] <= emi_242_reg_next[emi_242_t_0_0];
          end
        end
      end
    end

  assign emi_242_out1 = emi_242_reg[1];
  assign emi_242_reg_next[0] = cfblk119_out1;
  assign emi_242_reg_next[1] = emi_242_reg[0];



  assign y1_28 = emi_242_out1 == 8'b11111111;



  assign dtc_out_3 = cfblk56_out1;



  assign cfblk119_out1 = dtc_out_3;



  cfblk41 u_cfblk41 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_236(cfblk119_out1),  // uint8
                     .Action_Port(y1_28),
                     .emi_237(cfblk41_out1)  // uint8
                     );

  assign cfblk77_out1 = cfblk41_out1 + cfblk75_out1;



  cfblk139 u_cfblk139 (.u(cfblk96_out1),  // uint8
                       .y(cfblk139_out1)  // uint8
                       );

  cfblk158 u_cfblk158 (.In1(cfblk139_out1),  // uint8
                       .Out1(cfblk158_out1)  // uint8
                       );

  DotProduct_block u_cfblk138_inst (.in1(cfblk158_out1),  // uint8
                                    .in2(cfblk77_out1),  // uint8
                                    .out1(cfblk138_out1)  // uint8
                                    );

  assign dtc_out_4 = cfblk138_out1;



  assign cfblk102_out1 = dtc_out_4;



  always @(cfblk102_out1, cfblk113_out1) begin
    cfblk44_div_temp = 9'b000000000;
    cfblk44_t_0_0 = 9'b000000000;
    if (cfblk113_out1 == 8'b00000000) begin
      cfblk44_out1 = 8'b11111111;
    end
    else begin
      cfblk44_t_0_0 = {1'b0, cfblk102_out1};
      cfblk44_div_temp = cfblk44_t_0_0 / cfblk113_out1;
      if (cfblk44_div_temp[8] != 1'b0) begin
        cfblk44_out1 = 8'b11111111;
      end
      else begin
        cfblk44_out1 = cfblk44_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk169_process
      if (reset == 1'b1) begin
        for(cfblk169_t_1 = 32'sd0; cfblk169_t_1 <= 32'sd1; cfblk169_t_1 = cfblk169_t_1 + 32'sd1) begin
          cfblk169_reg[cfblk169_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk169_t_0_0 = 32'sd0; cfblk169_t_0_0 <= 32'sd1; cfblk169_t_0_0 = cfblk169_t_0_0 + 32'sd1) begin
            cfblk169_reg[cfblk169_t_0_0] <= cfblk169_reg_next[cfblk169_t_0_0];
          end
        end
      end
    end

  assign cfblk169_out1 = cfblk169_reg[1];
  assign cfblk169_reg_next[0] = cfblk44_out1;
  assign cfblk169_reg_next[1] = cfblk169_reg[0];



  DotProduct_block2 u_cfblk37_inst (.in1(cfblk169_out1),  // uint8
                                    .in2(cfblk99_out1),  // uint8
                                    .out1(cfblk37_out1)  // uint8
                                    );

  cfblk88 u_cfblk88 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_309(cfblk37_out1),  // uint8
                     .Action_Port(y1_27),
                     .emi_310(cfblk88_out1)  // uint8
                     );

  cfblk19 u_cfblk19 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_164(cfblk88_out1),  // uint8
                     .Action_Port(y1_26),
                     .emi_165(cfblk19_out1)  // uint8
                     );

  assign cfblk87_out1 = cfblk19_out1 + cfblk9_out2;



  assign cfblk137_out1 = (cfblk124_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk123_out1 = cfblk137_out1 + cfblk87_out1;



  always @(posedge clk or posedge reset)
    begin : emi_81_process
      if (reset == 1'b1) begin
        for(emi_81_t_1 = 32'sd0; emi_81_t_1 <= 32'sd1; emi_81_t_1 = emi_81_t_1 + 32'sd1) begin
          emi_81_reg[emi_81_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_81_t_0_0 = 32'sd0; emi_81_t_0_0 <= 32'sd1; emi_81_t_0_0 = emi_81_t_0_0 + 32'sd1) begin
            emi_81_reg[emi_81_t_0_0] <= emi_81_reg_next[emi_81_t_0_0];
          end
        end
      end
    end

  assign emi_81_out1 = emi_81_reg[1];
  assign emi_81_reg_next[0] = cfblk6_out1;
  assign emi_81_reg_next[1] = emi_81_reg[0];



  assign y1_29 = emi_81_out1 == 8'b11111111;



  always @(cfblk21_out1, cfblk48_out1) begin
    cfblk149_div_temp = 9'b000000000;
    cfblk149_t_0_0 = 9'b000000000;
    if (cfblk21_out1 == 8'b00000000) begin
      cfblk149_out1 = 8'b11111111;
    end
    else begin
      cfblk149_t_0_0 = {1'b0, cfblk48_out1};
      cfblk149_div_temp = cfblk149_t_0_0 / cfblk21_out1;
      if (cfblk149_div_temp[8] != 1'b0) begin
        cfblk149_out1 = 8'b11111111;
      end
      else begin
        cfblk149_out1 = cfblk149_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : emi_89_process
      if (reset == 1'b1) begin
        for(emi_89_t_1 = 32'sd0; emi_89_t_1 <= 32'sd1; emi_89_t_1 = emi_89_t_1 + 32'sd1) begin
          emi_89_reg[emi_89_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_89_t_0_0 = 32'sd0; emi_89_t_0_0 <= 32'sd1; emi_89_t_0_0 = emi_89_t_0_0 + 32'sd1) begin
            emi_89_reg[emi_89_t_0_0] <= emi_89_reg_next[emi_89_t_0_0];
          end
        end
      end
    end

  assign emi_89_out1 = emi_89_reg[1];
  assign emi_89_reg_next[0] = cfblk192_out1;
  assign emi_89_reg_next[1] = emi_89_reg[0];



  assign y1_30 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_186_process
      if (reset == 1'b1) begin
        for(emi_186_t_1 = 32'sd0; emi_186_t_1 <= 32'sd1; emi_186_t_1 = emi_186_t_1 + 32'sd1) begin
          emi_186_reg[emi_186_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_186_t_0_0 = 32'sd0; emi_186_t_0_0 <= 32'sd1; emi_186_t_0_0 = emi_186_t_0_0 + 32'sd1) begin
            emi_186_reg[emi_186_t_0_0] <= emi_186_reg_next[emi_186_t_0_0];
          end
        end
      end
    end

  assign emi_186_out1 = emi_186_reg[1];
  assign emi_186_reg_next[0] = cfblk83_out1;
  assign emi_186_reg_next[1] = emi_186_reg[0];



  assign y1_31 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_194_process
      if (reset == 1'b1) begin
        for(emi_194_t_1 = 32'sd0; emi_194_t_1 <= 32'sd1; emi_194_t_1 = emi_194_t_1 + 32'sd1) begin
          emi_194_reg[emi_194_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_194_t_0_0 = 32'sd0; emi_194_t_0_0 <= 32'sd1; emi_194_t_0_0 = emi_194_t_0_0 + 32'sd1) begin
            emi_194_reg[emi_194_t_0_0] <= emi_194_reg_next[emi_194_t_0_0];
          end
        end
      end
    end

  assign emi_194_out1 = emi_194_reg[1];
  assign emi_194_reg_next[0] = cfblk14_out1;
  assign emi_194_reg_next[1] = emi_194_reg[0];



  assign y1_32 = emi_194_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_307_process
      if (reset == 1'b1) begin
        for(emi_307_t_1 = 32'sd0; emi_307_t_1 <= 32'sd1; emi_307_t_1 = emi_307_t_1 + 32'sd1) begin
          emi_307_reg[emi_307_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_307_t_0_0 = 32'sd0; emi_307_t_0_0 <= 32'sd1; emi_307_t_0_0 = emi_307_t_0_0 + 32'sd1) begin
            emi_307_reg[emi_307_t_0_0] <= emi_307_reg_next[emi_307_t_0_0];
          end
        end
      end
    end

  assign emi_307_out1 = emi_307_reg[1];
  assign emi_307_reg_next[0] = cfblk51_out1;
  assign emi_307_reg_next[1] = emi_307_reg[0];



  assign y1_33 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_56_process
      if (reset == 1'b1) begin
        for(emi_56_t_1 = 32'sd0; emi_56_t_1 <= 32'sd1; emi_56_t_1 = emi_56_t_1 + 32'sd1) begin
          emi_56_reg[emi_56_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_56_t_0_0 = 32'sd0; emi_56_t_0_0 <= 32'sd1; emi_56_t_0_0 = emi_56_t_0_0 + 32'sd1) begin
            emi_56_reg[emi_56_t_0_0] <= emi_56_reg_next[emi_56_t_0_0];
          end
        end
      end
    end

  assign emi_56_out1 = emi_56_reg[1];
  assign emi_56_reg_next[0] = cfblk28_out1;
  assign emi_56_reg_next[1] = emi_56_reg[0];



  assign y1_34 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_48_process
      if (reset == 1'b1) begin
        for(emi_48_t_1 = 32'sd0; emi_48_t_1 <= 32'sd1; emi_48_t_1 = emi_48_t_1 + 32'sd1) begin
          emi_48_reg[emi_48_t_1] <= 8'b00000001;
        end
      end
      else begin
        if (enb) begin
          for(emi_48_t_0_0 = 32'sd0; emi_48_t_0_0 <= 32'sd1; emi_48_t_0_0 = emi_48_t_0_0 + 32'sd1) begin
            emi_48_reg[emi_48_t_0_0] <= emi_48_reg_next[emi_48_t_0_0];
          end
        end
      end
    end

  assign emi_48_out1 = emi_48_reg[1];
  assign emi_48_reg_next[0] = cfblk34_out1;
  assign emi_48_reg_next[1] = emi_48_reg[0];



  assign y1_35 = emi_48_out1 >= 8'b00000001;



  cfblk113 u_cfblk113 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_41(cfblk34_out1),  // uint8
                       .Action_Port(y1_35),
                       .emi_42(cfblk113_out1),  // uint8
                       .emi_43(cfblk113_out2)  // uint8
                       );

  assign cfblk28_out1 = cfblk113_out2;
  assign cfblk28_out2 = 8'b00000000;



  cfblk51 u_cfblk51 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_50(cfblk28_out1),  // uint8
                     .Action_Port(y1_34),
                     .emi_51(cfblk51_out1)  // uint8
                     );

  cfblk76 u_cfblk76 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_301(cfblk51_out1),  // uint8
                     .Action_Port(y1_33),
                     .emi_302(cfblk76_out1)  // ufix16_En7
                     );

  assign cfblk40_y = {1'b0, cfblk76_out1};
  assign cfblk40_out1 = cfblk40_y[14:7];



  cfblk2 u_cfblk2 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk40_out1),  // uint8
                   .Y(cfblk2_out1)  // uint8
                   );

  always @(posedge clk or posedge reset)
    begin : emi_178_process
      if (reset == 1'b1) begin
        for(emi_178_t_1 = 32'sd0; emi_178_t_1 <= 32'sd1; emi_178_t_1 = emi_178_t_1 + 32'sd1) begin
          emi_178_reg[emi_178_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_178_t_0_0 = 32'sd0; emi_178_t_0_0 <= 32'sd1; emi_178_t_0_0 = emi_178_t_0_0 + 32'sd1) begin
            emi_178_reg[emi_178_t_0_0] <= emi_178_reg_next[emi_178_t_0_0];
          end
        end
      end
    end

  assign emi_178_out1 = emi_178_reg[1];
  assign emi_178_reg_next[0] = cfblk69_out1;
  assign emi_178_reg_next[1] = emi_178_reg[0];



  assign y1_36 = emi_178_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_202_process
      if (reset == 1'b1) begin
        for(emi_202_t_1 = 32'sd0; emi_202_t_1 <= 32'sd1; emi_202_t_1 = emi_202_t_1 + 32'sd1) begin
          emi_202_reg[emi_202_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_202_t_0_0 = 32'sd0; emi_202_t_0_0 <= 32'sd1; emi_202_t_0_0 = emi_202_t_0_0 + 32'sd1) begin
            emi_202_reg[emi_202_t_0_0] <= emi_202_reg_next[emi_202_t_0_0];
          end
        end
      end
    end

  assign emi_202_out1 = emi_202_reg[1];
  assign emi_202_reg_next[0] = cfblk81_out1;
  assign emi_202_reg_next[1] = emi_202_reg[0];



  assign y1_37 = emi_202_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_39_process
      if (reset == 1'b1) begin
        for(emi_39_t_1 = 32'sd0; emi_39_t_1 <= 32'sd1; emi_39_t_1 = emi_39_t_1 + 32'sd1) begin
          emi_39_reg[emi_39_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_39_t_0_0 = 32'sd0; emi_39_t_0_0 <= 32'sd1; emi_39_t_0_0 = emi_39_t_0_0 + 32'sd1) begin
            emi_39_reg[emi_39_t_0_0] <= emi_39_reg_next[emi_39_t_0_0];
          end
        end
      end
    end

  assign emi_39_out1 = emi_39_reg[1];
  assign emi_39_reg_next[0] = cfblk46_out1;
  assign emi_39_reg_next[1] = emi_39_reg[0];



  assign y1_38 = emi_39_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_258_process
      if (reset == 1'b1) begin
        for(emi_258_t_1 = 32'sd0; emi_258_t_1 <= 32'sd1; emi_258_t_1 = emi_258_t_1 + 32'sd1) begin
          emi_258_reg[emi_258_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_258_t_0_0 = 32'sd0; emi_258_t_0_0 <= 32'sd1; emi_258_t_0_0 = emi_258_t_0_0 + 32'sd1) begin
            emi_258_reg[emi_258_t_0_0] <= emi_258_reg_next[emi_258_t_0_0];
          end
        end
      end
    end

  assign emi_258_out1 = emi_258_reg[1];
  assign emi_258_reg_next[0] = cfblk95_out1;
  assign emi_258_reg_next[1] = emi_258_reg[0];



  assign y1_39 = emi_258_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_340_process
      if (reset == 1'b1) begin
        for(emi_340_t_1 = 32'sd0; emi_340_t_1 <= 32'sd1; emi_340_t_1 = emi_340_t_1 + 32'sd1) begin
          emi_340_reg[emi_340_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_340_t_0_0 = 32'sd0; emi_340_t_0_0 <= 32'sd1; emi_340_t_0_0 = emi_340_t_0_0 + 32'sd1) begin
            emi_340_reg[emi_340_t_0_0] <= emi_340_reg_next[emi_340_t_0_0];
          end
        end
      end
    end

  assign emi_340_out1 = emi_340_reg[1];
  assign emi_340_reg_next[0] = cfblk144_out1;
  assign emi_340_reg_next[1] = emi_340_reg[0];



  assign y1_40 = emi_340_out1 == 8'b11111111;



  cfblk95 u_cfblk95 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_334(cfblk144_out1),  // uint8
                     .Action_Port(y1_40),
                     .emi_335(cfblk95_out1)  // uint8
                     );

  cfblk46 u_cfblk46 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_252(cfblk95_out1),  // uint8
                     .Action_Port(y1_39),
                     .emi_253(cfblk46_out1)  // uint8
                     );

  cfblk112 u_cfblk112 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_33(cfblk46_out1),  // uint8
                       .Action_Port(y1_38),
                       .emi_34(cfblk112_out1)  // uint8
                       );

  assign cfblk81_out1 = cfblk156_out1 + cfblk112_out1;



  cfblk69 u_cfblk69 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_196(cfblk81_out1),  // uint8
                     .Action_Port(y1_37),
                     .emi_197(cfblk69_out1)  // uint8
                     );

  cfblk127 u_cfblk127 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_172(cfblk69_out1),  // uint8
                       .Action_Port(y1_36),
                       .emi_173(cfblk127_out1)  // uint8
                       );

  assign cfblk75_out1 = cfblk127_out1 - cfblk95_out1;



  assign cfblk14_out1 = cfblk75_out1 - cfblk2_out1;



  cfblk194 u_cfblk194 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_188(cfblk14_out1),  // uint8
                       .Action_Port(y1_32),
                       .emi_189(cfblk194_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : emi_234_process
      if (reset == 1'b1) begin
        for(emi_234_t_1 = 32'sd0; emi_234_t_1 <= 32'sd1; emi_234_t_1 = emi_234_t_1 + 32'sd1) begin
          emi_234_reg[emi_234_t_1] <= 8'b00000001;
        end
      end
      else begin
        if (enb) begin
          for(emi_234_t_0_0 = 32'sd0; emi_234_t_0_0 <= 32'sd1; emi_234_t_0_0 = emi_234_t_0_0 + 32'sd1) begin
            emi_234_reg[emi_234_t_0_0] <= emi_234_reg_next[emi_234_t_0_0];
          end
        end
      end
    end

  assign emi_234_out1 = emi_234_reg[1];
  assign emi_234_reg_next[0] = cfblk34_out1;
  assign emi_234_reg_next[1] = emi_234_reg[0];



  assign y1_41 = emi_234_out1 >= 8'b00000001;



  cfblk30_block u_cfblk30 (.clk(clk),
                           .reset(reset),
                           .enb(clk_enable),
                           .emi_228(cfblk34_out1),  // uint8
                           .Action_Port(y1_41),
                           .emi_229(cfblk30_out1)  // uint8
                           );

  DotProduct_block7 u_cfblk83_inst (.in1(cfblk30_out1),  // uint8
                                    .in2(cfblk194_out1),  // uint8
                                    .out1(cfblk83_out1)  // uint8
                                    );

  cfblk192 u_cfblk192 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_180(cfblk83_out1),  // uint8
                       .Action_Port(y1_31),
                       .emi_181(cfblk192_out1)  // uint8
                       );

  cfblk129 u_cfblk129 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_83(cfblk192_out1),  // uint8
                       .Action_Port(y1_30),
                       .emi_84(cfblk129_out1)  // uint8
                       );

  assign cfblk22_out1 = cfblk129_out1 - cfblk116_out1;



  assign cfblk142_out1 = cfblk22_out1 + cfblk142_const_val_1;



  assign cfblk92_out1 = cfblk142_out1 - cfblk149_out1;



  DotProduct_block4 u_cfblk62_inst (.in1(cfblk23_out1),  // uint8
                                    .in2(cfblk92_out1),  // uint8
                                    .out1(cfblk62_out1)  // uint8
                                    );

  assign dtc_out_5 = cfblk159_out1;



  assign cfblk144_out1 = dtc_out_5;



  assign cfblk59_out1 = cfblk144_out1 + cfblk62_out1;



  assign cfblk15_out1 = cfblk36_out2;
  assign cfblk15_out2 = 8'b00000000;



  DotProduct_block3 u_cfblk6_inst (.in1(cfblk15_out1),  // uint8
                                   .in2(cfblk59_out1),  // uint8
                                   .out1(cfblk6_out1)  // uint8
                                   );

  cfblk124 u_cfblk124 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_74(cfblk6_out1),  // uint8
                       .Action_Port(y1_29),
                       .emi_75(cfblk124_out1),  // uint8
                       .emi_76(cfblk124_out2)  // uint8
                       );

  assign cfblk82_out1 = cfblk124_out1 + cfblk123_out1;



  assign cfblk96_out1 = cfblk133_out2 - cfblk82_out1;



  assign dtc_out_6 = cfblk96_out1;



  assign cfblk16_out1 = dtc_out_6;



  assign cfblk42_out1 = cfblk16_out1 + cfblk42_const_val_1;



  assign dtc_out_7 = cfblk42_out1;



  assign cfblk120_out1 = dtc_out_7;



  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        for(cfblk171_t_1 = 32'sd0; cfblk171_t_1 <= 32'sd1; cfblk171_t_1 = cfblk171_t_1 + 32'sd1) begin
          cfblk171_reg[cfblk171_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk171_t_0_0 = 32'sd0; cfblk171_t_0_0 <= 32'sd1; cfblk171_t_0_0 = cfblk171_t_0_0 + 32'sd1) begin
            cfblk171_reg[cfblk171_t_0_0] <= cfblk171_reg_next[cfblk171_t_0_0];
          end
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk120_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  cfblk100 u_cfblk100 (.u(cfblk70_out1),  // uint8
                       .y(cfblk100_out1)  // uint8
                       );

  assign cfblk34_out1 = cfblk100_out1;
  assign cfblk34_out2 = 8'b00000000;



  DotProduct u_cfblk121_inst (.in1(cfblk34_out2),  // uint8
                              .in2(cfblk150_out1),  // uint8
                              .out1(cfblk121_out1)  // uint8
                              );

  assign cfblk56_out1 = (cfblk121_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk171_out1, cfblk56_out1) begin
    cfblk99_div_temp = 9'b000000000;
    cfblk99_t_0_0 = 9'b000000000;
    if (cfblk171_out1 == 8'b00000000) begin
      cfblk99_out1 = 8'b11111111;
    end
    else begin
      cfblk99_t_0_0 = {1'b0, cfblk56_out1};
      cfblk99_div_temp = cfblk99_t_0_0 / cfblk171_out1;
      if (cfblk99_div_temp[8] != 1'b0) begin
        cfblk99_out1 = 8'b11111111;
      end
      else begin
        cfblk99_out1 = cfblk99_div_temp[7:0];
      end
    end
  end



  cfblk58 u_cfblk58 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_284(cfblk99_out1),  // uint8
                     .Action_Port(y1_24),
                     .emi_285(cfblk58_out1)  // uint8
                     );

  cfblk20 u_cfblk20 (.u(cfblk58_out1),  // uint8
                     .y(cfblk20_out1)  // uint8
                     );

  always @(posedge clk or posedge reset)
    begin : cfblk173_process
      if (reset == 1'b1) begin
        for(cfblk173_t_1 = 32'sd0; cfblk173_t_1 <= 32'sd1; cfblk173_t_1 = cfblk173_t_1 + 32'sd1) begin
          cfblk173_reg[cfblk173_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk173_t_0_0 = 32'sd0; cfblk173_t_0_0 <= 32'sd1; cfblk173_t_0_0 = cfblk173_t_0_0 + 32'sd1) begin
            cfblk173_reg[cfblk173_t_0_0] <= cfblk173_reg_next[cfblk173_t_0_0];
          end
        end
      end
    end

  assign cfblk173_out1 = cfblk173_reg[1];
  assign cfblk173_reg_next[0] = cfblk20_out1;
  assign cfblk173_reg_next[1] = cfblk173_reg[0];



  assign cfblk80_out1 = cfblk173_out1 + cfblk11_out1;



  cfblk101 u_cfblk101 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_17(cfblk80_out1),  // uint8
                       .Action_Port(y1_16),
                       .emi_18(cfblk101_out1)  // uint8
                       );

  assign cfblk36_out1 = cfblk101_out1;
  assign cfblk36_out2 = 8'b00000000;



  assign dtc_out_8 = cfblk36_out1;



  assign cfblk8_out1 = dtc_out_8;



  assign cfblk108_out1 = cfblk8_out1 + cfblk80_out1;



  cfblk48_block u_cfblk48 (.clk(clk),
                           .reset(reset),
                           .enb(clk_enable),
                           .emi_260(cfblk108_out1),  // uint8
                           .Action_Port(y1_15),
                           .emi_261(cfblk48_out1)  // uint8
                           );

  cfblk148 u_cfblk148 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_124(cfblk48_out1),  // uint8
                       .Action_Port(y1_14),
                       .emi_125(cfblk148_out1)  // uint8
                       );

  assign cfblk145_out1 = cfblk148_out1 + cfblk167_out1;



  assign cfblk47_out1 = cfblk145_out1 - cfblk97_out1;



  cfblk43 u_cfblk43 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_244(cfblk47_out1),  // uint8
                     .Action_Port(y1_12),
                     .emi_245(cfblk43_out1)  // uint8
                     );

  always @(cfblk118_out2, cfblk43_out1) begin
    cfblk39_div_temp = 9'b000000000;
    cfblk39_t_0_0 = 9'b000000000;
    if (cfblk118_out2 == 8'b00000000) begin
      cfblk39_out1 = 8'b11111111;
    end
    else begin
      cfblk39_t_0_0 = {1'b0, cfblk43_out1};
      cfblk39_div_temp = cfblk39_t_0_0 / cfblk118_out2;
      if (cfblk39_div_temp[8] != 1'b0) begin
        cfblk39_out1 = 8'b11111111;
      end
      else begin
        cfblk39_out1 = cfblk39_div_temp[7:0];
      end
    end
  end



  cfblk4 u_cfblk4 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk39_out1),  // uint8
                   .Y(cfblk4_out1)  // uint8
                   );

  cfblk7 u_cfblk7 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .emi_292(cfblk4_out1),  // uint8
                   .Action_Port(y1_11),
                   .emi_293(cfblk7_out1),  // uint8
                   .emi_294(cfblk7_out2)  // uint8
                   );

  always @(posedge clk or posedge reset)
    begin : emi_332_process
      if (reset == 1'b1) begin
        for(emi_332_t_1 = 32'sd0; emi_332_t_1 <= 32'sd1; emi_332_t_1 = emi_332_t_1 + 32'sd1) begin
          emi_332_reg[emi_332_t_1] <= 8'b00000001;
        end
      end
      else begin
        if (enb) begin
          for(emi_332_t_0_0 = 32'sd0; emi_332_t_0_0 <= 32'sd1; emi_332_t_0_0 = emi_332_t_0_0 + 32'sd1) begin
            emi_332_reg[emi_332_t_0_0] <= emi_332_reg_next[emi_332_t_0_0];
          end
        end
      end
    end

  assign emi_332_out1 = emi_332_reg[1];
  assign emi_332_reg_next[0] = cfblk130_out1;
  assign emi_332_reg_next[1] = emi_332_reg[0];



  assign y1_42 = emi_332_out1 >= 8'b00000001;



  assign cfblk132_out1 = cfblk160_out1 + cfblk150_out1;



  cfblk130 u_cfblk130 (.u(cfblk132_out1),  // uint8
                       .y(cfblk130_out1)  // uint8
                       );

  cfblk93 u_cfblk93 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_326(cfblk130_out1),  // uint8
                     .Action_Port(y1_42),
                     .emi_327(cfblk93_out1)  // uint8
                     );

  always @(posedge clk or posedge reset)
    begin : cfblk174_process
      if (reset == 1'b1) begin
        for(cfblk174_t_1 = 32'sd0; cfblk174_t_1 <= 32'sd1; cfblk174_t_1 = cfblk174_t_1 + 32'sd1) begin
          cfblk174_reg[cfblk174_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk174_t_0_0 = 32'sd0; cfblk174_t_0_0 <= 32'sd1; cfblk174_t_0_0 = cfblk174_t_0_0 + 32'sd1) begin
            cfblk174_reg[cfblk174_t_0_0] <= cfblk174_reg_next[cfblk174_t_0_0];
          end
        end
      end
    end

  assign cfblk174_out1 = cfblk174_reg[1];
  assign cfblk174_reg_next[0] = cfblk93_out1;
  assign cfblk174_reg_next[1] = cfblk174_reg[0];



  DotProduct_block1 u_cfblk31_inst (.in1(cfblk174_out1),  // uint8
                                    .in2(cfblk7_out2),  // uint8
                                    .out1(cfblk31_out1)  // uint8
                                    );

  assign cfblk70_out1 = cfblk31_out1 + cfblk177_out1;



  assign cfblk147_out1 = (cfblk70_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(cfblk147_out1, cfblk172_out1) begin
    cfblk136_div_temp = 9'b000000000;
    cfblk136_t_0_0 = 9'b000000000;
    if (cfblk172_out1 == 8'b00000000) begin
      cfblk136_out1 = 8'b11111111;
    end
    else begin
      cfblk136_t_0_0 = {1'b0, cfblk147_out1};
      cfblk136_div_temp = cfblk136_t_0_0 / cfblk172_out1;
      if (cfblk136_div_temp[8] != 1'b0) begin
        cfblk136_out1 = 8'b11111111;
      end
      else begin
        cfblk136_out1 = cfblk136_div_temp[7:0];
      end
    end
  end



  assign dtc_out_9 = cfblk136_out1;



  assign cfblk72_out1 = dtc_out_9;



  cfblk54 u_cfblk54 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_268(cfblk72_out1),  // uint8
                     .Action_Port(y1_9),
                     .emi_269(cfblk54_out1)  // uint8
                     );

  always @(cfblk168_out1, cfblk54_out1) begin
    cfblk78_div_temp = 9'b000000000;
    cfblk78_t_0_0 = 9'b000000000;
    if (cfblk168_out1 == 8'b00000000) begin
      cfblk78_out1 = 8'b11111111;
    end
    else begin
      cfblk78_t_0_0 = {1'b0, cfblk54_out1};
      cfblk78_div_temp = cfblk78_t_0_0 / cfblk168_out1;
      if (cfblk78_div_temp[8] != 1'b0) begin
        cfblk78_out1 = 8'b11111111;
      end
      else begin
        cfblk78_out1 = cfblk78_div_temp[7:0];
      end
    end
  end



  cfblk159_block u_cfblk159 (.clk(clk),
                             .reset(reset),
                             .enb(clk_enable),
                             .emi_156(cfblk78_out1),  // uint8
                             .Action_Port(y1_8),
                             .emi_157(cfblk159_out1)  // uint8
                             );

  assign cfblk152_out1 = cfblk159_out1 + cfblk152_const_val_1;



  cfblk125 u_cfblk125 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_220(cfblk152_out1),  // uint8
                       .Action_Port(y1_7),
                       .emi_221(cfblk125_out1)  // uint8
                       );

  cfblk133 u_cfblk133 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_91(cfblk125_out1),  // uint8
                       .Action_Port(y1_6),
                       .emi_92(cfblk133_out1),  // uint8
                       .emi_93(cfblk133_out2)  // uint8
                       );

  always @(cfblk133_out1, cfblk166_out1) begin
    cfblk131_div_temp = 9'b000000000;
    cfblk131_t_0_0 = 9'b000000000;
    if (cfblk166_out1 == 8'b00000000) begin
      cfblk131_out1 = 8'b11111111;
    end
    else begin
      cfblk131_t_0_0 = {1'b0, cfblk133_out1};
      cfblk131_div_temp = cfblk131_t_0_0 / cfblk166_out1;
      if (cfblk131_div_temp[8] != 1'b0) begin
        cfblk131_out1 = 8'b11111111;
      end
      else begin
        cfblk131_out1 = cfblk131_div_temp[7:0];
      end
    end
  end



  assign cfblk128_out1 = cfblk131_out1 - cfblk50_out1;



  cfblk150_block u_cfblk150 (.clk(clk),
                             .reset(reset),
                             .enb(clk_enable),
                             .emi_132(cfblk128_out1),  // uint8
                             .Action_Port(y1_4),
                             .emi_133(cfblk150_out1)  // uint8
                             );

  DotProduct_block5 u_cfblk65_inst (.in1(cfblk150_out1),  // uint8
                                    .in2(cfblk139_out1),  // uint8
                                    .out1(cfblk65_out1)  // uint8
                                    );

  cfblk180 u_cfblk180 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_148(cfblk65_out1),  // uint8
                       .Action_Port(y1_3),
                       .emi_149(cfblk180_out1)  // uint8
                       );

  DotProduct_block6 u_cfblk74_inst (.in1(cfblk180_out1),  // uint8
                                    .in2(cfblk7_out2),  // uint8
                                    .out1(cfblk74_out1)  // uint8
                                    );

  assign cfblk135_out1 = cfblk74_out1 - cfblk80_out1;



  always @(posedge clk or posedge reset)
    begin : emi_64_process
      if (reset == 1'b1) begin
        for(emi_64_t_1 = 32'sd0; emi_64_t_1 <= 32'sd1; emi_64_t_1 = emi_64_t_1 + 32'sd1) begin
          emi_64_reg[emi_64_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_64_t_0_0 = 32'sd0; emi_64_t_0_0 <= 32'sd1; emi_64_t_0_0 = emi_64_t_0_0 + 32'sd1) begin
            emi_64_reg[emi_64_t_0_0] <= emi_64_reg_next[emi_64_t_0_0];
          end
        end
      end
    end

  assign emi_64_out1 = emi_64_reg[1];
  assign emi_64_reg_next[0] = cfblk135_out1;
  assign emi_64_reg_next[1] = emi_64_reg[0];



  assign Hdl_out = emi_64_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem_1

