// -------------------------------------------------------------
// 
// File Name: E:\zgl\gen_3\slemi\emi_results\2024-05-22-23-05-26\SampleModel66206\Verilog_hdlsrc\sampleModel66206_pp_7_1_sub\Subsystem.v
// Created: 2024-05-22 23:12:28
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel66206_pp_7_1_sub/Subsystem
// Hierarchy Level: 0
// Model version: 1.1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk143_out1;  // uint8
  wire [7:0] cfblk60_const_val_1;  // uint8
  wire [7:0] cfblk144_out1;  // uint8
  wire [7:0] cfblk8_out1;  // uint8
  wire [7:0] count_step;  // uint8
  wire [7:0] count_from;  // uint8
  reg [7:0] cfblk145_out1;  // uint8
  wire [7:0] count;  // uint8
  wire need_to_wrap;
  wire [7:0] count_value;  // uint8
  reg [7:0] emi_192_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_192_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_192_out1;  // uint8
  wire y1;
  wire [7:0] cfblk47_out1;  // uint8
  wire [7:0] cfblk69_const_val_1;  // uint8
  wire [7:0] cfblk85_const_val_1;  // uint8
  wire [7:0] cfblk114_const_val_1;  // uint8
  wire [7:0] cfblk38_out2;  // uint8
  reg [7:0] cfblk173_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_out1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  reg [7:0] emi_40_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_40_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_40_out1;  // uint8
  wire y1_1;
  wire [7:0] cfblk192_out1;  // uint8
  reg [7:0] emi_160_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_160_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_160_out1;  // uint8
  wire y1_2;
  reg [7:0] cfblk140_out1;  // uint8
  reg [7:0] emi_112_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_112_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_112_out1;  // uint8
  wire y1_3;
  wire [7:0] cfblk92_out1;  // uint8
  reg [7:0] emi_120_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_120_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_120_out1;  // uint8
  wire y1_4;
  wire [7:0] cfblk147_out1;  // uint8
  reg [7:0] emi_282_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_282_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_282_out1;  // uint8
  wire y1_5;
  wire [7:0] cfblk193_out1;  // uint8
  wire [7:0] cfblk28_out1;  // uint8
  wire [7:0] cfblk75_out1;  // uint8
  wire [7:0] cfblk130_out1;  // uint8
  wire [7:0] cfblk53_out1;  // uint8
  wire [7:0] cfblk119_out1;  // uint8
  reg [7:0] emi_152_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_152_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_152_out1;  // uint8
  wire y1_6;
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  reg [7:0] cfblk163_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk163_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  wire [7:0] cfblk136_out1;  // uint8
  reg [7:0] cfblk156_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk156_out1;  // uint8
  reg [7:0] cfblk125_out1;  // uint8
  wire [7:0] cfblk116_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  wire [7:0] cfblk114_out1;  // uint8
  reg [7:0] emi_250_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_250_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_250_out1;  // uint8
  wire y1_7;
  wire [7:0] cfblk181_out1;  // uint8
  reg [7:0] emi_80_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_80_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_80_out1;  // uint8
  wire y1_8;
  reg [7:0] cfblk18_out1;  // uint8
  reg [7:0] emi_274_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_274_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_274_out1;  // uint8
  wire y1_9;
  wire [7:0] cfblk68_out1;  // uint8
  reg [7:0] emi_8_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_8_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_8_out1;  // uint8
  wire y1_10;
  wire [7:0] cfblk108_out2;  // uint8
  wire [7:0] cfblk94_out1;  // uint8
  reg [7:0] emi_200_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_200_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_200_out1;  // uint8
  wire y1_11;
  wire [7:0] cfblk77_out1;  // uint8
  reg [7:0] emi_128_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_128_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_128_out1;  // uint8
  wire y1_12;
  reg [7:0] emi_24_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_24_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_24_out1;  // uint8
  wire y1_13;
  wire [7:0] cfblk112_out1;  // uint8
  reg [7:0] emi_48_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_48_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_48_out1;  // uint8
  wire y1_14;
  wire [7:0] cfblk96_out1;  // uint8
  reg [7:0] emi_258_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_258_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_258_out1;  // uint8
  wire y1_15;
  wire [7:0] cfblk103_out1;  // uint8
  reg [7:0] emi_290_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_290_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_290_out1;  // uint8
  wire y1_16;
  reg [7:0] emi_176_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_176_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_176_out1;  // uint8
  wire y1_17;
  wire [7:0] cfblk39_out2;  // uint8
  wire [7:0] cfblk60_out1;  // uint8
  wire cfblk3_relop1;
  wire [7:0] cfblk3_relop1_dtc;  // uint8
  wire [7:0] cfblk32_out1;  // uint8
  reg [7:0] cfblk164_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk164_out1;  // uint8
  wire [7:0] cfblk17_out1;  // uint8
  reg [7:0] cfblk141_out1;  // uint8
  wire [7:0] cfblk118_out1;  // uint8
  wire [7:0] cfblk54_out2;  // uint8
  wire [7:0] cfblk23_out1;  // uint8
  wire [7:0] cfblk23_out2;  // uint8
  wire [7:0] cfblk69_out1;  // uint8
  wire [7:0] cfblk30_out1;  // uint8
  wire [7:0] cfblk72_out1;  // uint8
  wire [7:0] cfblk29_out1;  // uint8
  wire [7:0] cfblk146_out1;  // uint8
  wire [7:0] cfblk55_out1;  // uint8
  wire [7:0] cfblk17_out2;  // uint8
  wire [7:0] cfblk180_out1;  // uint8
  wire [7:0] cfblk131_out1;  // uint8
  wire [7:0] cfblk101_out1;  // uint8
  reg [7:0] emi_88_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_88_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_88_out1;  // uint8
  wire y1_18;
  wire [7:0] cfblk134_out1;  // uint8
  reg [7:0] emi_72_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_72_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_72_out1;  // uint8
  wire y1_19;
  reg [7:0] cfblk107_out1;  // uint8
  reg [7:0] emi_64_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_64_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_64_out1;  // uint8
  wire y1_20;
  wire [7:0] cfblk110_out1;  // uint8
  wire [7:0] cfblk14_out1;  // uint8
  wire [7:0] cfblk90_out1;  // uint8
  wire [7:0] cfblk15_out1;  // uint8
  reg [7:0] cfblk158_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk158_out1;  // uint8
  wire [7:0] cfblk67_out1;  // uint8
  wire cfblk6_out1;  // ufix1
  wire [7:0] cfblk20_out1;  // uint8
  reg [7:0] emi_184_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_184_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_184_out1;  // uint8
  wire y1_21;
  wire [7:0] cfblk148_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk64_out1;  // uint8
  wire [7:0] cfblk88_out1;  // uint8
  reg [7:0] emi_241_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_241_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_241_out1;  // uint8
  wire y1_22;
  wire [7:0] cfblk137_out1;  // uint8
  reg [7:0] emi_56_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_56_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_56_out1;  // uint8
  wire y1_23;
  wire [7:0] cfblk95_out1;  // uint8
  reg [7:0] emi_144_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_144_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_144_out1;  // uint8
  wire y1_24;
  wire [7:0] cfblk135_out1;  // uint8
  reg [7:0] emi_136_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_136_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_136_out1;  // uint8
  wire y1_25;
  wire [7:0] cfblk120_out1;  // uint8
  reg [7:0] cfblk161_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk161_out1;  // uint8
  reg [7:0] cfblk160_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk84_out1;  // uint8
  reg [7:0] emi_32_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_32_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_32_out1;  // uint8
  wire y1_26;
  wire [7:0] cfblk13_out1;  // uint8
  wire [7:0] cfblk113_out1;  // uint8
  wire [7:0] cfblk24_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [15:0] cfblk26_out1;  // ufix16_En7
  wire [31:0] dtc_out_2;  // ufix32_En7
  wire [7:0] cfblk138_out1;  // uint8
  wire [7:0] cfblk132_out1;  // uint8
  wire [7:0] cfblk80_out1;  // uint8
  wire [7:0] cfblk52_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  reg [7:0] cfblk109_out1;  // uint8
  reg [7:0] cfblk166_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk166_out1;  // uint8
  wire [7:0] cfblk61_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk81_out2;  // uint8
  wire [7:0] cfblk42_out1;  // uint8
  reg [7:0] cfblk172_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_out1;  // uint8
  wire [7:0] cfblk35_out1;  // uint8
  wire [7:0] cfblk102_out1;  // uint8
  wire signed [31:0] cfblk66_sub_temp;  // sfix32
  wire signed [31:0] cfblk66_1;  // sfix32
  wire signed [31:0] cfblk66_2;  // sfix32
  wire [7:0] cfblk115_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  wire [7:0] cfblk151_out1;  // uint8
  wire [7:0] cfblk110_out2;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  wire [7:0] cfblk48_out1;  // uint8
  wire [7:0] cfblk46_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  wire cfblk12_relop1;
  wire [7:0] cfblk12_relop1_dtc;  // uint8
  reg [7:0] emi_233_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_233_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_233_out1;  // uint8
  wire y1_27;
  wire [7:0] cfblk133_out1;  // uint8
  wire [7:0] cfblk59_out1;  // uint8
  wire [7:0] cfblk54_out1;  // uint8
  wire [7:0] cfblk99_out1;  // uint8
  wire [7:0] cfblk63_out1;  // uint8
  wire [7:0] cfblk149_out1;  // uint8
  wire [7:0] cfblk100_out1;  // uint8
  reg [7:0] emi_16_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_16_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_16_out1;  // uint8
  wire y1_28;
  wire [7:0] cfblk76_out1;  // uint8
  wire [7:0] cfblk117_out1;  // uint8
  wire [7:0] cfblk37_out1;  // uint8
  wire [7:0] cfblk111_out1;  // uint8
  reg [7:0] emi_104_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_104_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_104_out1;  // uint8
  wire y1_29;
  wire [7:0] cfblk190_out1;  // uint8
  wire [7:0] cfblk25_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  wire [7:0] cfblk22_out1;  // uint8
  reg [7:0] cfblk162_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk162_out1;  // uint8
  wire [7:0] cfblk51_out1;  // uint8
  reg [7:0] emi_266_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_266_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_266_out1;  // uint8
  wire y1_30;
  wire [7:0] cfblk1_out1;  // uint8
  reg [7:0] emi_224_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_224_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_224_out1;  // uint8
  wire y1_31;
  wire [7:0] cfblk70_out1;  // uint8
  reg [7:0] cfblk165_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk165_out1;  // uint8
  wire [7:0] cfblk74_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  reg [7:0] emi_96_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_96_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_96_out1;  // uint8
  wire y1_32;
  wire [15:0] cfblk50_out1;  // ufix16_En7
  reg [15:0] emi_208_reg [0:1];  // ufix16 [2]
  wire [15:0] emi_208_reg_next [0:1];  // ufix16_En7 [2]
  wire [15:0] emi_208_out1;  // ufix16_En7
  wire [7:0] emi_207_out1;  // uint8
  wire y1_33;
  reg [7:0] cfblk79_out1;  // uint8
  reg [7:0] emi_216_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_216_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_216_out1;  // uint8
  wire y1_34;
  wire [7:0] cfblk168_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  wire [7:0] cfblk83_out2;  // uint8
  reg [7:0] cfblk174_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk174_out1;  // uint8
  wire [15:0] cfblk123_out1;  // ufix16_En7
  wire [7:0] cfblk40_out1;  // uint8
  wire [31:0] cfblk77_add_cast;  // ufix32_En7
  wire [31:0] cfblk77_add_cast_1;  // ufix32_En7
  wire [31:0] cfblk77_add_temp;  // ufix32_En7
  wire [7:0] cfblk21_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk127_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  wire [7:0] cfblk98_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  wire [7:0] cfblk70_out2;  // uint8
  wire [7:0] cfblk150_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  wire [7:0] cfblk119_out2;  // uint8
  wire [7:0] cfblk132_out2;  // uint8
  reg [7:0] cfblk167_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk167_out1;  // uint8
  wire [7:0] cfblk71_out1;  // uint8
  wire [7:0] cfblk106_out1;  // uint8
  wire [7:0] cfblk128_out1;  // uint8
  wire [7:0] cfblk81_out1;  // uint8
  reg signed [31:0] emi_192_t_0_0;  // int32
  reg signed [31:0] emi_192_t_1;  // int32
  reg signed [31:0] cfblk173_t_0_0;  // int32
  reg signed [31:0] cfblk173_t_1;  // int32
  reg signed [31:0] emi_40_t_0_0;  // int32
  reg signed [31:0] emi_40_t_1;  // int32
  reg signed [31:0] emi_160_t_0_0;  // int32
  reg signed [31:0] emi_160_t_1;  // int32
  reg signed [31:0] emi_112_t_0_0;  // int32
  reg signed [31:0] emi_112_t_1;  // int32
  reg signed [31:0] emi_120_t_0_0;  // int32
  reg signed [31:0] emi_120_t_1;  // int32
  reg signed [31:0] emi_282_t_0_0;  // int32
  reg signed [31:0] emi_282_t_1;  // int32
  reg [8:0] cfblk140_div_temp;  // ufix9
  reg [8:0] cfblk140_t_0_0;  // ufix9
  reg signed [31:0] emi_152_t_0_0;  // int32
  reg signed [31:0] emi_152_t_1;  // int32
  reg signed [31:0] cfblk163_t_0_0;  // int32
  reg signed [31:0] cfblk163_t_1;  // int32
  reg signed [31:0] cfblk171_t_0_0;  // int32
  reg signed [31:0] cfblk171_t_1;  // int32
  reg signed [31:0] cfblk156_t_0_0;  // int32
  reg signed [31:0] cfblk156_t_1;  // int32
  reg signed [31:0] emi_250_t_0_0;  // int32
  reg signed [31:0] emi_250_t_1;  // int32
  reg signed [31:0] emi_80_t_0_0;  // int32
  reg signed [31:0] emi_80_t_1;  // int32
  reg signed [31:0] emi_274_t_0_0;  // int32
  reg signed [31:0] emi_274_t_1;  // int32
  reg signed [31:0] emi_8_t_0_0;  // int32
  reg signed [31:0] emi_8_t_1;  // int32
  reg signed [31:0] emi_200_t_0_0;  // int32
  reg signed [31:0] emi_200_t_1;  // int32
  reg signed [31:0] emi_128_t_0_0;  // int32
  reg signed [31:0] emi_128_t_1;  // int32
  reg signed [31:0] emi_24_t_0_0;  // int32
  reg signed [31:0] emi_24_t_1;  // int32
  reg signed [31:0] emi_48_t_0_0;  // int32
  reg signed [31:0] emi_48_t_1;  // int32
  reg signed [31:0] emi_258_t_0_0;  // int32
  reg signed [31:0] emi_258_t_1;  // int32
  reg signed [31:0] emi_290_t_0_0;  // int32
  reg signed [31:0] emi_290_t_1;  // int32
  reg signed [31:0] emi_176_t_0_0;  // int32
  reg signed [31:0] emi_176_t_1;  // int32
  reg signed [31:0] cfblk164_t_0_0;  // int32
  reg signed [31:0] cfblk164_t_1;  // int32
  reg [8:0] cfblk141_div_temp;  // ufix9
  reg [8:0] cfblk141_t_0_0;  // ufix9
  reg signed [31:0] emi_88_t_0_0;  // int32
  reg signed [31:0] emi_88_t_1;  // int32
  reg signed [31:0] emi_72_t_0_0;  // int32
  reg signed [31:0] emi_72_t_1;  // int32
  reg signed [31:0] emi_64_t_0_0;  // int32
  reg signed [31:0] emi_64_t_1;  // int32
  reg [8:0] cfblk107_div_temp;  // ufix9
  reg [8:0] cfblk107_t_0_0;  // ufix9
  reg signed [31:0] cfblk158_t_0_0;  // int32
  reg signed [31:0] cfblk158_t_1;  // int32
  reg signed [31:0] emi_184_t_0_0;  // int32
  reg signed [31:0] emi_184_t_1;  // int32
  reg signed [31:0] emi_241_t_0_0;  // int32
  reg signed [31:0] emi_241_t_1;  // int32
  reg signed [31:0] emi_56_t_0_0;  // int32
  reg signed [31:0] emi_56_t_1;  // int32
  reg signed [31:0] emi_144_t_0_0;  // int32
  reg signed [31:0] emi_144_t_1;  // int32
  reg signed [31:0] emi_136_t_0_0;  // int32
  reg signed [31:0] emi_136_t_1;  // int32
  reg signed [31:0] cfblk161_t_0_0;  // int32
  reg signed [31:0] cfblk161_t_1;  // int32
  reg signed [31:0] cfblk160_t_0_0;  // int32
  reg signed [31:0] cfblk160_t_1;  // int32
  reg signed [31:0] emi_32_t_0_0;  // int32
  reg signed [31:0] emi_32_t_1;  // int32
  reg [8:0] cfblk109_div_temp;  // ufix9
  reg [8:0] cfblk109_t_0_0;  // ufix9
  reg signed [31:0] cfblk166_t_0_0;  // int32
  reg signed [31:0] cfblk166_t_1;  // int32
  reg signed [31:0] cfblk172_t_0_0;  // int32
  reg signed [31:0] cfblk172_t_1;  // int32
  reg signed [31:0] emi_233_t_0_0;  // int32
  reg signed [31:0] emi_233_t_1;  // int32
  reg signed [31:0] emi_16_t_0_0;  // int32
  reg signed [31:0] emi_16_t_1;  // int32
  reg signed [31:0] emi_104_t_0_0;  // int32
  reg signed [31:0] emi_104_t_1;  // int32
  reg signed [31:0] cfblk162_t_0_0;  // int32
  reg signed [31:0] cfblk162_t_1;  // int32
  reg signed [31:0] emi_266_t_0_0;  // int32
  reg signed [31:0] emi_266_t_1;  // int32
  reg signed [31:0] emi_224_t_0_0;  // int32
  reg signed [31:0] emi_224_t_1;  // int32
  reg signed [31:0] cfblk165_t_0_0;  // int32
  reg signed [31:0] cfblk165_t_1;  // int32
  reg signed [31:0] emi_96_t_0_0;  // int32
  reg signed [31:0] emi_96_t_1;  // int32
  reg signed [31:0] emi_208_t_0_0;  // int32
  reg signed [31:0] emi_208_t_1;  // int32
  reg signed [31:0] emi_216_t_0_0;  // int32
  reg signed [31:0] emi_216_t_1;  // int32
  reg [8:0] cfblk125_div_temp;  // ufix9
  reg [8:0] cfblk125_t_0_0;  // ufix9
  reg signed [31:0] cfblk174_t_0_0;  // int32
  reg signed [31:0] cfblk174_t_1;  // int32
  reg [8:0] cfblk18_div_temp;  // ufix9
  reg [8:0] cfblk18_t_0_0;  // ufix9
  reg [8:0] cfblk79_div_temp;  // ufix9
  reg [8:0] cfblk79_t_0_0;  // ufix9
  reg signed [31:0] cfblk167_t_0_0;  // int32
  reg signed [31:0] cfblk167_t_1;  // int32


  assign cfblk143_out1 = 8'b00000000;



  assign enb = clk_enable;

  assign cfblk60_const_val_1 = 8'b00000000;



  assign cfblk144_out1 = 8'b00000000;



  assign cfblk8_out1 = cfblk144_out1 | 8'b00000001;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 25
  assign count_step = 8'b00000001;



  assign count_from = 8'b00000000;



  assign count = cfblk145_out1 + count_step;



  assign need_to_wrap = cfblk145_out1 == 8'b00011001;



  assign count_value = (need_to_wrap == 1'b0 ? count :
              count_from);



  always @(posedge clk or posedge reset)
    begin : cfblk145_process
      if (reset == 1'b1) begin
        cfblk145_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk145_out1 <= count_value;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : emi_192_process
      if (reset == 1'b1) begin
        for(emi_192_t_1 = 32'sd0; emi_192_t_1 <= 32'sd1; emi_192_t_1 = emi_192_t_1 + 32'sd1) begin
          emi_192_reg[emi_192_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_192_t_0_0 = 32'sd0; emi_192_t_0_0 <= 32'sd1; emi_192_t_0_0 = emi_192_t_0_0 + 32'sd1) begin
            emi_192_reg[emi_192_t_0_0] <= emi_192_reg_next[emi_192_t_0_0];
          end
        end
      end
    end

  assign emi_192_out1 = emi_192_reg[1];
  assign emi_192_reg_next[0] = cfblk145_out1;
  assign emi_192_reg_next[1] = emi_192_reg[0];



  assign y1 = 1'b1;



  cfblk47 u_cfblk47 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_186(cfblk145_out1),  // uint8
                     .Action_Port(y1),
                     .emi_187(cfblk47_out1)  // uint8
                     );

  assign cfblk69_const_val_1 = 8'b00000000;



  assign cfblk85_const_val_1 = 8'b00000000;



  assign cfblk114_const_val_1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk173_process
      if (reset == 1'b1) begin
        for(cfblk173_t_1 = 32'sd0; cfblk173_t_1 <= 32'sd1; cfblk173_t_1 = cfblk173_t_1 + 32'sd1) begin
          cfblk173_reg[cfblk173_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk173_t_0_0 = 32'sd0; cfblk173_t_0_0 <= 32'sd1; cfblk173_t_0_0 = cfblk173_t_0_0 + 32'sd1) begin
            cfblk173_reg[cfblk173_t_0_0] <= cfblk173_reg_next[cfblk173_t_0_0];
          end
        end
      end
    end

  assign cfblk173_out1 = cfblk173_reg[1];
  assign cfblk173_reg_next[0] = cfblk38_out2;
  assign cfblk173_reg_next[1] = cfblk173_reg[0];



  always @(posedge clk or posedge reset)
    begin : emi_40_process
      if (reset == 1'b1) begin
        for(emi_40_t_1 = 32'sd0; emi_40_t_1 <= 32'sd1; emi_40_t_1 = emi_40_t_1 + 32'sd1) begin
          emi_40_reg[emi_40_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_40_t_0_0 = 32'sd0; emi_40_t_0_0 <= 32'sd1; emi_40_t_0_0 = emi_40_t_0_0 + 32'sd1) begin
            emi_40_reg[emi_40_t_0_0] <= emi_40_reg_next[emi_40_t_0_0];
          end
        end
      end
    end

  assign emi_40_out1 = emi_40_reg[1];
  assign emi_40_reg_next[0] = cfblk36_out1;
  assign emi_40_reg_next[1] = emi_40_reg[0];



  assign y1_1 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_160_process
      if (reset == 1'b1) begin
        for(emi_160_t_1 = 32'sd0; emi_160_t_1 <= 32'sd1; emi_160_t_1 = emi_160_t_1 + 32'sd1) begin
          emi_160_reg[emi_160_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_160_t_0_0 = 32'sd0; emi_160_t_0_0 <= 32'sd1; emi_160_t_0_0 = emi_160_t_0_0 + 32'sd1) begin
            emi_160_reg[emi_160_t_0_0] <= emi_160_reg_next[emi_160_t_0_0];
          end
        end
      end
    end

  assign emi_160_out1 = emi_160_reg[1];
  assign emi_160_reg_next[0] = cfblk192_out1;
  assign emi_160_reg_next[1] = emi_160_reg[0];



  assign y1_2 = emi_160_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_112_process
      if (reset == 1'b1) begin
        for(emi_112_t_1 = 32'sd0; emi_112_t_1 <= 32'sd1; emi_112_t_1 = emi_112_t_1 + 32'sd1) begin
          emi_112_reg[emi_112_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_112_t_0_0 = 32'sd0; emi_112_t_0_0 <= 32'sd1; emi_112_t_0_0 = emi_112_t_0_0 + 32'sd1) begin
            emi_112_reg[emi_112_t_0_0] <= emi_112_reg_next[emi_112_t_0_0];
          end
        end
      end
    end

  assign emi_112_out1 = emi_112_reg[1];
  assign emi_112_reg_next[0] = cfblk140_out1;
  assign emi_112_reg_next[1] = emi_112_reg[0];



  assign y1_3 = emi_112_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_120_process
      if (reset == 1'b1) begin
        for(emi_120_t_1 = 32'sd0; emi_120_t_1 <= 32'sd1; emi_120_t_1 = emi_120_t_1 + 32'sd1) begin
          emi_120_reg[emi_120_t_1] <= 8'b00000001;
        end
      end
      else begin
        if (enb) begin
          for(emi_120_t_0_0 = 32'sd0; emi_120_t_0_0 <= 32'sd1; emi_120_t_0_0 = emi_120_t_0_0 + 32'sd1) begin
            emi_120_reg[emi_120_t_0_0] <= emi_120_reg_next[emi_120_t_0_0];
          end
        end
      end
    end

  assign emi_120_out1 = emi_120_reg[1];
  assign emi_120_reg_next[0] = cfblk92_out1;
  assign emi_120_reg_next[1] = emi_120_reg[0];



  assign y1_4 = emi_120_out1 >= 8'b00000001;



  always @(posedge clk or posedge reset)
    begin : emi_282_process
      if (reset == 1'b1) begin
        for(emi_282_t_1 = 32'sd0; emi_282_t_1 <= 32'sd1; emi_282_t_1 = emi_282_t_1 + 32'sd1) begin
          emi_282_reg[emi_282_t_1] <= 8'b00000001;
        end
      end
      else begin
        if (enb) begin
          for(emi_282_t_0_0 = 32'sd0; emi_282_t_0_0 <= 32'sd1; emi_282_t_0_0 = emi_282_t_0_0 + 32'sd1) begin
            emi_282_reg[emi_282_t_0_0] <= emi_282_reg_next[emi_282_t_0_0];
          end
        end
      end
    end

  assign emi_282_out1 = emi_282_reg[1];
  assign emi_282_reg_next[0] = cfblk147_out1;
  assign emi_282_reg_next[1] = emi_282_reg[0];



  assign y1_5 = emi_282_out1 >= 8'b00000001;



  cfblk92 u_cfblk92 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_276(cfblk147_out1),  // uint8
                     .Action_Port(y1_5),
                     .emi_277(cfblk92_out1)  // uint8
                     );

  cfblk193 u_cfblk193 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_114(cfblk92_out1),  // uint8
                       .Action_Port(y1_4),
                       .emi_115(cfblk193_out1)  // uint8
                       );

  always @(cfblk193_out1, cfblk38_out2) begin
    cfblk140_div_temp = 9'b000000000;
    cfblk140_t_0_0 = 9'b000000000;
    if (cfblk38_out2 == 8'b00000000) begin
      cfblk140_out1 = 8'b11111111;
    end
    else begin
      cfblk140_t_0_0 = {1'b0, cfblk193_out1};
      cfblk140_div_temp = cfblk140_t_0_0 / cfblk38_out2;
      if (cfblk140_div_temp[8] != 1'b0) begin
        cfblk140_out1 = 8'b11111111;
      end
      else begin
        cfblk140_out1 = cfblk140_div_temp[7:0];
      end
    end
  end



  cfblk192 u_cfblk192 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_106(cfblk140_out1),  // uint8
                       .Action_Port(y1_3),
                       .emi_107(cfblk192_out1)  // uint8
                       );

  cfblk28_block u_cfblk28 (.clk(clk),
                           .reset(reset),
                           .enb(clk_enable),
                           .emi_154(cfblk192_out1),  // uint8
                           .Action_Port(y1_2),
                           .emi_155(cfblk28_out1)  // uint8
                           );

  DotProduct_block5 u_cfblk36_inst (.in1(cfblk28_out1),  // uint8
                                    .in2(cfblk75_out1),  // uint8
                                    .out1(cfblk36_out1)  // uint8
                                    );

  cfblk130_block u_cfblk130 (.clk(clk),
                             .reset(reset),
                             .enb(clk_enable),
                             .emi_34(cfblk36_out1),  // uint8
                             .Action_Port(y1_1),
                             .emi_35(cfblk130_out1)  // uint8
                             );

  assign cfblk53_out1 = (cfblk130_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : emi_152_process
      if (reset == 1'b1) begin
        for(emi_152_t_1 = 32'sd0; emi_152_t_1 <= 32'sd1; emi_152_t_1 = emi_152_t_1 + 32'sd1) begin
          emi_152_reg[emi_152_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_152_t_0_0 = 32'sd0; emi_152_t_0_0 <= 32'sd1; emi_152_t_0_0 = emi_152_t_0_0 + 32'sd1) begin
            emi_152_reg[emi_152_t_0_0] <= emi_152_reg_next[emi_152_t_0_0];
          end
        end
      end
    end

  assign emi_152_out1 = emi_152_reg[1];
  assign emi_152_reg_next[0] = cfblk119_out1;
  assign emi_152_reg_next[1] = emi_152_reg[0];



  assign y1_6 = 1'b1;



  cfblk27 u_cfblk27 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_146(cfblk119_out1),  // uint8
                     .Action_Port(y1_6),
                     .emi_147(cfblk27_out1)  // uint8
                     );

  assign cfblk129_out1 = cfblk27_out1 + cfblk53_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk163_process
      if (reset == 1'b1) begin
        for(cfblk163_t_1 = 32'sd0; cfblk163_t_1 <= 32'sd1; cfblk163_t_1 = cfblk163_t_1 + 32'sd1) begin
          cfblk163_reg[cfblk163_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk163_t_0_0 = 32'sd0; cfblk163_t_0_0 <= 32'sd1; cfblk163_t_0_0 = cfblk163_t_0_0 + 32'sd1) begin
            cfblk163_reg[cfblk163_t_0_0] <= cfblk163_reg_next[cfblk163_t_0_0];
          end
        end
      end
    end

  assign cfblk163_out1 = cfblk163_reg[1];
  assign cfblk163_reg_next[0] = cfblk129_out1;
  assign cfblk163_reg_next[1] = cfblk163_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        for(cfblk171_t_1 = 32'sd0; cfblk171_t_1 <= 32'sd1; cfblk171_t_1 = cfblk171_t_1 + 32'sd1) begin
          cfblk171_reg[cfblk171_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk171_t_0_0 = 32'sd0; cfblk171_t_0_0 <= 32'sd1; cfblk171_t_0_0 = cfblk171_t_0_0 + 32'sd1) begin
            cfblk171_reg[cfblk171_t_0_0] <= cfblk171_reg_next[cfblk171_t_0_0];
          end
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk9_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk156_process
      if (reset == 1'b1) begin
        for(cfblk156_t_1 = 32'sd0; cfblk156_t_1 <= 32'sd1; cfblk156_t_1 = cfblk156_t_1 + 32'sd1) begin
          cfblk156_reg[cfblk156_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk156_t_0_0 = 32'sd0; cfblk156_t_0_0 <= 32'sd1; cfblk156_t_0_0 = cfblk156_t_0_0 + 32'sd1) begin
            cfblk156_reg[cfblk156_t_0_0] <= cfblk156_reg_next[cfblk156_t_0_0];
          end
        end
      end
    end

  assign cfblk156_out1 = cfblk156_reg[1];
  assign cfblk156_reg_next[0] = cfblk136_out1;
  assign cfblk156_reg_next[1] = cfblk156_reg[0];



  assign cfblk116_out1 = cfblk125_out1 - cfblk156_out1;



  cfblk19 u_cfblk19 (.u(cfblk116_out1),  // uint8
                     .y(cfblk19_out1)  // uint8
                     );

  always @(posedge clk or posedge reset)
    begin : emi_250_process
      if (reset == 1'b1) begin
        for(emi_250_t_1 = 32'sd0; emi_250_t_1 <= 32'sd1; emi_250_t_1 = emi_250_t_1 + 32'sd1) begin
          emi_250_reg[emi_250_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_250_t_0_0 = 32'sd0; emi_250_t_0_0 <= 32'sd1; emi_250_t_0_0 = emi_250_t_0_0 + 32'sd1) begin
            emi_250_reg[emi_250_t_0_0] <= emi_250_reg_next[emi_250_t_0_0];
          end
        end
      end
    end

  assign emi_250_out1 = emi_250_reg[1];
  assign emi_250_reg_next[0] = cfblk114_out1;
  assign emi_250_reg_next[1] = emi_250_reg[0];



  assign y1_7 = emi_250_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_80_process
      if (reset == 1'b1) begin
        for(emi_80_t_1 = 32'sd0; emi_80_t_1 <= 32'sd1; emi_80_t_1 = emi_80_t_1 + 32'sd1) begin
          emi_80_reg[emi_80_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_80_t_0_0 = 32'sd0; emi_80_t_0_0 <= 32'sd1; emi_80_t_0_0 = emi_80_t_0_0 + 32'sd1) begin
            emi_80_reg[emi_80_t_0_0] <= emi_80_reg_next[emi_80_t_0_0];
          end
        end
      end
    end

  assign emi_80_out1 = emi_80_reg[1];
  assign emi_80_reg_next[0] = cfblk181_out1;
  assign emi_80_reg_next[1] = emi_80_reg[0];



  assign y1_8 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_274_process
      if (reset == 1'b1) begin
        for(emi_274_t_1 = 32'sd0; emi_274_t_1 <= 32'sd1; emi_274_t_1 = emi_274_t_1 + 32'sd1) begin
          emi_274_reg[emi_274_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_274_t_0_0 = 32'sd0; emi_274_t_0_0 <= 32'sd1; emi_274_t_0_0 = emi_274_t_0_0 + 32'sd1) begin
            emi_274_reg[emi_274_t_0_0] <= emi_274_reg_next[emi_274_t_0_0];
          end
        end
      end
    end

  assign emi_274_out1 = emi_274_reg[1];
  assign emi_274_reg_next[0] = cfblk18_out1;
  assign emi_274_reg_next[1] = emi_274_reg[0];



  assign y1_9 = emi_274_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_8_process
      if (reset == 1'b1) begin
        for(emi_8_t_1 = 32'sd0; emi_8_t_1 <= 32'sd1; emi_8_t_1 = emi_8_t_1 + 32'sd1) begin
          emi_8_reg[emi_8_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_8_t_0_0 = 32'sd0; emi_8_t_0_0 <= 32'sd1; emi_8_t_0_0 = emi_8_t_0_0 + 32'sd1) begin
            emi_8_reg[emi_8_t_0_0] <= emi_8_reg_next[emi_8_t_0_0];
          end
        end
      end
    end

  assign emi_8_out1 = emi_8_reg[1];
  assign emi_8_reg_next[0] = cfblk68_out1;
  assign emi_8_reg_next[1] = emi_8_reg[0];



  assign y1_10 = 1'b1;



  cfblk108 u_cfblk108 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_1(cfblk68_out1),  // uint8
                       .Action_Port(y1_10),
                       .emi_3(cfblk108_out2)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : emi_200_process
      if (reset == 1'b1) begin
        for(emi_200_t_1 = 32'sd0; emi_200_t_1 <= 32'sd1; emi_200_t_1 = emi_200_t_1 + 32'sd1) begin
          emi_200_reg[emi_200_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_200_t_0_0 = 32'sd0; emi_200_t_0_0 <= 32'sd1; emi_200_t_0_0 = emi_200_t_0_0 + 32'sd1) begin
            emi_200_reg[emi_200_t_0_0] <= emi_200_reg_next[emi_200_t_0_0];
          end
        end
      end
    end

  assign emi_200_out1 = emi_200_reg[1];
  assign emi_200_reg_next[0] = cfblk94_out1;
  assign emi_200_reg_next[1] = emi_200_reg[0];



  assign y1_11 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_128_process
      if (reset == 1'b1) begin
        for(emi_128_t_1 = 32'sd0; emi_128_t_1 <= 32'sd1; emi_128_t_1 = emi_128_t_1 + 32'sd1) begin
          emi_128_reg[emi_128_t_1] <= 8'b00000001;
        end
      end
      else begin
        if (enb) begin
          for(emi_128_t_0_0 = 32'sd0; emi_128_t_0_0 <= 32'sd1; emi_128_t_0_0 = emi_128_t_0_0 + 32'sd1) begin
            emi_128_reg[emi_128_t_0_0] <= emi_128_reg_next[emi_128_t_0_0];
          end
        end
      end
    end

  assign emi_128_out1 = emi_128_reg[1];
  assign emi_128_reg_next[0] = cfblk77_out1;
  assign emi_128_reg_next[1] = emi_128_reg[0];



  assign y1_12 = emi_128_out1 >= 8'b00000001;



  always @(posedge clk or posedge reset)
    begin : emi_24_process
      if (reset == 1'b1) begin
        for(emi_24_t_1 = 32'sd0; emi_24_t_1 <= 32'sd1; emi_24_t_1 = emi_24_t_1 + 32'sd1) begin
          emi_24_reg[emi_24_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_24_t_0_0 = 32'sd0; emi_24_t_0_0 <= 32'sd1; emi_24_t_0_0 = emi_24_t_0_0 + 32'sd1) begin
            emi_24_reg[emi_24_t_0_0] <= emi_24_reg_next[emi_24_t_0_0];
          end
        end
      end
    end

  assign emi_24_out1 = emi_24_reg[1];
  assign emi_24_reg_next[0] = cfblk68_out1;
  assign emi_24_reg_next[1] = emi_24_reg[0];



  assign y1_13 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_48_process
      if (reset == 1'b1) begin
        for(emi_48_t_1 = 32'sd0; emi_48_t_1 <= 32'sd1; emi_48_t_1 = emi_48_t_1 + 32'sd1) begin
          emi_48_reg[emi_48_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_48_t_0_0 = 32'sd0; emi_48_t_0_0 <= 32'sd1; emi_48_t_0_0 = emi_48_t_0_0 + 32'sd1) begin
            emi_48_reg[emi_48_t_0_0] <= emi_48_reg_next[emi_48_t_0_0];
          end
        end
      end
    end

  assign emi_48_out1 = emi_48_reg[1];
  assign emi_48_reg_next[0] = cfblk112_out1;
  assign emi_48_reg_next[1] = emi_48_reg[0];



  assign y1_14 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_258_process
      if (reset == 1'b1) begin
        for(emi_258_t_1 = 32'sd0; emi_258_t_1 <= 32'sd1; emi_258_t_1 = emi_258_t_1 + 32'sd1) begin
          emi_258_reg[emi_258_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_258_t_0_0 = 32'sd0; emi_258_t_0_0 <= 32'sd1; emi_258_t_0_0 = emi_258_t_0_0 + 32'sd1) begin
            emi_258_reg[emi_258_t_0_0] <= emi_258_reg_next[emi_258_t_0_0];
          end
        end
      end
    end

  assign emi_258_out1 = emi_258_reg[1];
  assign emi_258_reg_next[0] = cfblk96_out1;
  assign emi_258_reg_next[1] = emi_258_reg[0];



  assign y1_15 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_290_process
      if (reset == 1'b1) begin
        for(emi_290_t_1 = 32'sd0; emi_290_t_1 <= 32'sd1; emi_290_t_1 = emi_290_t_1 + 32'sd1) begin
          emi_290_reg[emi_290_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_290_t_0_0 = 32'sd0; emi_290_t_0_0 <= 32'sd1; emi_290_t_0_0 = emi_290_t_0_0 + 32'sd1) begin
            emi_290_reg[emi_290_t_0_0] <= emi_290_reg_next[emi_290_t_0_0];
          end
        end
      end
    end

  assign emi_290_out1 = emi_290_reg[1];
  assign emi_290_reg_next[0] = cfblk103_out1;
  assign emi_290_reg_next[1] = emi_290_reg[0];



  assign y1_16 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_176_process
      if (reset == 1'b1) begin
        for(emi_176_t_1 = 32'sd0; emi_176_t_1 <= 32'sd1; emi_176_t_1 = emi_176_t_1 + 32'sd1) begin
          emi_176_reg[emi_176_t_1] <= 8'b00000001;
        end
      end
      else begin
        if (enb) begin
          for(emi_176_t_0_0 = 32'sd0; emi_176_t_0_0 <= 32'sd1; emi_176_t_0_0 = emi_176_t_0_0 + 32'sd1) begin
            emi_176_reg[emi_176_t_0_0] <= emi_176_reg_next[emi_176_t_0_0];
          end
        end
      end
    end

  assign emi_176_out1 = emi_176_reg[1];
  assign emi_176_reg_next[0] = cfblk147_out1;
  assign emi_176_reg_next[1] = emi_176_reg[0];



  assign y1_17 = emi_176_out1 >= 8'b00000001;



  assign cfblk3_relop1 = cfblk39_out2 <= cfblk60_out1;



  assign cfblk3_relop1_dtc = {7'b0, cfblk3_relop1};



  cfblk147 u_cfblk147 (.In1(cfblk3_relop1_dtc),  // uint8
                       .Out1(cfblk147_out1)  // uint8
                       );

  cfblk32 u_cfblk32 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_170(cfblk147_out1),  // uint8
                     .Action_Port(y1_17),
                     .emi_171(cfblk32_out1)  // uint8
                     );

  always @(posedge clk or posedge reset)
    begin : cfblk164_process
      if (reset == 1'b1) begin
        for(cfblk164_t_1 = 32'sd0; cfblk164_t_1 <= 32'sd1; cfblk164_t_1 = cfblk164_t_1 + 32'sd1) begin
          cfblk164_reg[cfblk164_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk164_t_0_0 = 32'sd0; cfblk164_t_0_0 <= 32'sd1; cfblk164_t_0_0 = cfblk164_t_0_0 + 32'sd1) begin
            cfblk164_reg[cfblk164_t_0_0] <= cfblk164_reg_next[cfblk164_t_0_0];
          end
        end
      end
    end

  assign cfblk164_out1 = cfblk164_reg[1];
  assign cfblk164_reg_next[0] = cfblk32_out1;
  assign cfblk164_reg_next[1] = cfblk164_reg[0];



  always @(cfblk164_out1, cfblk17_out1) begin
    cfblk141_div_temp = 9'b000000000;
    cfblk141_t_0_0 = 9'b000000000;
    if (cfblk17_out1 == 8'b00000000) begin
      cfblk141_out1 = 8'b11111111;
    end
    else begin
      cfblk141_t_0_0 = {1'b0, cfblk164_out1};
      cfblk141_div_temp = cfblk141_t_0_0 / cfblk17_out1;
      if (cfblk141_div_temp[8] != 1'b0) begin
        cfblk141_out1 = 8'b11111111;
      end
      else begin
        cfblk141_out1 = cfblk141_div_temp[7:0];
      end
    end
  end



  assign cfblk118_out1 = cfblk141_out1 + cfblk17_out1;



  assign cfblk23_out1 = cfblk54_out2;
  assign cfblk23_out2 = 8'b00000000;



  assign cfblk69_out1 = cfblk23_out2 + cfblk69_const_val_1;



  DotProduct_block4 u_cfblk30_inst (.in1(cfblk69_out1),  // uint8
                                    .in2(cfblk118_out1),  // uint8
                                    .out1(cfblk30_out1)  // uint8
                                    );

  assign cfblk103_out1 = cfblk47_out1 - cfblk30_out1;



  cfblk96 u_cfblk96 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_284(cfblk103_out1),  // uint8
                     .Action_Port(y1_16),
                     .emi_285(cfblk96_out1)  // uint8
                     );

  cfblk72 u_cfblk72 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_252(cfblk96_out1),  // uint8
                     .Action_Port(y1_15),
                     .emi_253(cfblk72_out1)  // uint8
                     );

  assign cfblk29_out1 = cfblk72_out1 - cfblk23_out1;



  cfblk146 u_cfblk146 (.In1(cfblk29_out1),  // uint8
                       .Out1(cfblk146_out1)  // uint8
                       );

  assign cfblk112_out1 = (cfblk146_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk136 u_cfblk136 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_42(cfblk112_out1),  // uint8
                       .Action_Port(y1_14),
                       .emi_43(cfblk136_out1)  // uint8
                       );

  assign cfblk17_out1 = cfblk55_out1;
  assign cfblk17_out2 = 8'b00000000;



  cfblk9 u_cfblk9 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk17_out2),  // uint8
                   .Y(cfblk9_out1)  // uint8
                   );

  DotProduct_block1 u_cfblk131_inst (.in1(cfblk9_out1),  // uint8
                                     .in2(cfblk180_out1),  // uint8
                                     .out1(cfblk131_out1)  // uint8
                                     );

  always @(posedge clk or posedge reset)
    begin : emi_88_process
      if (reset == 1'b1) begin
        for(emi_88_t_1 = 32'sd0; emi_88_t_1 <= 32'sd1; emi_88_t_1 = emi_88_t_1 + 32'sd1) begin
          emi_88_reg[emi_88_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_88_t_0_0 = 32'sd0; emi_88_t_0_0 <= 32'sd1; emi_88_t_0_0 = emi_88_t_0_0 + 32'sd1) begin
            emi_88_reg[emi_88_t_0_0] <= emi_88_reg_next[emi_88_t_0_0];
          end
        end
      end
    end

  assign emi_88_out1 = emi_88_reg[1];
  assign emi_88_reg_next[0] = cfblk101_out1;
  assign emi_88_reg_next[1] = emi_88_reg[0];



  assign y1_18 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_72_process
      if (reset == 1'b1) begin
        for(emi_72_t_1 = 32'sd0; emi_72_t_1 <= 32'sd1; emi_72_t_1 = emi_72_t_1 + 32'sd1) begin
          emi_72_reg[emi_72_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_72_t_0_0 = 32'sd0; emi_72_t_0_0 <= 32'sd1; emi_72_t_0_0 = emi_72_t_0_0 + 32'sd1) begin
            emi_72_reg[emi_72_t_0_0] <= emi_72_reg_next[emi_72_t_0_0];
          end
        end
      end
    end

  assign emi_72_out1 = emi_72_reg[1];
  assign emi_72_reg_next[0] = cfblk134_out1;
  assign emi_72_reg_next[1] = emi_72_reg[0];



  assign y1_19 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_64_process
      if (reset == 1'b1) begin
        for(emi_64_t_1 = 32'sd0; emi_64_t_1 <= 32'sd1; emi_64_t_1 = emi_64_t_1 + 32'sd1) begin
          emi_64_reg[emi_64_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_64_t_0_0 = 32'sd0; emi_64_t_0_0 <= 32'sd1; emi_64_t_0_0 = emi_64_t_0_0 + 32'sd1) begin
            emi_64_reg[emi_64_t_0_0] <= emi_64_reg_next[emi_64_t_0_0];
          end
        end
      end
    end

  assign emi_64_out1 = emi_64_reg[1];
  assign emi_64_reg_next[0] = cfblk107_out1;
  assign emi_64_reg_next[1] = emi_64_reg[0];



  assign y1_20 = 1'b1;



  always @(cfblk110_out1, cfblk143_out1) begin
    cfblk107_div_temp = 9'b000000000;
    cfblk107_t_0_0 = 9'b000000000;
    if (cfblk110_out1 == 8'b00000000) begin
      cfblk107_out1 = 8'b11111111;
    end
    else begin
      cfblk107_t_0_0 = {1'b0, cfblk143_out1};
      cfblk107_div_temp = cfblk107_t_0_0 / cfblk110_out1;
      if (cfblk107_div_temp[8] != 1'b0) begin
        cfblk107_out1 = 8'b11111111;
      end
      else begin
        cfblk107_out1 = cfblk107_div_temp[7:0];
      end
    end
  end



  cfblk14 u_cfblk14 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_58(cfblk107_out1),  // uint8
                     .Action_Port(y1_20),
                     .emi_59(cfblk14_out1)  // uint8
                     );

  assign cfblk15_out1 = cfblk90_out1 + cfblk14_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk158_process
      if (reset == 1'b1) begin
        for(cfblk158_t_1 = 32'sd0; cfblk158_t_1 <= 32'sd1; cfblk158_t_1 = cfblk158_t_1 + 32'sd1) begin
          cfblk158_reg[cfblk158_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk158_t_0_0 = 32'sd0; cfblk158_t_0_0 <= 32'sd1; cfblk158_t_0_0 = cfblk158_t_0_0 + 32'sd1) begin
            cfblk158_reg[cfblk158_t_0_0] <= cfblk158_reg_next[cfblk158_t_0_0];
          end
        end
      end
    end

  assign cfblk158_out1 = cfblk158_reg[1];
  assign cfblk158_reg_next[0] = cfblk15_out1;
  assign cfblk158_reg_next[1] = cfblk158_reg[0];



  assign cfblk6_out1 = (&cfblk67_out1[7:0]);



  always @(posedge clk or posedge reset)
    begin : emi_184_process
      if (reset == 1'b1) begin
        for(emi_184_t_1 = 32'sd0; emi_184_t_1 <= 32'sd1; emi_184_t_1 = emi_184_t_1 + 32'sd1) begin
          emi_184_reg[emi_184_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_184_t_0_0 = 32'sd0; emi_184_t_0_0 <= 32'sd1; emi_184_t_0_0 = emi_184_t_0_0 + 32'sd1) begin
            emi_184_reg[emi_184_t_0_0] <= emi_184_reg_next[emi_184_t_0_0];
          end
        end
      end
    end

  assign emi_184_out1 = emi_184_reg[1];
  assign emi_184_reg_next[0] = cfblk20_out1;
  assign emi_184_reg_next[1] = emi_184_reg[0];



  assign y1_21 = 1'b1;



  assign dtc_out = cfblk148_out1;



  assign cfblk64_out1 = dtc_out;



  always @(posedge clk or posedge reset)
    begin : emi_241_process
      if (reset == 1'b1) begin
        for(emi_241_t_1 = 32'sd0; emi_241_t_1 <= 32'sd1; emi_241_t_1 = emi_241_t_1 + 32'sd1) begin
          emi_241_reg[emi_241_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_241_t_0_0 = 32'sd0; emi_241_t_0_0 <= 32'sd1; emi_241_t_0_0 = emi_241_t_0_0 + 32'sd1) begin
            emi_241_reg[emi_241_t_0_0] <= emi_241_reg_next[emi_241_t_0_0];
          end
        end
      end
    end

  assign emi_241_out1 = emi_241_reg[1];
  assign emi_241_reg_next[0] = cfblk88_out1;
  assign emi_241_reg_next[1] = emi_241_reg[0];



  assign y1_22 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_56_process
      if (reset == 1'b1) begin
        for(emi_56_t_1 = 32'sd0; emi_56_t_1 <= 32'sd1; emi_56_t_1 = emi_56_t_1 + 32'sd1) begin
          emi_56_reg[emi_56_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_56_t_0_0 = 32'sd0; emi_56_t_0_0 <= 32'sd1; emi_56_t_0_0 = emi_56_t_0_0 + 32'sd1) begin
            emi_56_reg[emi_56_t_0_0] <= emi_56_reg_next[emi_56_t_0_0];
          end
        end
      end
    end

  assign emi_56_out1 = emi_56_reg[1];
  assign emi_56_reg_next[0] = cfblk137_out1;
  assign emi_56_reg_next[1] = emi_56_reg[0];



  assign y1_23 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_144_process
      if (reset == 1'b1) begin
        for(emi_144_t_1 = 32'sd0; emi_144_t_1 <= 32'sd1; emi_144_t_1 = emi_144_t_1 + 32'sd1) begin
          emi_144_reg[emi_144_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_144_t_0_0 = 32'sd0; emi_144_t_0_0 <= 32'sd1; emi_144_t_0_0 = emi_144_t_0_0 + 32'sd1) begin
            emi_144_reg[emi_144_t_0_0] <= emi_144_reg_next[emi_144_t_0_0];
          end
        end
      end
    end

  assign emi_144_out1 = emi_144_reg[1];
  assign emi_144_reg_next[0] = cfblk95_out1;
  assign emi_144_reg_next[1] = emi_144_reg[0];



  assign y1_24 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_136_process
      if (reset == 1'b1) begin
        for(emi_136_t_1 = 32'sd0; emi_136_t_1 <= 32'sd1; emi_136_t_1 = emi_136_t_1 + 32'sd1) begin
          emi_136_reg[emi_136_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_136_t_0_0 = 32'sd0; emi_136_t_0_0 <= 32'sd1; emi_136_t_0_0 = emi_136_t_0_0 + 32'sd1) begin
            emi_136_reg[emi_136_t_0_0] <= emi_136_reg_next[emi_136_t_0_0];
          end
        end
      end
    end

  assign emi_136_out1 = emi_136_reg[1];
  assign emi_136_reg_next[0] = cfblk135_out1;
  assign emi_136_reg_next[1] = emi_136_reg[0];



  assign y1_25 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : cfblk161_process
      if (reset == 1'b1) begin
        for(cfblk161_t_1 = 32'sd0; cfblk161_t_1 <= 32'sd1; cfblk161_t_1 = cfblk161_t_1 + 32'sd1) begin
          cfblk161_reg[cfblk161_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk161_t_0_0 = 32'sd0; cfblk161_t_0_0 <= 32'sd1; cfblk161_t_0_0 = cfblk161_t_0_0 + 32'sd1) begin
            cfblk161_reg[cfblk161_t_0_0] <= cfblk161_reg_next[cfblk161_t_0_0];
          end
        end
      end
    end

  assign cfblk161_out1 = cfblk161_reg[1];
  assign cfblk161_reg_next[0] = cfblk120_out1;
  assign cfblk161_reg_next[1] = cfblk161_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk160_process
      if (reset == 1'b1) begin
        for(cfblk160_t_1 = 32'sd0; cfblk160_t_1 <= 32'sd1; cfblk160_t_1 = cfblk160_t_1 + 32'sd1) begin
          cfblk160_reg[cfblk160_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk160_t_0_0 = 32'sd0; cfblk160_t_0_0 <= 32'sd1; cfblk160_t_0_0 = cfblk160_t_0_0 + 32'sd1) begin
            cfblk160_reg[cfblk160_t_0_0] <= cfblk160_reg_next[cfblk160_t_0_0];
          end
        end
      end
    end

  assign cfblk160_out1 = cfblk160_reg[1];
  assign cfblk160_reg_next[0] = cfblk180_out1;
  assign cfblk160_reg_next[1] = cfblk160_reg[0];



  always @(posedge clk or posedge reset)
    begin : emi_32_process
      if (reset == 1'b1) begin
        for(emi_32_t_1 = 32'sd0; emi_32_t_1 <= 32'sd1; emi_32_t_1 = emi_32_t_1 + 32'sd1) begin
          emi_32_reg[emi_32_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_32_t_0_0 = 32'sd0; emi_32_t_0_0 <= 32'sd1; emi_32_t_0_0 = emi_32_t_0_0 + 32'sd1) begin
            emi_32_reg[emi_32_t_0_0] <= emi_32_reg_next[emi_32_t_0_0];
          end
        end
      end
    end

  assign emi_32_out1 = emi_32_reg[1];
  assign emi_32_reg_next[0] = cfblk84_out1;
  assign emi_32_reg_next[1] = emi_32_reg[0];



  assign y1_26 = 1'b1;



  cfblk13_block u_cfblk13 (.clk(clk),
                           .reset(reset),
                           .enb(clk_enable),
                           .emi_26(cfblk84_out1),  // uint8
                           .Action_Port(y1_26),
                           .emi_27(cfblk13_out1)  // uint8
                           );

  assign cfblk113_out1 = cfblk13_out1 + cfblk160_out1;



  DotProduct_block2 u_cfblk135_inst (.in1(cfblk113_out1),  // uint8
                                     .in2(cfblk161_out1),  // uint8
                                     .out1(cfblk135_out1)  // uint8
                                     );

  cfblk24 u_cfblk24 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_130(cfblk135_out1),  // uint8
                     .Action_Port(y1_25),
                     .emi_131(cfblk24_out1)  // uint8
                     );

  assign dtc_out_1 = cfblk24_out1;



  assign cfblk95_out1 = dtc_out_1;



  cfblk26 u_cfblk26 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_138(cfblk95_out1),  // uint8
                     .Action_Port(y1_24),
                     .emi_139(cfblk26_out1)  // ufix16_En7
                     );

  assign dtc_out_2 = {16'b0, cfblk26_out1};



  assign cfblk137_out1 = dtc_out_2[14:7];



  cfblk138 u_cfblk138 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_50(cfblk137_out1),  // uint8
                       .Action_Port(y1_23),
                       .emi_51(cfblk138_out1)  // uint8
                       );

  cfblk80 u_cfblk80 (.u(cfblk132_out1),  // uint8
                     .y(cfblk80_out1)  // uint8
                     );

  assign cfblk52_out1 = cfblk80_out1 + cfblk119_out1;



  always @(cfblk52_out1, cfblk66_out1) begin
    cfblk109_div_temp = 9'b000000000;
    cfblk109_t_0_0 = 9'b000000000;
    if (cfblk66_out1 == 8'b00000000) begin
      cfblk109_out1 = 8'b11111111;
    end
    else begin
      cfblk109_t_0_0 = {1'b0, cfblk52_out1};
      cfblk109_div_temp = cfblk109_t_0_0 / cfblk66_out1;
      if (cfblk109_div_temp[8] != 1'b0) begin
        cfblk109_out1 = 8'b11111111;
      end
      else begin
        cfblk109_out1 = cfblk109_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk166_process
      if (reset == 1'b1) begin
        for(cfblk166_t_1 = 32'sd0; cfblk166_t_1 <= 32'sd1; cfblk166_t_1 = cfblk166_t_1 + 32'sd1) begin
          cfblk166_reg[cfblk166_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk166_t_0_0 = 32'sd0; cfblk166_t_0_0 <= 32'sd1; cfblk166_t_0_0 = cfblk166_t_0_0 + 32'sd1) begin
            cfblk166_reg[cfblk166_t_0_0] <= cfblk166_reg_next[cfblk166_t_0_0];
          end
        end
      end
    end

  assign cfblk166_out1 = cfblk166_reg[1];
  assign cfblk166_reg_next[0] = cfblk109_out1;
  assign cfblk166_reg_next[1] = cfblk166_reg[0];



  assign cfblk61_out1 = cfblk166_out1 + cfblk138_out1;



  assign cfblk38_out1 = cfblk61_out1;
  assign cfblk38_out2 = 8'b00000000;



  assign dtc_out_3 = cfblk38_out1;



  assign cfblk88_out1 = dtc_out_3;



  cfblk55 u_cfblk55 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_235(cfblk88_out1),  // uint8
                     .Action_Port(y1_22),
                     .emi_236(cfblk55_out1)  // uint8
                     );

  DotProduct_block6 u_cfblk42_inst (.in1(cfblk81_out2),  // uint8
                                    .in2(cfblk55_out1),  // uint8
                                    .out1(cfblk42_out1)  // uint8
                                    );

  always @(posedge clk or posedge reset)
    begin : cfblk172_process
      if (reset == 1'b1) begin
        for(cfblk172_t_1 = 32'sd0; cfblk172_t_1 <= 32'sd1; cfblk172_t_1 = cfblk172_t_1 + 32'sd1) begin
          cfblk172_reg[cfblk172_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk172_t_0_0 = 32'sd0; cfblk172_t_0_0 <= 32'sd1; cfblk172_t_0_0 = cfblk172_t_0_0 + 32'sd1) begin
            cfblk172_reg[cfblk172_t_0_0] <= cfblk172_reg_next[cfblk172_t_0_0];
          end
        end
      end
    end

  assign cfblk172_out1 = cfblk172_reg[1];
  assign cfblk172_reg_next[0] = cfblk42_out1;
  assign cfblk172_reg_next[1] = cfblk172_reg[0];



  DotProduct_block3 u_cfblk20_inst (.in1(cfblk172_out1),  // uint8
                                    .in2(cfblk64_out1),  // uint8
                                    .out1(cfblk20_out1)  // uint8
                                    );

  cfblk35 u_cfblk35 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_178(cfblk20_out1),  // uint8
                     .Action_Port(y1_21),
                     .emi_179(cfblk35_out1)  // uint8
                     );

  DotProduct u_cfblk102_inst (.in1(cfblk8_out1),  // uint8
                              .in2(cfblk35_out1),  // uint8
                              .out1(cfblk102_out1)  // uint8
                              );

  assign cfblk66_1 = {24'b0, cfblk102_out1};
  assign cfblk66_2 = {31'b0, cfblk6_out1};
  assign cfblk66_sub_temp = cfblk66_1 - cfblk66_2;
  assign cfblk66_out1 = cfblk66_sub_temp[7:0];



  assign cfblk115_out1 = cfblk66_out1 + cfblk158_out1;



  assign cfblk134_out1 = cfblk115_out1 + cfblk102_out1;



  cfblk101 u_cfblk101 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_66(cfblk134_out1),  // uint8
                       .Action_Port(y1_19),
                       .emi_67(cfblk101_out1)  // uint8
                       );

  cfblk84 u_cfblk84 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_82(cfblk101_out1),  // uint8
                     .Action_Port(y1_18),
                     .emi_83(cfblk84_out1)  // uint8
                     );

  cfblk151 u_cfblk151 (.In1(cfblk41_out1),  // uint8
                       .Out1(cfblk151_out1)  // uint8
                       );

  assign cfblk110_out1 = cfblk151_out1;
  assign cfblk110_out2 = 8'b00000000;



  assign cfblk48_out1 = cfblk110_out2 + cfblk89_out1;



  assign cfblk46_out1 = cfblk48_out1 - cfblk84_out1;



  assign cfblk39_out1 = cfblk46_out1;
  assign cfblk39_out2 = 8'b00000000;



  assign cfblk12_relop1 = cfblk39_out1 <= cfblk47_out1;



  assign cfblk12_relop1_dtc = {7'b0, cfblk12_relop1};



  always @(posedge clk or posedge reset)
    begin : emi_233_process
      if (reset == 1'b1) begin
        for(emi_233_t_1 = 32'sd0; emi_233_t_1 <= 32'sd1; emi_233_t_1 = emi_233_t_1 + 32'sd1) begin
          emi_233_reg[emi_233_t_1] <= 8'b00000001;
        end
      end
      else begin
        if (enb) begin
          for(emi_233_t_0_0 = 32'sd0; emi_233_t_0_0 <= 32'sd1; emi_233_t_0_0 = emi_233_t_0_0 + 32'sd1) begin
            emi_233_reg[emi_233_t_0_0] <= emi_233_reg_next[emi_233_t_0_0];
          end
        end
      end
    end

  assign emi_233_out1 = emi_233_reg[1];
  assign emi_233_reg_next[0] = cfblk75_out1;
  assign emi_233_reg_next[1] = emi_233_reg[0];



  assign y1_27 = emi_233_out1 >= 8'b00000001;



  cfblk59 u_cfblk59 (.u(cfblk133_out1),  // uint8
                     .y(cfblk59_out1)  // uint8
                     );

  assign cfblk75_out1 = (cfblk59_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk54 u_cfblk54 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_226(cfblk75_out1),  // uint8
                     .Action_Port(y1_27),
                     .emi_227(cfblk54_out1),  // uint8
                     .emi_228(cfblk54_out2)  // uint8
                     );

  assign cfblk99_out1 = cfblk54_out1 + cfblk12_relop1_dtc;



  assign cfblk120_out1 = (cfblk99_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk63_out1 = cfblk120_out1 + cfblk47_out1;



  assign cfblk60_out1 = cfblk149_out1 + cfblk60_const_val_1;



  always @(posedge clk or posedge reset)
    begin : emi_16_process
      if (reset == 1'b1) begin
        for(emi_16_t_1 = 32'sd0; emi_16_t_1 <= 32'sd1; emi_16_t_1 = emi_16_t_1 + 32'sd1) begin
          emi_16_reg[emi_16_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_16_t_0_0 = 32'sd0; emi_16_t_0_0 <= 32'sd1; emi_16_t_0_0 = emi_16_t_0_0 + 32'sd1) begin
            emi_16_reg[emi_16_t_0_0] <= emi_16_reg_next[emi_16_t_0_0];
          end
        end
      end
    end

  assign emi_16_out1 = emi_16_reg[1];
  assign emi_16_reg_next[0] = cfblk100_out1;
  assign emi_16_reg_next[1] = emi_16_reg[0];



  assign y1_28 = emi_16_out1 == 8'b11111111;



  assign cfblk100_out1 = cfblk76_out1 + cfblk149_out1;



  cfblk117_block u_cfblk117 (.clk(clk),
                             .reset(reset),
                             .enb(clk_enable),
                             .emi_10(cfblk100_out1),  // uint8
                             .Action_Port(y1_28),
                             .emi_11(cfblk117_out1)  // uint8
                             );

  assign cfblk37_out1 = cfblk117_out1 - cfblk60_out1;



  cfblk111 u_cfblk111 (.u(cfblk37_out1),  // uint8
                       .y(cfblk111_out1)  // uint8
                       );

  assign cfblk89_out1 = (cfblk111_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : emi_104_process
      if (reset == 1'b1) begin
        for(emi_104_t_1 = 32'sd0; emi_104_t_1 <= 32'sd1; emi_104_t_1 = emi_104_t_1 + 32'sd1) begin
          emi_104_reg[emi_104_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_104_t_0_0 = 32'sd0; emi_104_t_0_0 <= 32'sd1; emi_104_t_0_0 = emi_104_t_0_0 + 32'sd1) begin
            emi_104_reg[emi_104_t_0_0] <= emi_104_reg_next[emi_104_t_0_0];
          end
        end
      end
    end

  assign emi_104_out1 = emi_104_reg[1];
  assign emi_104_reg_next[0] = cfblk76_out1;
  assign emi_104_reg_next[1] = emi_104_reg[0];



  assign y1_29 = 1'b1;



  cfblk190 u_cfblk190 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_98(cfblk76_out1),  // uint8
                       .Action_Port(y1_29),
                       .emi_99(cfblk190_out1)  // uint8
                       );

  assign cfblk25_out1 = cfblk190_out1 + cfblk89_out1;



  DotProduct_block7 u_cfblk44_inst (.in1(cfblk25_out1),  // uint8
                                    .in2(cfblk63_out1),  // uint8
                                    .out1(cfblk44_out1)  // uint8
                                    );

  assign cfblk22_out1 = cfblk44_out1 + cfblk131_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk162_process
      if (reset == 1'b1) begin
        for(cfblk162_t_1 = 32'sd0; cfblk162_t_1 <= 32'sd1; cfblk162_t_1 = cfblk162_t_1 + 32'sd1) begin
          cfblk162_reg[cfblk162_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk162_t_0_0 = 32'sd0; cfblk162_t_0_0 <= 32'sd1; cfblk162_t_0_0 = cfblk162_t_0_0 + 32'sd1) begin
            cfblk162_reg[cfblk162_t_0_0] <= cfblk162_reg_next[cfblk162_t_0_0];
          end
        end
      end
    end

  assign cfblk162_out1 = cfblk162_reg[1];
  assign cfblk162_reg_next[0] = cfblk22_out1;
  assign cfblk162_reg_next[1] = cfblk162_reg[0];



  assign cfblk41_out1 = cfblk162_out1 - cfblk136_out1;



  always @(posedge clk or posedge reset)
    begin : emi_266_process
      if (reset == 1'b1) begin
        for(emi_266_t_1 = 32'sd0; emi_266_t_1 <= 32'sd1; emi_266_t_1 = emi_266_t_1 + 32'sd1) begin
          emi_266_reg[emi_266_t_1] <= 8'b00000001;
        end
      end
      else begin
        if (enb) begin
          for(emi_266_t_0_0 = 32'sd0; emi_266_t_0_0 <= 32'sd1; emi_266_t_0_0 = emi_266_t_0_0 + 32'sd1) begin
            emi_266_reg[emi_266_t_0_0] <= emi_266_reg_next[emi_266_t_0_0];
          end
        end
      end
    end

  assign emi_266_out1 = emi_266_reg[1];
  assign emi_266_reg_next[0] = cfblk51_out1;
  assign emi_266_reg_next[1] = emi_266_reg[0];



  assign y1_30 = emi_266_out1 >= 8'b00000001;



  always @(posedge clk or posedge reset)
    begin : emi_224_process
      if (reset == 1'b1) begin
        for(emi_224_t_1 = 32'sd0; emi_224_t_1 <= 32'sd1; emi_224_t_1 = emi_224_t_1 + 32'sd1) begin
          emi_224_reg[emi_224_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_224_t_0_0 = 32'sd0; emi_224_t_0_0 <= 32'sd1; emi_224_t_0_0 = emi_224_t_0_0 + 32'sd1) begin
            emi_224_reg[emi_224_t_0_0] <= emi_224_reg_next[emi_224_t_0_0];
          end
        end
      end
    end

  assign emi_224_out1 = emi_224_reg[1];
  assign emi_224_reg_next[0] = cfblk1_out1;
  assign emi_224_reg_next[1] = emi_224_reg[0];



  assign y1_31 = 1'b1;



  cfblk149 u_cfblk149 (.In1(cfblk70_out1),  // uint8
                       .Out1(cfblk149_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk165_process
      if (reset == 1'b1) begin
        for(cfblk165_t_1 = 32'sd0; cfblk165_t_1 <= 32'sd1; cfblk165_t_1 = cfblk165_t_1 + 32'sd1) begin
          cfblk165_reg[cfblk165_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk165_t_0_0 = 32'sd0; cfblk165_t_0_0 <= 32'sd1; cfblk165_t_0_0 = cfblk165_t_0_0 + 32'sd1) begin
            cfblk165_reg[cfblk165_t_0_0] <= cfblk165_reg_next[cfblk165_t_0_0];
          end
        end
      end
    end

  assign cfblk165_out1 = cfblk165_reg[1];
  assign cfblk165_reg_next[0] = cfblk149_out1;
  assign cfblk165_reg_next[1] = cfblk165_reg[0];



  assign cfblk67_out1 = cfblk74_out1 - cfblk165_out1;



  always @(posedge clk or posedge reset)
    begin : emi_96_process
      if (reset == 1'b1) begin
        for(emi_96_t_1 = 32'sd0; emi_96_t_1 <= 32'sd1; emi_96_t_1 = emi_96_t_1 + 32'sd1) begin
          emi_96_reg[emi_96_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_96_t_0_0 = 32'sd0; emi_96_t_0_0 <= 32'sd1; emi_96_t_0_0 = emi_96_t_0_0 + 32'sd1) begin
            emi_96_reg[emi_96_t_0_0] <= emi_96_reg_next[emi_96_t_0_0];
          end
        end
      end
    end

  assign emi_96_out1 = emi_96_reg[1];
  assign emi_96_reg_next[0] = cfblk5_out1;
  assign emi_96_reg_next[1] = emi_96_reg[0];



  assign y1_32 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_208_process
      if (reset == 1'b1) begin
        for(emi_208_t_1 = 32'sd0; emi_208_t_1 <= 32'sd1; emi_208_t_1 = emi_208_t_1 + 32'sd1) begin
          emi_208_reg[emi_208_t_1] <= 16'b0111111110000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_208_t_0_0 = 32'sd0; emi_208_t_0_0 <= 32'sd1; emi_208_t_0_0 = emi_208_t_0_0 + 32'sd1) begin
            emi_208_reg[emi_208_t_0_0] <= emi_208_reg_next[emi_208_t_0_0];
          end
        end
      end
    end

  assign emi_208_out1 = emi_208_reg[1];
  assign emi_208_reg_next[0] = cfblk50_out1;
  assign emi_208_reg_next[1] = emi_208_reg[0];



  assign emi_207_out1 = emi_208_out1[14:7];



  assign y1_33 = emi_207_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_216_process
      if (reset == 1'b1) begin
        for(emi_216_t_1 = 32'sd0; emi_216_t_1 <= 32'sd1; emi_216_t_1 = emi_216_t_1 + 32'sd1) begin
          emi_216_reg[emi_216_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_216_t_0_0 = 32'sd0; emi_216_t_0_0 <= 32'sd1; emi_216_t_0_0 = emi_216_t_0_0 + 32'sd1) begin
            emi_216_reg[emi_216_t_0_0] <= emi_216_reg_next[emi_216_t_0_0];
          end
        end
      end
    end

  assign emi_216_out1 = emi_216_reg[1];
  assign emi_216_reg_next[0] = cfblk79_out1;
  assign emi_216_reg_next[1] = emi_216_reg[0];



  assign y1_34 = emi_216_out1 == 8'b11111111;



  cfblk50 u_cfblk50 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_210(cfblk79_out1),  // uint8
                     .Action_Port(y1_34),
                     .emi_211(cfblk50_out1)  // ufix16_En7
                     );

  cfblk5_block u_cfblk5 (.clk(clk),
                         .reset(reset),
                         .enb(clk_enable),
                         .emi_202(cfblk50_out1),  // ufix16_En7
                         .Action_Port(y1_33),
                         .emi_203(cfblk5_out1)  // uint8
                         );

  cfblk168 u_cfblk168 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_90(cfblk5_out1),  // uint8
                       .Action_Port(y1_32),
                       .emi_91(cfblk168_out1)  // uint8
                       );

  always @(cfblk168_out1, cfblk67_out1) begin
    cfblk125_div_temp = 9'b000000000;
    cfblk125_t_0_0 = 9'b000000000;
    if (cfblk67_out1 == 8'b00000000) begin
      cfblk125_out1 = 8'b11111111;
    end
    else begin
      cfblk125_t_0_0 = {1'b0, cfblk168_out1};
      cfblk125_div_temp = cfblk125_t_0_0 / cfblk67_out1;
      if (cfblk125_div_temp[8] != 1'b0) begin
        cfblk125_out1 = 8'b11111111;
      end
      else begin
        cfblk125_out1 = cfblk125_div_temp[7:0];
      end
    end
  end



  cfblk10 u_cfblk10 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .U(cfblk125_out1),  // uint8
                     .Y(cfblk10_out1)  // uint8
                     );

  assign cfblk83_out1 = cfblk10_out1;
  assign cfblk83_out2 = 8'b00000000;



  assign cfblk133_out1 = (cfblk83_out2 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk174_process
      if (reset == 1'b1) begin
        for(cfblk174_t_1 = 32'sd0; cfblk174_t_1 <= 32'sd1; cfblk174_t_1 = cfblk174_t_1 + 32'sd1) begin
          cfblk174_reg[cfblk174_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk174_t_0_0 = 32'sd0; cfblk174_t_0_0 <= 32'sd1; cfblk174_t_0_0 = cfblk174_t_0_0 + 32'sd1) begin
            cfblk174_reg[cfblk174_t_0_0] <= cfblk174_reg_next[cfblk174_t_0_0];
          end
        end
      end
    end

  assign cfblk174_out1 = cfblk174_reg[1];
  assign cfblk174_reg_next[0] = cfblk133_out1;
  assign cfblk174_reg_next[1] = cfblk174_reg[0];



  cfblk1 u_cfblk1 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk174_out1),  // uint8
                   .Y(cfblk1_out1)  // uint8
                   );

  cfblk51_block u_cfblk51 (.clk(clk),
                           .reset(reset),
                           .enb(clk_enable),
                           .emi_218(cfblk1_out1),  // uint8
                           .Action_Port(y1_31),
                           .emi_219(cfblk51_out1)  // uint8
                           );

  cfblk74 u_cfblk74 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_260(cfblk51_out1),  // uint8
                     .Action_Port(y1_30),
                     .emi_261(cfblk74_out1)  // uint8
                     );

  assign cfblk68_out1 = cfblk74_out1 + cfblk41_out1;



  cfblk123 u_cfblk123 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_18(cfblk68_out1),  // uint8
                       .Action_Port(y1_13),
                       .emi_19(cfblk123_out1)  // ufix16_En7
                       );

  assign cfblk77_add_cast = {16'b0, cfblk123_out1};
  assign cfblk77_add_cast_1 = {17'b0, {cfblk40_out1, 7'b0000000}};
  assign cfblk77_add_temp = cfblk77_add_cast + cfblk77_add_cast_1;
  assign cfblk77_out1 = cfblk77_add_temp[14:7];



  cfblk21_block u_cfblk21 (.clk(clk),
                           .reset(reset),
                           .enb(clk_enable),
                           .emi_122(cfblk77_out1),  // uint8
                           .Action_Port(y1_12),
                           .emi_123(cfblk21_out1)  // uint8
                           );

  assign dtc_out_4 = cfblk21_out1;



  assign cfblk127_out1 = dtc_out_4;



  assign cfblk90_out1 = cfblk127_out1 + cfblk110_out1;



  assign cfblk85_out1 = cfblk90_out1 + cfblk85_const_val_1;



  assign cfblk98_out1 = cfblk85_out1 + cfblk47_out1;



  DotProduct_block8 u_cfblk94_inst (.in1(cfblk143_out1),  // uint8
                                    .in2(cfblk98_out1),  // uint8
                                    .out1(cfblk94_out1)  // uint8
                                    );

  cfblk2_block u_cfblk2 (.clk(clk),
                         .reset(reset),
                         .enb(clk_enable),
                         .emi_194(cfblk94_out1),  // uint8
                         .Action_Port(y1_11),
                         .emi_195(cfblk2_out1)  // uint8
                         );

  always @(cfblk108_out2, cfblk2_out1) begin
    cfblk18_div_temp = 9'b000000000;
    cfblk18_t_0_0 = 9'b000000000;
    if (cfblk108_out2 == 8'b00000000) begin
      cfblk18_out1 = 8'b11111111;
    end
    else begin
      cfblk18_t_0_0 = {1'b0, cfblk2_out1};
      cfblk18_div_temp = cfblk18_t_0_0 / cfblk108_out2;
      if (cfblk18_div_temp[8] != 1'b0) begin
        cfblk18_out1 = 8'b11111111;
      end
      else begin
        cfblk18_out1 = cfblk18_div_temp[7:0];
      end
    end
  end



  cfblk181 u_cfblk181 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_268(cfblk18_out1),  // uint8
                       .Action_Port(y1_9),
                       .emi_269(cfblk181_out1)  // uint8
                       );

  cfblk180 u_cfblk180 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_74(cfblk181_out1),  // uint8
                       .Action_Port(y1_8),
                       .emi_75(cfblk180_out1)  // uint8
                       );

  assign cfblk93_out1 = cfblk180_out1 - cfblk137_out1;



  always @(cfblk83_out1, cfblk93_out1) begin
    cfblk79_div_temp = 9'b000000000;
    cfblk79_t_0_0 = 9'b000000000;
    if (cfblk83_out1 == 8'b00000000) begin
      cfblk79_out1 = 8'b11111111;
    end
    else begin
      cfblk79_t_0_0 = {1'b0, cfblk93_out1};
      cfblk79_div_temp = cfblk79_t_0_0 / cfblk83_out1;
      if (cfblk79_div_temp[8] != 1'b0) begin
        cfblk79_out1 = 8'b11111111;
      end
      else begin
        cfblk79_out1 = cfblk79_div_temp[7:0];
      end
    end
  end



  assign cfblk114_out1 = cfblk79_out1 + cfblk114_const_val_1;



  cfblk70 u_cfblk70 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_243(cfblk114_out1),  // uint8
                     .Action_Port(y1_7),
                     .emi_244(cfblk70_out1),  // uint8
                     .emi_245(cfblk70_out2)  // uint8
                     );

  cfblk150 u_cfblk150 (.In1(cfblk81_out2),  // uint8
                       .Out1(cfblk150_out1)  // uint8
                       );

  assign cfblk58_out1 = cfblk150_out1 + cfblk70_out2;



  assign cfblk119_out1 = cfblk58_out1;
  assign cfblk119_out2 = 8'b00000000;



  assign cfblk132_out1 = cfblk119_out2;
  assign cfblk132_out2 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk167_process
      if (reset == 1'b1) begin
        for(cfblk167_t_1 = 32'sd0; cfblk167_t_1 <= 32'sd1; cfblk167_t_1 = cfblk167_t_1 + 32'sd1) begin
          cfblk167_reg[cfblk167_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk167_t_0_0 = 32'sd0; cfblk167_t_0_0 <= 32'sd1; cfblk167_t_0_0 = cfblk167_t_0_0 + 32'sd1) begin
            cfblk167_reg[cfblk167_t_0_0] <= cfblk167_reg_next[cfblk167_t_0_0];
          end
        end
      end
    end

  assign cfblk167_out1 = cfblk167_reg[1];
  assign cfblk167_reg_next[0] = cfblk132_out2;
  assign cfblk167_reg_next[1] = cfblk167_reg[0];



  assign cfblk71_out1 = cfblk167_out1 + cfblk19_out1;



  assign cfblk106_out1 = cfblk71_out1 + cfblk171_out1;



  assign cfblk76_out1 = cfblk106_out1 - cfblk163_out1;



  DotProduct_block u_cfblk128_inst (.in1(cfblk76_out1),  // uint8
                                    .in2(cfblk173_out1),  // uint8
                                    .out1(cfblk128_out1)  // uint8
                                    );

  assign cfblk81_out1 = cfblk128_out1;
  assign cfblk81_out2 = 8'b00000000;



  cfblk148 u_cfblk148 (.In1(cfblk81_out1),  // uint8
                       .Out1(cfblk148_out1)  // uint8
                       );

  cfblk40 u_cfblk40 (.u(cfblk148_out1),  // uint8
                     .y(cfblk40_out1)  // uint8
                     );

  assign Hdl_out = cfblk40_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

