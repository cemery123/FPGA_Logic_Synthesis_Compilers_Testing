// -------------------------------------------------------------
// 
// File Name: E:\zgl\gen_9\slemi\emi_results\2024-05-23-02-49-52\SampleModel61706\Verilog_hdlsrc\sampleModel61706_pp_36_1_sub\Subsystem.v
// Created: 2024-05-23 03:39:10
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel61706_pp_36_1_sub/Subsystem
// Hierarchy Level: 0
// Model version: 1.1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  real cfblk185_out1;  // double
  wire [63:0] cfblk72_out1;  // ufix64
  wire [7:0] cfblk4_out1;  // uint8
  wire [7:0] cfblk187_out1;  // uint8
  wire [7:0] cfblk1_out1;  // uint8
  wire [7:0] cfblk175_const_val_1;  // uint8
  wire [7:0] count_step;  // uint8
  wire [7:0] count_from;  // uint8
  reg [7:0] cfblk186_out1;  // uint8
  wire [7:0] count;  // uint8
  wire need_to_wrap;
  wire [7:0] count_value;  // uint8
  reg [7:0] emi_96_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_96_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_96_out1;  // uint8
  wire y1;
  wire [15:0] cfblk16_out1;  // ufix16_En7
  wire [7:0] cfblk67_const_val_1;  // uint8
  wire [7:0] cfblk156_const_val_1;  // uint8
  wire [7:0] cfblk36_const_val_1;  // uint8
  wire [7:0] cfblk68_const_val_1;  // uint8
  wire [7:0] cfblk27_const_val_1;  // uint8
  wire [7:0] cfblk171_const_val_1;  // uint8
  wire [7:0] cfblk123_out1;  // uint8
  reg [7:0] emi_265_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_265_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_265_out1;  // uint8
  wire y1_1;
  wire [7:0] cfblk8_out1;  // uint8
  wire [7:0] cfblk66_out1;  // uint8
  wire [7:0] cfblk97_out1;  // uint8
  wire [7:0] cfblk34_out1;  // uint8
  reg [7:0] emi_64_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_64_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_64_out1;  // uint8
  wire y1_2;
  wire [7:0] cfblk180_out1;  // uint8
  reg [7:0] emi_217_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_217_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_217_out1;  // uint8
  wire y1_3;
  wire [7:0] cfblk71_out1;  // uint8
  reg [7:0] emi_23_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_23_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_23_out1;  // uint8
  wire y1_4;
  wire [7:0] cfblk116_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk163_out1;  // uint8
  wire [7:0] cfblk157_out1;  // uint8
  reg [7:0] cfblk202_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk202_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk202_out1;  // uint8
  reg [7:0] cfblk136_out1;  // uint8
  reg [7:0] cfblk207_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk207_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk207_out1;  // uint8
  wire [7:0] cfblk115_out1;  // uint8
  reg [7:0] emi_201_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_201_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_201_out1;  // uint8
  wire y1_5;
  wire [7:0] cfblk99_out1;  // uint8
  reg [7:0] cfblk214_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk214_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk214_out1;  // uint8
  reg [7:0] cfblk120_out1;  // uint8
  reg [7:0] emi_88_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_88_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_88_out1;  // uint8
  wire y1_6;
  wire [7:0] cfblk154_out2;  // uint8
  reg [7:0] emi_120_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_120_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_120_out1;  // uint8
  wire y1_7;
  wire [7:0] cfblk95_out1;  // uint8
  wire [7:0] cfblk12_out2;  // uint8
  reg [7:0] cfblk208_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk208_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk208_out1;  // uint8
  wire [7:0] cfblk85_out1;  // uint8
  reg [7:0] emi_233_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_233_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_233_out1;  // uint8
  wire y1_8;
  wire [7:0] cfblk145_out1;  // uint8
  reg [7:0] emi_7_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_7_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_7_out1;  // uint8
  wire y1_9;
  wire [7:0] cfblk111_out1;  // uint8
  reg [7:0] emi_80_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_80_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_80_out1;  // uint8
  wire y1_10;
  wire [15:0] cfblk10_out1;  // ufix16_En7
  reg [15:0] cfblk206_reg [0:1];  // ufix16 [2]
  wire [15:0] cfblk206_reg_next [0:1];  // ufix16_En7 [2]
  wire [15:0] cfblk206_out1;  // ufix16_En7
  reg [7:0] cfblk147_out1;  // uint8
  wire [31:0] cfblk85_add_cast;  // ufix32_En7
  wire [31:0] cfblk85_add_cast_1;  // ufix32_En7
  wire [31:0] cfblk85_add_temp;  // ufix32_En7
  wire [7:0] cfblk48_out1;  // uint8
  reg [7:0] cfblk196_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk196_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk196_out1;  // uint8
  wire [7:0] cfblk135_out1;  // uint8
  reg [7:0] emi_112_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_112_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_112_out1;  // uint8
  wire y1_11;
  wire [7:0] cfblk106_out1;  // uint8
  wire [7:0] cfblk164_out1;  // uint8
  wire [7:0] cfblk22_out2;  // uint8
  wire [7:0] cfblk92_out1;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  reg [7:0] emi_297_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_297_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_297_out1;  // uint8
  wire y1_12;
  reg [7:0] cfblk104_out1;  // uint8
  reg [7:0] emi_185_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_185_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_185_out1;  // uint8
  wire y1_13;
  wire [7:0] cfblk28_out1;  // uint8
  wire [7:0] cfblk38_out1;  // uint8
  wire [7:0] cfblk154_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  wire [7:0] cfblk11_out1;  // uint8
  reg [7:0] emi_104_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_104_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_104_out1;  // uint8
  wire y1_14;
  wire [7:0] cfblk100_out1;  // uint8
  wire [7:0] cfblk20_out1;  // uint8
  reg [7:0] cfblk165_out1;  // uint8
  reg [7:0] emi_257_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_257_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_257_out1;  // uint8
  wire y1_15;
  wire [7:0] cfblk80_out1;  // uint8
  wire [7:0] cfblk156_out1;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  wire [7:0] cfblk69_out1;  // uint8
  wire [7:0] cfblk150_out1;  // uint8
  wire [7:0] cfblk76_out1;  // uint8
  wire [7:0] cfblk3_out1;  // uint8
  wire [7:0] cfblk141_out1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  wire [7:0] cfblk70_out1;  // uint8
  wire [7:0] cfblk179_out1;  // uint8
  wire [7:0] cfblk118_out1;  // uint8
  wire [7:0] cfblk59_out1;  // uint8
  wire [15:0] cfblk98_out1;  // ufix16_En7
  reg [15:0] emi_169_reg [0:1];  // ufix16 [2]
  wire [15:0] emi_169_reg_next [0:1];  // ufix16_En7 [2]
  wire [15:0] emi_169_out1;  // ufix16_En7
  wire [7:0] emi_168_out1;  // uint8
  wire y1_16;
  reg [7:0] cfblk42_out1;  // uint8
  reg [7:0] emi_305_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_305_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_305_out1;  // uint8
  wire y1_17;
  wire [15:0] cfblk32_out1;  // ufix16_En7
  wire [7:0] cfblk88_out1;  // uint8
  wire [7:0] cfblk83_out1;  // uint8
  wire [7:0] cfblk67_out1;  // uint8
  wire [7:0] cfblk78_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  reg [7:0] cfblk153_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  wire [7:0] cfblk161_out1;  // uint8
  wire [7:0] cfblk68_out1;  // uint8
  reg [7:0] cfblk194_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk194_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk194_out1;  // uint8
  wire [7:0] cfblk130_out1;  // uint8
  reg [7:0] emi_40_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_40_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_40_out1;  // uint8
  wire y1_18;
  wire [7:0] cfblk159_out1;  // uint8
  reg [7:0] cfblk204_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk204_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk204_out1;  // uint8
  wire [7:0] cfblk15_out1;  // uint8
  reg [7:0] emi_15_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_15_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_15_out1;  // uint8
  wire y1_19;
  wire [7:0] cfblk55_out1;  // uint8
  reg [7:0] emi_72_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_72_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_72_out1;  // uint8
  wire y1_20;
  wire [7:0] cfblk6_out1;  // uint8
  reg [7:0] emi_209_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_209_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_209_out1;  // uint8
  wire y1_21;
  wire [7:0] cfblk155_out1;  // uint8
  reg [7:0] cfblk199_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk199_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk199_out1;  // uint8
  wire [7:0] cfblk87_out1;  // uint8
  wire [7:0] cfblk7_out1;  // uint8
  reg [7:0] emi_161_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_161_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_161_out1;  // uint8
  wire y1_22;
  wire [7:0] cfblk60_out1;  // uint8
  reg [7:0] emi_241_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_241_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_241_out1;  // uint8
  wire y1_23;
  wire [7:0] cfblk81_out1;  // uint8
  wire [7:0] cfblk78_out2;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk75_out1;  // uint8
  wire [7:0] cfblk41_out1;  // uint8
  wire [7:0] cfblk44_out1;  // uint8
  reg [7:0] cfblk201_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk201_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk201_out1;  // uint8
  wire [7:0] cfblk90_out1;  // uint8
  reg [7:0] cfblk84_out1;  // uint8
  reg [7:0] cfblk18_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk167_out1;  // uint8
  wire [7:0] cfblk73_out1;  // uint8
  wire [7:0] cfblk14_out1;  // uint8
  reg [7:0] emi_193_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_193_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_193_out1;  // uint8
  wire y1_24;
  wire [7:0] cfblk49_out1;  // uint8
  wire [7:0] cfblk176_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk52_out1;  // uint8
  wire [7:0] cfblk77_out1;  // uint8
  reg [7:0] emi_128_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_128_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_128_out1;  // uint8
  wire y1_25;
  wire [15:0] cfblk64_out1;  // ufix16_En7
  reg [15:0] emi_249_reg [0:1];  // ufix16 [2]
  wire [15:0] emi_249_reg_next [0:1];  // ufix16_En7 [2]
  wire [15:0] emi_249_out1;  // ufix16_En7
  wire [7:0] emi_248_out1;  // uint8
  wire y1_26;
  reg [7:0] emi_153_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_153_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_153_out1;  // uint8
  wire y1_27;
  wire [7:0] cfblk183_out1;  // uint8
  reg [7:0] emi_48_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_48_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_48_out1;  // uint8
  wire y1_28;
  wire [7:0] cfblk105_out1;  // uint8
  reg [7:0] emi_313_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_313_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_313_out1;  // uint8
  wire y1_29;
  wire [7:0] cfblk117_out1;  // uint8
  reg [7:0] emi_281_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_281_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_281_out1;  // uint8
  wire y1_30;
  wire [7:0] cfblk178_out1;  // uint8
  reg [7:0] emi_31_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_31_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_31_out1;  // uint8
  wire y1_31;
  wire [15:0] cfblk74_out1;  // ufix16_En7
  wire [31:0] cfblk77_add_cast;  // ufix32_En7
  wire [31:0] cfblk77_add_cast_1;  // ufix32_En7
  wire [31:0] cfblk77_add_temp;  // ufix32_En7
  wire [7:0] cfblk174_out1;  // uint8
  wire [7:0] cfblk47_out1;  // uint8
  wire [7:0] cfblk112_out1;  // uint8
  wire [7:0] cfblk218_out1;  // uint8
  wire [7:0] cfblk172_out1;  // uint8
  wire [7:0] cfblk139_out1;  // uint8
  wire [7:0] cfblk182_out1;  // uint8
  reg [7:0] cfblk132_out1;  // uint8
  reg [7:0] cfblk203_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk203_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk203_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  wire [7:0] cfblk94_out1;  // uint8
  reg [7:0] cfblk215_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk215_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk215_out1;  // uint8
  wire [7:0] cfblk33_out1;  // uint8
  wire [7:0] cfblk189_out1;  // uint8
  wire [7:0] cfblk27_out1;  // uint8
  reg [7:0] emi_177_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_177_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_177_out1;  // uint8
  wire y1_32;
  wire [7:0] cfblk37_out1;  // uint8
  reg [7:0] cfblk210_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk210_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk210_out1;  // uint8
  wire [7:0] cfblk125_out1;  // uint8
  reg [7:0] emi_56_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_56_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_56_out1;  // uint8
  wire y1_33;
  reg [7:0] cfblk51_out1;  // uint8
  wire [7:0] cfblk188_out1;  // uint8
  wire [15:0] cfblk126_out1;  // ufix16_En7
  wire [31:0] cfblk50_add_cast;  // ufix32_En7
  wire [31:0] cfblk50_add_cast_1;  // ufix32_En7
  wire [31:0] cfblk50_add_temp;  // ufix32_En7
  wire [7:0] cfblk50_out1;  // uint8
  reg [7:0] cfblk213_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk213_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk213_out1;  // uint8
  wire [7:0] cfblk5_out1;  // uint8
  reg [7:0] emi_145_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_145_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_145_out1;  // uint8
  wire y1_34;
  wire [7:0] cfblk146_out1;  // uint8
  reg [7:0] emi_273_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_273_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_273_out1;  // uint8
  wire y1_35;
  wire [7:0] cfblk179_out2;  // uint8
  wire [7:0] cfblk197_out1;  // uint8
  wire [7:0] cfblk65_out1;  // uint8
  wire [7:0] cfblk175_out1;  // uint8
  wire [7:0] cfblk158_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk21_out1;  // uint8
  wire [7:0] cfblk31_out1;  // uint8
  wire [7:0] cfblk102_out1;  // uint8
  wire [7:0] cfblk12_out1;  // uint8
  wire [7:0] cfblk160_out1;  // uint8
  wire [7:0] cfblk140_out1;  // uint8
  wire [7:0] cfblk133_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  reg [7:0] cfblk205_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk205_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk205_out1;  // uint8
  wire [7:0] cfblk96_out1;  // uint8
  wire [7:0] cfblk86_out1;  // uint8
  wire [7:0] cfblk40_out1;  // uint8
  reg [7:0] cfblk193_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk193_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk193_out1;  // uint8
  wire [7:0] cfblk119_out1;  // uint8
  wire [7:0] cfblk62_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  wire [7:0] cfblk151_out1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  reg [7:0] cfblk212_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk212_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk212_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  wire [7:0] cfblk25_out1;  // uint8
  reg [7:0] cfblk217_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk217_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk217_out1;  // uint8
  reg [7:0] emi_137_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_137_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_137_out1;  // uint8
  wire y1_36;
  reg [7:0] cfblk198_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk198_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk198_out1;  // uint8
  wire [7:0] cfblk114_out1;  // uint8
  wire [7:0] cfblk33_out2;  // uint8
  wire [7:0] cfblk13_out1;  // uint8
  wire [7:0] cfblk103_out1;  // uint8
  wire [7:0] cfblk109_out1;  // uint8
  wire [7:0] cfblk134_out1;  // uint8
  wire [7:0] cfblk107_out1;  // uint8
  reg [7:0] cfblk211_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk211_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk211_out1;  // uint8
  wire [7:0] cfblk122_out1;  // uint8
  wire [7:0] cfblk169_out1;  // uint8
  wire [7:0] cfblk171_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] dtc_out_8;  // ufix8
  wire [7:0] dtc_out_9;  // ufix8
  wire [7:0] cfblk124_out1;  // uint8
  wire [7:0] cfblk19_out1;  // uint8
  wire [7:0] dtc_out_10;  // ufix8
  wire [7:0] cfblk91_out1;  // uint8
  wire [7:0] dtc_out_11;  // ufix8
  wire [7:0] cfblk162_out1;  // uint8
  wire [7:0] cfblk57_out1;  // uint8
  wire [7:0] cfblk54_out1;  // uint8
  wire [7:0] cfblk129_out1;  // uint8
  wire [7:0] cfblk22_out1;  // uint8
  reg signed [31:0] emi_96_t_0_0;  // int32
  reg signed [31:0] emi_96_t_1;  // int32
  reg signed [31:0] emi_265_t_0_0;  // int32
  reg signed [31:0] emi_265_t_1;  // int32
  reg signed [31:0] emi_64_t_0_0;  // int32
  reg signed [31:0] emi_64_t_1;  // int32
  reg signed [31:0] emi_217_t_0_0;  // int32
  reg signed [31:0] emi_217_t_1;  // int32
  reg signed [31:0] emi_23_t_0_0;  // int32
  reg signed [31:0] emi_23_t_1;  // int32
  reg signed [31:0] cfblk202_t_0_0;  // int32
  reg signed [31:0] cfblk202_t_1;  // int32
  reg signed [31:0] cfblk207_t_0_0;  // int32
  reg signed [31:0] cfblk207_t_1;  // int32
  reg signed [31:0] emi_201_t_0_0;  // int32
  reg signed [31:0] emi_201_t_1;  // int32
  reg signed [31:0] cfblk214_t_0_0;  // int32
  reg signed [31:0] cfblk214_t_1;  // int32
  reg signed [31:0] emi_88_t_0_0;  // int32
  reg signed [31:0] emi_88_t_1;  // int32
  reg signed [31:0] emi_120_t_0_0;  // int32
  reg signed [31:0] emi_120_t_1;  // int32
  reg [8:0] cfblk136_div_temp;  // ufix9
  reg [8:0] cfblk136_t_0_0;  // ufix9
  reg signed [31:0] cfblk208_t_0_0;  // int32
  reg signed [31:0] cfblk208_t_1;  // int32
  reg signed [31:0] emi_233_t_0_0;  // int32
  reg signed [31:0] emi_233_t_1;  // int32
  reg signed [31:0] emi_7_t_0_0;  // int32
  reg signed [31:0] emi_7_t_1;  // int32
  reg signed [31:0] emi_80_t_0_0;  // int32
  reg signed [31:0] emi_80_t_1;  // int32
  reg signed [31:0] cfblk206_t_0_0;  // int32
  reg signed [31:0] cfblk206_t_1;  // int32
  reg signed [31:0] cfblk196_t_0_0;  // int32
  reg signed [31:0] cfblk196_t_1;  // int32
  reg signed [31:0] emi_112_t_0_0;  // int32
  reg signed [31:0] emi_112_t_1;  // int32
  reg signed [31:0] emi_297_t_0_0;  // int32
  reg signed [31:0] emi_297_t_1;  // int32
  reg signed [31:0] emi_185_t_0_0;  // int32
  reg signed [31:0] emi_185_t_1;  // int32
  reg [8:0] cfblk104_div_temp;  // ufix9
  reg [8:0] cfblk104_t_0_0;  // ufix9
  reg signed [31:0] emi_104_t_0_0;  // int32
  reg signed [31:0] emi_104_t_1;  // int32
  reg [8:0] cfblk165_div_temp;  // ufix9
  reg [8:0] cfblk165_t_0_0;  // ufix9
  reg signed [31:0] emi_257_t_0_0;  // int32
  reg signed [31:0] emi_257_t_1;  // int32
  reg signed [31:0] emi_169_t_0_0;  // int32
  reg signed [31:0] emi_169_t_1;  // int32
  reg signed [31:0] emi_305_t_0_0;  // int32
  reg signed [31:0] emi_305_t_1;  // int32
  reg [8:0] cfblk153_div_temp;  // ufix9
  reg [8:0] cfblk153_t_0_0;  // ufix9
  reg signed [31:0] cfblk194_t_0_0;  // int32
  reg signed [31:0] cfblk194_t_1;  // int32
  reg signed [31:0] emi_40_t_0_0;  // int32
  reg signed [31:0] emi_40_t_1;  // int32
  reg signed [31:0] cfblk204_t_0_0;  // int32
  reg signed [31:0] cfblk204_t_1;  // int32
  reg signed [31:0] emi_15_t_0_0;  // int32
  reg signed [31:0] emi_15_t_1;  // int32
  reg signed [31:0] emi_72_t_0_0;  // int32
  reg signed [31:0] emi_72_t_1;  // int32
  reg signed [31:0] emi_209_t_0_0;  // int32
  reg signed [31:0] emi_209_t_1;  // int32
  reg signed [31:0] cfblk199_t_0_0;  // int32
  reg signed [31:0] cfblk199_t_1;  // int32
  reg signed [31:0] emi_161_t_0_0;  // int32
  reg signed [31:0] emi_161_t_1;  // int32
  reg signed [31:0] emi_241_t_0_0;  // int32
  reg signed [31:0] emi_241_t_1;  // int32
  reg signed [31:0] cfblk201_t_0_0;  // int32
  reg signed [31:0] cfblk201_t_1;  // int32
  reg [8:0] cfblk84_div_temp;  // ufix9
  reg [8:0] cfblk84_t_0_0;  // ufix9
  reg signed [31:0] emi_193_t_0_0;  // int32
  reg signed [31:0] emi_193_t_1;  // int32
  reg signed [31:0] emi_128_t_0_0;  // int32
  reg signed [31:0] emi_128_t_1;  // int32
  reg signed [31:0] emi_249_t_0_0;  // int32
  reg signed [31:0] emi_249_t_1;  // int32
  reg signed [31:0] emi_153_t_0_0;  // int32
  reg signed [31:0] emi_153_t_1;  // int32
  reg signed [31:0] emi_48_t_0_0;  // int32
  reg signed [31:0] emi_48_t_1;  // int32
  reg signed [31:0] emi_313_t_0_0;  // int32
  reg signed [31:0] emi_313_t_1;  // int32
  reg signed [31:0] emi_281_t_0_0;  // int32
  reg signed [31:0] emi_281_t_1;  // int32
  reg signed [31:0] emi_31_t_0_0;  // int32
  reg signed [31:0] emi_31_t_1;  // int32
  reg [8:0] cfblk132_div_temp;  // ufix9
  reg [8:0] cfblk132_t_0_0;  // ufix9
  reg signed [31:0] cfblk203_t_0_0;  // int32
  reg signed [31:0] cfblk203_t_1;  // int32
  reg signed [31:0] cfblk215_t_0_0;  // int32
  reg signed [31:0] cfblk215_t_1;  // int32
  reg [8:0] cfblk147_div_temp;  // ufix9
  reg [8:0] cfblk147_t_0_0;  // ufix9
  reg signed [31:0] emi_177_t_0_0;  // int32
  reg signed [31:0] emi_177_t_1;  // int32
  reg [8:0] cfblk42_div_temp;  // ufix9
  reg [8:0] cfblk42_t_0_0;  // ufix9
  reg signed [31:0] cfblk210_t_0_0;  // int32
  reg signed [31:0] cfblk210_t_1;  // int32
  reg signed [31:0] emi_56_t_0_0;  // int32
  reg signed [31:0] emi_56_t_1;  // int32
  reg signed [31:0] cfblk213_t_0_0;  // int32
  reg signed [31:0] cfblk213_t_1;  // int32
  reg signed [31:0] emi_145_t_0_0;  // int32
  reg signed [31:0] emi_145_t_1;  // int32
  reg signed [31:0] emi_273_t_0_0;  // int32
  reg signed [31:0] emi_273_t_1;  // int32
  reg [8:0] cfblk51_div_temp;  // ufix9
  reg [8:0] cfblk51_t_0_0;  // ufix9
  reg signed [31:0] cfblk205_t_0_0;  // int32
  reg signed [31:0] cfblk205_t_1;  // int32
  reg [8:0] cfblk18_div_temp;  // ufix9
  reg [8:0] cfblk18_t_0_0;  // ufix9
  reg signed [31:0] cfblk193_t_0_0;  // int32
  reg signed [31:0] cfblk193_t_1;  // int32
  reg signed [31:0] cfblk212_t_0_0;  // int32
  reg signed [31:0] cfblk212_t_1;  // int32
  reg signed [31:0] cfblk217_t_0_0;  // int32
  reg signed [31:0] cfblk217_t_1;  // int32
  reg signed [31:0] emi_137_t_0_0;  // int32
  reg signed [31:0] emi_137_t_1;  // int32
  reg signed [31:0] cfblk198_t_0_0;  // int32
  reg signed [31:0] cfblk198_t_1;  // int32
  reg [8:0] cfblk120_div_temp;  // ufix9
  reg [8:0] cfblk120_t_0_0;  // ufix9
  reg signed [31:0] cfblk211_t_0_0;  // int32
  reg signed [31:0] cfblk211_t_1;  // int32


  initial cfblk185_out1 = 0.0;



  cfblk72 u_cfblk72 (.u($realtobits(cfblk185_out1)),  // double
                     .y(cfblk72_out1)  // double
                     );

  cfblk4 u_cfblk4 (.u(cfblk72_out1),  // double
                   .y(cfblk4_out1)  // uint8
                   );

  assign cfblk187_out1 = 8'b00000001;



  assign enb = clk_enable;

  assign cfblk1_out1 = 8'b00000000;



  assign cfblk175_const_val_1 = 8'b00000000;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 25
  assign count_step = 8'b00000001;



  assign count_from = 8'b00000000;



  assign count = cfblk186_out1 + count_step;



  assign need_to_wrap = cfblk186_out1 == 8'b00011001;



  assign count_value = (need_to_wrap == 1'b0 ? count :
              count_from);



  always @(posedge clk or posedge reset)
    begin : cfblk186_process
      if (reset == 1'b1) begin
        cfblk186_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          cfblk186_out1 <= count_value;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : emi_96_process
      if (reset == 1'b1) begin
        for(emi_96_t_1 = 32'sd0; emi_96_t_1 <= 32'sd1; emi_96_t_1 = emi_96_t_1 + 32'sd1) begin
          emi_96_reg[emi_96_t_1] <= 8'b00000001;
        end
      end
      else begin
        if (enb) begin
          for(emi_96_t_0_0 = 32'sd0; emi_96_t_0_0 <= 32'sd1; emi_96_t_0_0 = emi_96_t_0_0 + 32'sd1) begin
            emi_96_reg[emi_96_t_0_0] <= emi_96_reg_next[emi_96_t_0_0];
          end
        end
      end
    end

  assign emi_96_out1 = emi_96_reg[1];
  assign emi_96_reg_next[0] = cfblk187_out1;
  assign emi_96_reg_next[1] = emi_96_reg[0];



  assign y1 = emi_96_out1 >= 8'b00000001;



  cfblk16 u_cfblk16 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_90(cfblk187_out1),  // uint8
                     .Action_Port(y1),
                     .emi_91(cfblk16_out1)  // ufix16_En7
                     );

  assign cfblk67_const_val_1 = 8'b00000000;



  assign cfblk156_const_val_1 = 8'b00000000;



  assign cfblk36_const_val_1 = 8'b00000000;



  assign cfblk68_const_val_1 = 8'b00000000;



  assign cfblk27_const_val_1 = 8'b00000000;



  assign cfblk171_const_val_1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : emi_265_process
      if (reset == 1'b1) begin
        for(emi_265_t_1 = 32'sd0; emi_265_t_1 <= 32'sd1; emi_265_t_1 = emi_265_t_1 + 32'sd1) begin
          emi_265_reg[emi_265_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_265_t_0_0 = 32'sd0; emi_265_t_0_0 <= 32'sd1; emi_265_t_0_0 = emi_265_t_0_0 + 32'sd1) begin
            emi_265_reg[emi_265_t_0_0] <= emi_265_reg_next[emi_265_t_0_0];
          end
        end
      end
    end

  assign emi_265_out1 = emi_265_reg[1];
  assign emi_265_reg_next[0] = cfblk123_out1;
  assign emi_265_reg_next[1] = emi_265_reg[0];



  assign y1_1 = 1'b1;



  cfblk8 u_cfblk8 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .emi_259(cfblk123_out1),  // uint8
                   .Action_Port(y1_1),
                   .emi_260(cfblk8_out1)  // uint8
                   );

  DotProduct_block10 u_cfblk97_inst (.in1(cfblk8_out1),  // uint8
                                     .in2(cfblk66_out1),  // uint8
                                     .out1(cfblk97_out1)  // uint8
                                     );

  always @(posedge clk or posedge reset)
    begin : emi_64_process
      if (reset == 1'b1) begin
        for(emi_64_t_1 = 32'sd0; emi_64_t_1 <= 32'sd1; emi_64_t_1 = emi_64_t_1 + 32'sd1) begin
          emi_64_reg[emi_64_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_64_t_0_0 = 32'sd0; emi_64_t_0_0 <= 32'sd1; emi_64_t_0_0 = emi_64_t_0_0 + 32'sd1) begin
            emi_64_reg[emi_64_t_0_0] <= emi_64_reg_next[emi_64_t_0_0];
          end
        end
      end
    end

  assign emi_64_out1 = emi_64_reg[1];
  assign emi_64_reg_next[0] = cfblk34_out1;
  assign emi_64_reg_next[1] = emi_64_reg[0];



  assign y1_2 = emi_64_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_217_process
      if (reset == 1'b1) begin
        for(emi_217_t_1 = 32'sd0; emi_217_t_1 <= 32'sd1; emi_217_t_1 = emi_217_t_1 + 32'sd1) begin
          emi_217_reg[emi_217_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_217_t_0_0 = 32'sd0; emi_217_t_0_0 <= 32'sd1; emi_217_t_0_0 = emi_217_t_0_0 + 32'sd1) begin
            emi_217_reg[emi_217_t_0_0] <= emi_217_reg_next[emi_217_t_0_0];
          end
        end
      end
    end

  assign emi_217_out1 = emi_217_reg[1];
  assign emi_217_reg_next[0] = cfblk180_out1;
  assign emi_217_reg_next[1] = emi_217_reg[0];



  assign y1_3 = emi_217_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_23_process
      if (reset == 1'b1) begin
        for(emi_23_t_1 = 32'sd0; emi_23_t_1 <= 32'sd1; emi_23_t_1 = emi_23_t_1 + 32'sd1) begin
          emi_23_reg[emi_23_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_23_t_0_0 = 32'sd0; emi_23_t_0_0 <= 32'sd1; emi_23_t_0_0 = emi_23_t_0_0 + 32'sd1) begin
            emi_23_reg[emi_23_t_0_0] <= emi_23_reg_next[emi_23_t_0_0];
          end
        end
      end
    end

  assign emi_23_out1 = emi_23_reg[1];
  assign emi_23_reg_next[0] = cfblk71_out1;
  assign emi_23_reg_next[1] = emi_23_reg[0];



  assign y1_4 = 1'b1;



  cfblk116 u_cfblk116 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_17(cfblk71_out1),  // uint8
                       .Action_Port(y1_4),
                       .emi_18(cfblk116_out1)  // uint8
                       );

  cfblk9 u_cfblk9 (.u(cfblk116_out1),  // uint8
                   .y(cfblk9_out1)  // uint8
                   );

  assign dtc_out = cfblk9_out1;



  assign cfblk163_out1 = dtc_out;



  always @(posedge clk or posedge reset)
    begin : cfblk202_process
      if (reset == 1'b1) begin
        for(cfblk202_t_1 = 32'sd0; cfblk202_t_1 <= 32'sd1; cfblk202_t_1 = cfblk202_t_1 + 32'sd1) begin
          cfblk202_reg[cfblk202_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk202_t_0_0 = 32'sd0; cfblk202_t_0_0 <= 32'sd1; cfblk202_t_0_0 = cfblk202_t_0_0 + 32'sd1) begin
            cfblk202_reg[cfblk202_t_0_0] <= cfblk202_reg_next[cfblk202_t_0_0];
          end
        end
      end
    end

  assign cfblk202_out1 = cfblk202_reg[1];
  assign cfblk202_reg_next[0] = cfblk157_out1;
  assign cfblk202_reg_next[1] = cfblk202_reg[0];



  always @(posedge clk or posedge reset)
    begin : cfblk207_process
      if (reset == 1'b1) begin
        for(cfblk207_t_1 = 32'sd0; cfblk207_t_1 <= 32'sd1; cfblk207_t_1 = cfblk207_t_1 + 32'sd1) begin
          cfblk207_reg[cfblk207_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk207_t_0_0 = 32'sd0; cfblk207_t_0_0 <= 32'sd1; cfblk207_t_0_0 = cfblk207_t_0_0 + 32'sd1) begin
            cfblk207_reg[cfblk207_t_0_0] <= cfblk207_reg_next[cfblk207_t_0_0];
          end
        end
      end
    end

  assign cfblk207_out1 = cfblk207_reg[1];
  assign cfblk207_reg_next[0] = cfblk136_out1;
  assign cfblk207_reg_next[1] = cfblk207_reg[0];



  always @(posedge clk or posedge reset)
    begin : emi_201_process
      if (reset == 1'b1) begin
        for(emi_201_t_1 = 32'sd0; emi_201_t_1 <= 32'sd1; emi_201_t_1 = emi_201_t_1 + 32'sd1) begin
          emi_201_reg[emi_201_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_201_t_0_0 = 32'sd0; emi_201_t_0_0 <= 32'sd1; emi_201_t_0_0 = emi_201_t_0_0 + 32'sd1) begin
            emi_201_reg[emi_201_t_0_0] <= emi_201_reg_next[emi_201_t_0_0];
          end
        end
      end
    end

  assign emi_201_out1 = emi_201_reg[1];
  assign emi_201_reg_next[0] = cfblk115_out1;
  assign emi_201_reg_next[1] = emi_201_reg[0];



  assign y1_5 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : cfblk214_process
      if (reset == 1'b1) begin
        for(cfblk214_t_1 = 32'sd0; cfblk214_t_1 <= 32'sd1; cfblk214_t_1 = cfblk214_t_1 + 32'sd1) begin
          cfblk214_reg[cfblk214_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk214_t_0_0 = 32'sd0; cfblk214_t_0_0 <= 32'sd1; cfblk214_t_0_0 = cfblk214_t_0_0 + 32'sd1) begin
            cfblk214_reg[cfblk214_t_0_0] <= cfblk214_reg_next[cfblk214_t_0_0];
          end
        end
      end
    end

  assign cfblk214_out1 = cfblk214_reg[1];
  assign cfblk214_reg_next[0] = cfblk99_out1;
  assign cfblk214_reg_next[1] = cfblk214_reg[0];



  always @(posedge clk or posedge reset)
    begin : emi_88_process
      if (reset == 1'b1) begin
        for(emi_88_t_1 = 32'sd0; emi_88_t_1 <= 32'sd1; emi_88_t_1 = emi_88_t_1 + 32'sd1) begin
          emi_88_reg[emi_88_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_88_t_0_0 = 32'sd0; emi_88_t_0_0 <= 32'sd1; emi_88_t_0_0 = emi_88_t_0_0 + 32'sd1) begin
            emi_88_reg[emi_88_t_0_0] <= emi_88_reg_next[emi_88_t_0_0];
          end
        end
      end
    end

  assign emi_88_out1 = emi_88_reg[1];
  assign emi_88_reg_next[0] = cfblk120_out1;
  assign emi_88_reg_next[1] = emi_88_reg[0];



  assign y1_6 = emi_88_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_120_process
      if (reset == 1'b1) begin
        for(emi_120_t_1 = 32'sd0; emi_120_t_1 <= 32'sd1; emi_120_t_1 = emi_120_t_1 + 32'sd1) begin
          emi_120_reg[emi_120_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_120_t_0_0 = 32'sd0; emi_120_t_0_0 <= 32'sd1; emi_120_t_0_0 = emi_120_t_0_0 + 32'sd1) begin
            emi_120_reg[emi_120_t_0_0] <= emi_120_reg_next[emi_120_t_0_0];
          end
        end
      end
    end

  assign emi_120_out1 = emi_120_reg[1];
  assign emi_120_reg_next[0] = cfblk154_out2;
  assign emi_120_reg_next[1] = emi_120_reg[0];



  assign y1_7 = 1'b1;



  always @(cfblk12_out2, cfblk95_out1) begin
    cfblk136_div_temp = 9'b000000000;
    cfblk136_t_0_0 = 9'b000000000;
    if (cfblk12_out2 == 8'b00000000) begin
      cfblk136_out1 = 8'b11111111;
    end
    else begin
      cfblk136_t_0_0 = {1'b0, cfblk95_out1};
      cfblk136_div_temp = cfblk136_t_0_0 / cfblk12_out2;
      if (cfblk136_div_temp[8] != 1'b0) begin
        cfblk136_out1 = 8'b11111111;
      end
      else begin
        cfblk136_out1 = cfblk136_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk208_process
      if (reset == 1'b1) begin
        for(cfblk208_t_1 = 32'sd0; cfblk208_t_1 <= 32'sd1; cfblk208_t_1 = cfblk208_t_1 + 32'sd1) begin
          cfblk208_reg[cfblk208_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk208_t_0_0 = 32'sd0; cfblk208_t_0_0 <= 32'sd1; cfblk208_t_0_0 = cfblk208_t_0_0 + 32'sd1) begin
            cfblk208_reg[cfblk208_t_0_0] <= cfblk208_reg_next[cfblk208_t_0_0];
          end
        end
      end
    end

  assign cfblk208_out1 = cfblk208_reg[1];
  assign cfblk208_reg_next[0] = cfblk136_out1;
  assign cfblk208_reg_next[1] = cfblk208_reg[0];



  always @(posedge clk or posedge reset)
    begin : emi_233_process
      if (reset == 1'b1) begin
        for(emi_233_t_1 = 32'sd0; emi_233_t_1 <= 32'sd1; emi_233_t_1 = emi_233_t_1 + 32'sd1) begin
          emi_233_reg[emi_233_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_233_t_0_0 = 32'sd0; emi_233_t_0_0 <= 32'sd1; emi_233_t_0_0 = emi_233_t_0_0 + 32'sd1) begin
            emi_233_reg[emi_233_t_0_0] <= emi_233_reg_next[emi_233_t_0_0];
          end
        end
      end
    end

  assign emi_233_out1 = emi_233_reg[1];
  assign emi_233_reg_next[0] = cfblk85_out1;
  assign emi_233_reg_next[1] = emi_233_reg[0];



  assign y1_8 = emi_233_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_7_process
      if (reset == 1'b1) begin
        for(emi_7_t_1 = 32'sd0; emi_7_t_1 <= 32'sd1; emi_7_t_1 = emi_7_t_1 + 32'sd1) begin
          emi_7_reg[emi_7_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_7_t_0_0 = 32'sd0; emi_7_t_0_0 <= 32'sd1; emi_7_t_0_0 = emi_7_t_0_0 + 32'sd1) begin
            emi_7_reg[emi_7_t_0_0] <= emi_7_reg_next[emi_7_t_0_0];
          end
        end
      end
    end

  assign emi_7_out1 = emi_7_reg[1];
  assign emi_7_reg_next[0] = cfblk145_out1;
  assign emi_7_reg_next[1] = emi_7_reg[0];



  assign y1_9 = emi_7_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_80_process
      if (reset == 1'b1) begin
        for(emi_80_t_1 = 32'sd0; emi_80_t_1 <= 32'sd1; emi_80_t_1 = emi_80_t_1 + 32'sd1) begin
          emi_80_reg[emi_80_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_80_t_0_0 = 32'sd0; emi_80_t_0_0 <= 32'sd1; emi_80_t_0_0 = emi_80_t_0_0 + 32'sd1) begin
            emi_80_reg[emi_80_t_0_0] <= emi_80_reg_next[emi_80_t_0_0];
          end
        end
      end
    end

  assign emi_80_out1 = emi_80_reg[1];
  assign emi_80_reg_next[0] = cfblk111_out1;
  assign emi_80_reg_next[1] = emi_80_reg[0];



  assign y1_10 = emi_80_out1 == 8'b11111111;



  cfblk145 u_cfblk145 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_74(cfblk111_out1),  // uint8
                       .Action_Port(y1_10),
                       .emi_75(cfblk145_out1)  // uint8
                       );

  cfblk10 u_cfblk10 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_1(cfblk145_out1),  // uint8
                     .Action_Port(y1_9),
                     .emi_2(cfblk10_out1)  // ufix16_En7
                     );

  always @(posedge clk or posedge reset)
    begin : cfblk206_process
      if (reset == 1'b1) begin
        for(cfblk206_t_1 = 32'sd0; cfblk206_t_1 <= 32'sd1; cfblk206_t_1 = cfblk206_t_1 + 32'sd1) begin
          cfblk206_reg[cfblk206_t_1] <= 16'b0000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk206_t_0_0 = 32'sd0; cfblk206_t_0_0 <= 32'sd1; cfblk206_t_0_0 = cfblk206_t_0_0 + 32'sd1) begin
            cfblk206_reg[cfblk206_t_0_0] <= cfblk206_reg_next[cfblk206_t_0_0];
          end
        end
      end
    end

  assign cfblk206_out1 = cfblk206_reg[1];
  assign cfblk206_reg_next[0] = cfblk10_out1;
  assign cfblk206_reg_next[1] = cfblk206_reg[0];



  assign cfblk85_add_cast = {17'b0, {cfblk147_out1, 7'b0000000}};
  assign cfblk85_add_cast_1 = {16'b0, cfblk206_out1};
  assign cfblk85_add_temp = cfblk85_add_cast + cfblk85_add_cast_1;
  assign cfblk85_out1 = cfblk85_add_temp[14:7];



  cfblk66 u_cfblk66 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_227(cfblk85_out1),  // uint8
                     .Action_Port(y1_8),
                     .emi_228(cfblk66_out1)  // uint8
                     );

  always @(posedge clk or posedge reset)
    begin : cfblk196_process
      if (reset == 1'b1) begin
        for(cfblk196_t_1 = 32'sd0; cfblk196_t_1 <= 32'sd1; cfblk196_t_1 = cfblk196_t_1 + 32'sd1) begin
          cfblk196_reg[cfblk196_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk196_t_0_0 = 32'sd0; cfblk196_t_0_0 <= 32'sd1; cfblk196_t_0_0 = cfblk196_t_0_0 + 32'sd1) begin
            cfblk196_reg[cfblk196_t_0_0] <= cfblk196_reg_next[cfblk196_t_0_0];
          end
        end
      end
    end

  assign cfblk196_out1 = cfblk196_reg[1];
  assign cfblk196_reg_next[0] = cfblk48_out1;
  assign cfblk196_reg_next[1] = cfblk196_reg[0];



  always @(posedge clk or posedge reset)
    begin : emi_112_process
      if (reset == 1'b1) begin
        for(emi_112_t_1 = 32'sd0; emi_112_t_1 <= 32'sd1; emi_112_t_1 = emi_112_t_1 + 32'sd1) begin
          emi_112_reg[emi_112_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_112_t_0_0 = 32'sd0; emi_112_t_0_0 <= 32'sd1; emi_112_t_0_0 = emi_112_t_0_0 + 32'sd1) begin
            emi_112_reg[emi_112_t_0_0] <= emi_112_reg_next[emi_112_t_0_0];
          end
        end
      end
    end

  assign emi_112_out1 = emi_112_reg[1];
  assign emi_112_reg_next[0] = cfblk135_out1;
  assign emi_112_reg_next[1] = emi_112_reg[0];



  assign y1_11 = emi_112_out1 == 8'b11111111;



  assign cfblk135_out1 = (cfblk106_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk164 u_cfblk164 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_106(cfblk135_out1),  // uint8
                       .Action_Port(y1_11),
                       .emi_107(cfblk164_out1)  // uint8
                       );

  assign cfblk92_out1 = (cfblk22_out2 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : emi_297_process
      if (reset == 1'b1) begin
        for(emi_297_t_1 = 32'sd0; emi_297_t_1 <= 32'sd1; emi_297_t_1 = emi_297_t_1 + 32'sd1) begin
          emi_297_reg[emi_297_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_297_t_0_0 = 32'sd0; emi_297_t_0_0 <= 32'sd1; emi_297_t_0_0 = emi_297_t_0_0 + 32'sd1) begin
            emi_297_reg[emi_297_t_0_0] <= emi_297_reg_next[emi_297_t_0_0];
          end
        end
      end
    end

  assign emi_297_out1 = emi_297_reg[1];
  assign emi_297_reg_next[0] = cfblk45_out1;
  assign emi_297_reg_next[1] = emi_297_reg[0];



  assign y1_12 = emi_297_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_185_process
      if (reset == 1'b1) begin
        for(emi_185_t_1 = 32'sd0; emi_185_t_1 <= 32'sd1; emi_185_t_1 = emi_185_t_1 + 32'sd1) begin
          emi_185_reg[emi_185_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_185_t_0_0 = 32'sd0; emi_185_t_0_0 <= 32'sd1; emi_185_t_0_0 = emi_185_t_0_0 + 32'sd1) begin
            emi_185_reg[emi_185_t_0_0] <= emi_185_reg_next[emi_185_t_0_0];
          end
        end
      end
    end

  assign emi_185_out1 = emi_185_reg[1];
  assign emi_185_reg_next[0] = cfblk104_out1;
  assign emi_185_reg_next[1] = emi_185_reg[0];



  assign y1_13 = emi_185_out1 == 8'b11111111;



  always @(cfblk28_out1, cfblk71_out1) begin
    cfblk104_div_temp = 9'b000000000;
    cfblk104_t_0_0 = 9'b000000000;
    if (cfblk71_out1 == 8'b00000000) begin
      cfblk104_out1 = 8'b11111111;
    end
    else begin
      cfblk104_t_0_0 = {1'b0, cfblk28_out1};
      cfblk104_div_temp = cfblk104_t_0_0 / cfblk71_out1;
      if (cfblk104_div_temp[8] != 1'b0) begin
        cfblk104_out1 = 8'b11111111;
      end
      else begin
        cfblk104_out1 = cfblk104_div_temp[7:0];
      end
    end
  end



  cfblk38 u_cfblk38 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_179(cfblk104_out1),  // uint8
                     .Action_Port(y1_13),
                     .emi_180(cfblk38_out1)  // uint8
                     );

  assign cfblk58_out1 = cfblk154_out1 + cfblk38_out1;



  always @(posedge clk or posedge reset)
    begin : emi_104_process
      if (reset == 1'b1) begin
        for(emi_104_t_1 = 32'sd0; emi_104_t_1 <= 32'sd1; emi_104_t_1 = emi_104_t_1 + 32'sd1) begin
          emi_104_reg[emi_104_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_104_t_0_0 = 32'sd0; emi_104_t_0_0 <= 32'sd1; emi_104_t_0_0 = emi_104_t_0_0 + 32'sd1) begin
            emi_104_reg[emi_104_t_0_0] <= emi_104_reg_next[emi_104_t_0_0];
          end
        end
      end
    end

  assign emi_104_out1 = emi_104_reg[1];
  assign emi_104_reg_next[0] = cfblk11_out1;
  assign emi_104_reg_next[1] = emi_104_reg[0];



  assign y1_14 = emi_104_out1 == 8'b11111111;



  always @(cfblk100_out1, cfblk20_out1) begin
    cfblk165_div_temp = 9'b000000000;
    cfblk165_t_0_0 = 9'b000000000;
    if (cfblk20_out1 == 8'b00000000) begin
      cfblk165_out1 = 8'b11111111;
    end
    else begin
      cfblk165_t_0_0 = {1'b0, cfblk100_out1};
      cfblk165_div_temp = cfblk165_t_0_0 / cfblk20_out1;
      if (cfblk165_div_temp[8] != 1'b0) begin
        cfblk165_out1 = 8'b11111111;
      end
      else begin
        cfblk165_out1 = cfblk165_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : emi_257_process
      if (reset == 1'b1) begin
        for(emi_257_t_1 = 32'sd0; emi_257_t_1 <= 32'sd1; emi_257_t_1 = emi_257_t_1 + 32'sd1) begin
          emi_257_reg[emi_257_t_1] <= 8'b00000001;
        end
      end
      else begin
        if (enb) begin
          for(emi_257_t_0_0 = 32'sd0; emi_257_t_0_0 <= 32'sd1; emi_257_t_0_0 = emi_257_t_0_0 + 32'sd1) begin
            emi_257_reg[emi_257_t_0_0] <= emi_257_reg_next[emi_257_t_0_0];
          end
        end
      end
    end

  assign emi_257_out1 = emi_257_reg[1];
  assign emi_257_reg_next[0] = cfblk20_out1;
  assign emi_257_reg_next[1] = emi_257_reg[0];



  assign y1_15 = emi_257_out1 >= 8'b00000001;



  cfblk80 u_cfblk80 (.u(cfblk154_out2),  // uint8
                     .y(cfblk80_out1)  // uint8
                     );

  assign cfblk156_out1 = cfblk80_out1 + cfblk156_const_val_1;



  cfblk2 u_cfblk2 (.u(cfblk156_out1),  // uint8
                   .y(cfblk2_out1)  // uint8
                   );

  assign cfblk69_out1 = (cfblk2_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk20_out1 = cfblk69_out1 + cfblk150_out1;



  cfblk76 u_cfblk76 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_251(cfblk20_out1),  // uint8
                     .Action_Port(y1_15),
                     .emi_252(cfblk76_out1)  // uint8
                     );

  assign cfblk141_out1 = cfblk76_out1 + cfblk3_out1;



  assign cfblk36_out1 = cfblk141_out1 + cfblk36_const_val_1;



  assign cfblk48_out1 = cfblk70_out1 + cfblk179_out1;



  assign cfblk118_out1 = cfblk48_out1 + cfblk36_out1;



  assign cfblk59_out1 = cfblk118_out1 - cfblk165_out1;



  always @(posedge clk or posedge reset)
    begin : emi_169_process
      if (reset == 1'b1) begin
        for(emi_169_t_1 = 32'sd0; emi_169_t_1 <= 32'sd1; emi_169_t_1 = emi_169_t_1 + 32'sd1) begin
          emi_169_reg[emi_169_t_1] <= 16'b0111111110000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_169_t_0_0 = 32'sd0; emi_169_t_0_0 <= 32'sd1; emi_169_t_0_0 = emi_169_t_0_0 + 32'sd1) begin
            emi_169_reg[emi_169_t_0_0] <= emi_169_reg_next[emi_169_t_0_0];
          end
        end
      end
    end

  assign emi_169_out1 = emi_169_reg[1];
  assign emi_169_reg_next[0] = cfblk98_out1;
  assign emi_169_reg_next[1] = emi_169_reg[0];



  assign emi_168_out1 = emi_169_out1[14:7];



  assign y1_16 = emi_168_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_305_process
      if (reset == 1'b1) begin
        for(emi_305_t_1 = 32'sd0; emi_305_t_1 <= 32'sd1; emi_305_t_1 = emi_305_t_1 + 32'sd1) begin
          emi_305_reg[emi_305_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_305_t_0_0 = 32'sd0; emi_305_t_0_0 <= 32'sd1; emi_305_t_0_0 = emi_305_t_0_0 + 32'sd1) begin
            emi_305_reg[emi_305_t_0_0] <= emi_305_reg_next[emi_305_t_0_0];
          end
        end
      end
    end

  assign emi_305_out1 = emi_305_reg[1];
  assign emi_305_reg_next[0] = cfblk42_out1;
  assign emi_305_reg_next[1] = emi_305_reg[0];



  assign y1_17 = emi_305_out1 == 8'b11111111;



  cfblk98 u_cfblk98 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_299(cfblk42_out1),  // uint8
                     .Action_Port(y1_17),
                     .emi_300(cfblk98_out1)  // ufix16_En7
                     );

  cfblk32 u_cfblk32 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_163(cfblk98_out1),  // ufix16_En7
                     .Action_Port(y1_16),
                     .emi_164(cfblk32_out1)  // ufix16_En7
                     );

  assign cfblk88_out1 = cfblk32_out1[14:7];



  assign cfblk83_out1 = cfblk88_out1 - cfblk123_out1;



  assign cfblk67_out1 = cfblk83_out1 + cfblk67_const_val_1;



  assign cfblk39_out1 = cfblk78_out1 + cfblk67_out1;



  always @(cfblk39_out1, cfblk59_out1) begin
    cfblk153_div_temp = 9'b000000000;
    cfblk153_t_0_0 = 9'b000000000;
    if (cfblk59_out1 == 8'b00000000) begin
      cfblk153_out1 = 8'b11111111;
    end
    else begin
      cfblk153_t_0_0 = {1'b0, cfblk39_out1};
      cfblk153_div_temp = cfblk153_t_0_0 / cfblk59_out1;
      if (cfblk153_div_temp[8] != 1'b0) begin
        cfblk153_out1 = 8'b11111111;
      end
      else begin
        cfblk153_out1 = cfblk153_div_temp[7:0];
      end
    end
  end



  assign cfblk11_out1 = cfblk153_out1 + cfblk93_out1;



  cfblk161 u_cfblk161 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_98(cfblk11_out1),  // uint8
                       .Action_Port(y1_14),
                       .emi_99(cfblk161_out1)  // uint8
                       );

  assign cfblk68_out1 = cfblk161_out1 + cfblk68_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk194_process
      if (reset == 1'b1) begin
        for(cfblk194_t_1 = 32'sd0; cfblk194_t_1 <= 32'sd1; cfblk194_t_1 = cfblk194_t_1 + 32'sd1) begin
          cfblk194_reg[cfblk194_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk194_t_0_0 = 32'sd0; cfblk194_t_0_0 <= 32'sd1; cfblk194_t_0_0 = cfblk194_t_0_0 + 32'sd1) begin
            cfblk194_reg[cfblk194_t_0_0] <= cfblk194_reg_next[cfblk194_t_0_0];
          end
        end
      end
    end

  assign cfblk194_out1 = cfblk194_reg[1];
  assign cfblk194_reg_next[0] = cfblk68_out1;
  assign cfblk194_reg_next[1] = cfblk194_reg[0];



  always @(posedge clk or posedge reset)
    begin : emi_40_process
      if (reset == 1'b1) begin
        for(emi_40_t_1 = 32'sd0; emi_40_t_1 <= 32'sd1; emi_40_t_1 = emi_40_t_1 + 32'sd1) begin
          emi_40_reg[emi_40_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_40_t_0_0 = 32'sd0; emi_40_t_0_0 <= 32'sd1; emi_40_t_0_0 = emi_40_t_0_0 + 32'sd1) begin
            emi_40_reg[emi_40_t_0_0] <= emi_40_reg_next[emi_40_t_0_0];
          end
        end
      end
    end

  assign emi_40_out1 = emi_40_reg[1];
  assign emi_40_reg_next[0] = cfblk130_out1;
  assign emi_40_reg_next[1] = emi_40_reg[0];



  assign y1_18 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : cfblk204_process
      if (reset == 1'b1) begin
        for(cfblk204_t_1 = 32'sd0; cfblk204_t_1 <= 32'sd1; cfblk204_t_1 = cfblk204_t_1 + 32'sd1) begin
          cfblk204_reg[cfblk204_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk204_t_0_0 = 32'sd0; cfblk204_t_0_0 <= 32'sd1; cfblk204_t_0_0 = cfblk204_t_0_0 + 32'sd1) begin
            cfblk204_reg[cfblk204_t_0_0] <= cfblk204_reg_next[cfblk204_t_0_0];
          end
        end
      end
    end

  assign cfblk204_out1 = cfblk204_reg[1];
  assign cfblk204_reg_next[0] = cfblk159_out1;
  assign cfblk204_reg_next[1] = cfblk204_reg[0];



  always @(posedge clk or posedge reset)
    begin : emi_15_process
      if (reset == 1'b1) begin
        for(emi_15_t_1 = 32'sd0; emi_15_t_1 <= 32'sd1; emi_15_t_1 = emi_15_t_1 + 32'sd1) begin
          emi_15_reg[emi_15_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_15_t_0_0 = 32'sd0; emi_15_t_0_0 <= 32'sd1; emi_15_t_0_0 = emi_15_t_0_0 + 32'sd1) begin
            emi_15_reg[emi_15_t_0_0] <= emi_15_reg_next[emi_15_t_0_0];
          end
        end
      end
    end

  assign emi_15_out1 = emi_15_reg[1];
  assign emi_15_reg_next[0] = cfblk15_out1;
  assign emi_15_reg_next[1] = emi_15_reg[0];



  assign y1_19 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_72_process
      if (reset == 1'b1) begin
        for(emi_72_t_1 = 32'sd0; emi_72_t_1 <= 32'sd1; emi_72_t_1 = emi_72_t_1 + 32'sd1) begin
          emi_72_reg[emi_72_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_72_t_0_0 = 32'sd0; emi_72_t_0_0 <= 32'sd1; emi_72_t_0_0 = emi_72_t_0_0 + 32'sd1) begin
            emi_72_reg[emi_72_t_0_0] <= emi_72_reg_next[emi_72_t_0_0];
          end
        end
      end
    end

  assign emi_72_out1 = emi_72_reg[1];
  assign emi_72_reg_next[0] = cfblk55_out1;
  assign emi_72_reg_next[1] = emi_72_reg[0];



  assign y1_20 = emi_72_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_209_process
      if (reset == 1'b1) begin
        for(emi_209_t_1 = 32'sd0; emi_209_t_1 <= 32'sd1; emi_209_t_1 = emi_209_t_1 + 32'sd1) begin
          emi_209_reg[emi_209_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_209_t_0_0 = 32'sd0; emi_209_t_0_0 <= 32'sd1; emi_209_t_0_0 = emi_209_t_0_0 + 32'sd1) begin
            emi_209_reg[emi_209_t_0_0] <= emi_209_reg_next[emi_209_t_0_0];
          end
        end
      end
    end

  assign emi_209_out1 = emi_209_reg[1];
  assign emi_209_reg_next[0] = cfblk6_out1;
  assign emi_209_reg_next[1] = emi_209_reg[0];



  assign y1_21 = emi_209_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : cfblk199_process
      if (reset == 1'b1) begin
        for(cfblk199_t_1 = 32'sd0; cfblk199_t_1 <= 32'sd1; cfblk199_t_1 = cfblk199_t_1 + 32'sd1) begin
          cfblk199_reg[cfblk199_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk199_t_0_0 = 32'sd0; cfblk199_t_0_0 <= 32'sd1; cfblk199_t_0_0 = cfblk199_t_0_0 + 32'sd1) begin
            cfblk199_reg[cfblk199_t_0_0] <= cfblk199_reg_next[cfblk199_t_0_0];
          end
        end
      end
    end

  assign cfblk199_out1 = cfblk199_reg[1];
  assign cfblk199_reg_next[0] = cfblk155_out1;
  assign cfblk199_reg_next[1] = cfblk199_reg[0];



  assign cfblk87_out1 = cfblk93_out1 + cfblk199_out1;



  always @(posedge clk or posedge reset)
    begin : emi_161_process
      if (reset == 1'b1) begin
        for(emi_161_t_1 = 32'sd0; emi_161_t_1 <= 32'sd1; emi_161_t_1 = emi_161_t_1 + 32'sd1) begin
          emi_161_reg[emi_161_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_161_t_0_0 = 32'sd0; emi_161_t_0_0 <= 32'sd1; emi_161_t_0_0 = emi_161_t_0_0 + 32'sd1) begin
            emi_161_reg[emi_161_t_0_0] <= emi_161_reg_next[emi_161_t_0_0];
          end
        end
      end
    end

  assign emi_161_out1 = emi_161_reg[1];
  assign emi_161_reg_next[0] = cfblk7_out1;
  assign emi_161_reg_next[1] = emi_161_reg[0];



  assign y1_22 = emi_161_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_241_process
      if (reset == 1'b1) begin
        for(emi_241_t_1 = 32'sd0; emi_241_t_1 <= 32'sd1; emi_241_t_1 = emi_241_t_1 + 32'sd1) begin
          emi_241_reg[emi_241_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_241_t_0_0 = 32'sd0; emi_241_t_0_0 <= 32'sd1; emi_241_t_0_0 = emi_241_t_0_0 + 32'sd1) begin
            emi_241_reg[emi_241_t_0_0] <= emi_241_reg_next[emi_241_t_0_0];
          end
        end
      end
    end

  assign emi_241_out1 = emi_241_reg[1];
  assign emi_241_reg_next[0] = cfblk60_out1;
  assign emi_241_reg_next[1] = emi_241_reg[0];



  assign y1_23 = emi_241_out1 == 8'b11111111;



  cfblk7 u_cfblk7 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .emi_235(cfblk60_out1),  // uint8
                   .Action_Port(y1_23),
                   .emi_236(cfblk7_out1)  // uint8
                   );

  cfblk3_block u_cfblk3 (.clk(clk),
                         .reset(reset),
                         .enb(clk_enable),
                         .emi_155(cfblk7_out1),  // uint8
                         .Action_Port(y1_22),
                         .emi_156(cfblk3_out1)  // uint8
                         );

  assign cfblk159_out1 = cfblk81_out1 - cfblk3_out1;



  assign dtc_out_1 = cfblk78_out2;



  assign cfblk75_out1 = dtc_out_1;



  DotProduct_block3 u_cfblk157_inst (.in1(cfblk75_out1),  // uint8
                                     .in2(cfblk159_out1),  // uint8
                                     .out1(cfblk157_out1)  // uint8
                                     );

  assign cfblk44_out1 = cfblk41_out1 - cfblk157_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk201_process
      if (reset == 1'b1) begin
        for(cfblk201_t_1 = 32'sd0; cfblk201_t_1 <= 32'sd1; cfblk201_t_1 = cfblk201_t_1 + 32'sd1) begin
          cfblk201_reg[cfblk201_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk201_t_0_0 = 32'sd0; cfblk201_t_0_0 <= 32'sd1; cfblk201_t_0_0 = cfblk201_t_0_0 + 32'sd1) begin
            cfblk201_reg[cfblk201_t_0_0] <= cfblk201_reg_next[cfblk201_t_0_0];
          end
        end
      end
    end

  assign cfblk201_out1 = cfblk201_reg[1];
  assign cfblk201_reg_next[0] = cfblk44_out1;
  assign cfblk201_reg_next[1] = cfblk201_reg[0];



  always @(cfblk201_out1, cfblk90_out1) begin
    cfblk84_div_temp = 9'b000000000;
    cfblk84_t_0_0 = 9'b000000000;
    if (cfblk201_out1 == 8'b00000000) begin
      cfblk84_out1 = 8'b11111111;
    end
    else begin
      cfblk84_t_0_0 = {1'b0, cfblk90_out1};
      cfblk84_div_temp = cfblk84_t_0_0 / cfblk201_out1;
      if (cfblk84_div_temp[8] != 1'b0) begin
        cfblk84_out1 = 8'b11111111;
      end
      else begin
        cfblk84_out1 = cfblk84_div_temp[7:0];
      end
    end
  end



  assign cfblk78_out1 = cfblk84_out1;
  assign cfblk78_out2 = 8'b00000000;



  assign dtc_out_2 = cfblk18_out1;



  assign cfblk93_out1 = dtc_out_2;



  assign cfblk73_out1 = cfblk167_out1 + cfblk93_out1;



  assign cfblk41_out1 = cfblk167_out1 + cfblk73_out1;



  always @(posedge clk or posedge reset)
    begin : emi_193_process
      if (reset == 1'b1) begin
        for(emi_193_t_1 = 32'sd0; emi_193_t_1 <= 32'sd1; emi_193_t_1 = emi_193_t_1 + 32'sd1) begin
          emi_193_reg[emi_193_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_193_t_0_0 = 32'sd0; emi_193_t_0_0 <= 32'sd1; emi_193_t_0_0 = emi_193_t_0_0 + 32'sd1) begin
            emi_193_reg[emi_193_t_0_0] <= emi_193_reg_next[emi_193_t_0_0];
          end
        end
      end
    end

  assign emi_193_out1 = emi_193_reg[1];
  assign emi_193_reg_next[0] = cfblk14_out1;
  assign emi_193_reg_next[1] = emi_193_reg[0];



  assign y1_24 = 1'b1;



  assign cfblk14_out1 = cfblk186_out1 + cfblk49_out1;



  cfblk176 u_cfblk176 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_187(cfblk14_out1),  // uint8
                       .Action_Port(y1_24),
                       .emi_188(cfblk176_out1)  // uint8
                       );

  assign cfblk95_out1 = cfblk176_out1 + cfblk41_out1;



  assign dtc_out_3 = cfblk95_out1;



  assign cfblk52_out1 = dtc_out_3;



  always @(posedge clk or posedge reset)
    begin : emi_128_process
      if (reset == 1'b1) begin
        for(emi_128_t_1 = 32'sd0; emi_128_t_1 <= 32'sd1; emi_128_t_1 = emi_128_t_1 + 32'sd1) begin
          emi_128_reg[emi_128_t_1] <= 8'b00000001;
        end
      end
      else begin
        if (enb) begin
          for(emi_128_t_0_0 = 32'sd0; emi_128_t_0_0 <= 32'sd1; emi_128_t_0_0 = emi_128_t_0_0 + 32'sd1) begin
            emi_128_reg[emi_128_t_0_0] <= emi_128_reg_next[emi_128_t_0_0];
          end
        end
      end
    end

  assign emi_128_out1 = emi_128_reg[1];
  assign emi_128_reg_next[0] = cfblk77_out1;
  assign emi_128_reg_next[1] = emi_128_reg[0];



  assign y1_25 = emi_128_out1 >= 8'b00000001;



  always @(posedge clk or posedge reset)
    begin : emi_249_process
      if (reset == 1'b1) begin
        for(emi_249_t_1 = 32'sd0; emi_249_t_1 <= 32'sd1; emi_249_t_1 = emi_249_t_1 + 32'sd1) begin
          emi_249_reg[emi_249_t_1] <= 16'b0000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_249_t_0_0 = 32'sd0; emi_249_t_0_0 <= 32'sd1; emi_249_t_0_0 = emi_249_t_0_0 + 32'sd1) begin
            emi_249_reg[emi_249_t_0_0] <= emi_249_reg_next[emi_249_t_0_0];
          end
        end
      end
    end

  assign emi_249_out1 = emi_249_reg[1];
  assign emi_249_reg_next[0] = cfblk64_out1;
  assign emi_249_reg_next[1] = emi_249_reg[0];



  assign emi_248_out1 = emi_249_out1[14:7];



  assign y1_26 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_153_process
      if (reset == 1'b1) begin
        for(emi_153_t_1 = 32'sd0; emi_153_t_1 <= 32'sd1; emi_153_t_1 = emi_153_t_1 + 32'sd1) begin
          emi_153_reg[emi_153_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_153_t_0_0 = 32'sd0; emi_153_t_0_0 <= 32'sd1; emi_153_t_0_0 = emi_153_t_0_0 + 32'sd1) begin
            emi_153_reg[emi_153_t_0_0] <= emi_153_reg_next[emi_153_t_0_0];
          end
        end
      end
    end

  assign emi_153_out1 = emi_153_reg[1];
  assign emi_153_reg_next[0] = cfblk123_out1;
  assign emi_153_reg_next[1] = emi_153_reg[0];



  assign y1_27 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_48_process
      if (reset == 1'b1) begin
        for(emi_48_t_1 = 32'sd0; emi_48_t_1 <= 32'sd1; emi_48_t_1 = emi_48_t_1 + 32'sd1) begin
          emi_48_reg[emi_48_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_48_t_0_0 = 32'sd0; emi_48_t_0_0 <= 32'sd1; emi_48_t_0_0 = emi_48_t_0_0 + 32'sd1) begin
            emi_48_reg[emi_48_t_0_0] <= emi_48_reg_next[emi_48_t_0_0];
          end
        end
      end
    end

  assign emi_48_out1 = emi_48_reg[1];
  assign emi_48_reg_next[0] = cfblk183_out1;
  assign emi_48_reg_next[1] = emi_48_reg[0];



  assign y1_28 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_313_process
      if (reset == 1'b1) begin
        for(emi_313_t_1 = 32'sd0; emi_313_t_1 <= 32'sd1; emi_313_t_1 = emi_313_t_1 + 32'sd1) begin
          emi_313_reg[emi_313_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_313_t_0_0 = 32'sd0; emi_313_t_0_0 <= 32'sd1; emi_313_t_0_0 = emi_313_t_0_0 + 32'sd1) begin
            emi_313_reg[emi_313_t_0_0] <= emi_313_reg_next[emi_313_t_0_0];
          end
        end
      end
    end

  assign emi_313_out1 = emi_313_reg[1];
  assign emi_313_reg_next[0] = cfblk105_out1;
  assign emi_313_reg_next[1] = emi_313_reg[0];



  assign y1_29 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_281_process
      if (reset == 1'b1) begin
        for(emi_281_t_1 = 32'sd0; emi_281_t_1 <= 32'sd1; emi_281_t_1 = emi_281_t_1 + 32'sd1) begin
          emi_281_reg[emi_281_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_281_t_0_0 = 32'sd0; emi_281_t_0_0 <= 32'sd1; emi_281_t_0_0 = emi_281_t_0_0 + 32'sd1) begin
            emi_281_reg[emi_281_t_0_0] <= emi_281_reg_next[emi_281_t_0_0];
          end
        end
      end
    end

  assign emi_281_out1 = emi_281_reg[1];
  assign emi_281_reg_next[0] = cfblk117_out1;
  assign emi_281_reg_next[1] = emi_281_reg[0];



  assign y1_30 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_31_process
      if (reset == 1'b1) begin
        for(emi_31_t_1 = 32'sd0; emi_31_t_1 <= 32'sd1; emi_31_t_1 = emi_31_t_1 + 32'sd1) begin
          emi_31_reg[emi_31_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_31_t_0_0 = 32'sd0; emi_31_t_0_0 <= 32'sd1; emi_31_t_0_0 = emi_31_t_0_0 + 32'sd1) begin
            emi_31_reg[emi_31_t_0_0] <= emi_31_reg_next[emi_31_t_0_0];
          end
        end
      end
    end

  assign emi_31_out1 = emi_31_reg[1];
  assign emi_31_reg_next[0] = cfblk178_out1;
  assign emi_31_reg_next[1] = emi_31_reg[0];



  assign y1_31 = 1'b1;



  cfblk117 u_cfblk117 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_25(cfblk178_out1),  // uint8
                       .Action_Port(y1_31),
                       .emi_26(cfblk117_out1)  // uint8
                       );

  cfblk105 u_cfblk105 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_275(cfblk117_out1),  // uint8
                       .Action_Port(y1_30),
                       .emi_276(cfblk105_out1)  // uint8
                       );

  cfblk99 u_cfblk99 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_307(cfblk105_out1),  // uint8
                     .Action_Port(y1_29),
                     .emi_308(cfblk99_out1)  // uint8
                     );

  assign cfblk183_out1 = cfblk186_out1 - cfblk99_out1;



  cfblk123 u_cfblk123 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_42(cfblk183_out1),  // uint8
                       .Action_Port(y1_28),
                       .emi_43(cfblk123_out1)  // uint8
                       );

  cfblk64 u_cfblk64 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_147(cfblk123_out1),  // uint8
                     .Action_Port(y1_27),
                     .emi_148(cfblk64_out1)  // ufix16_En7
                     );

  cfblk74 u_cfblk74 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_243(cfblk64_out1),  // ufix16_En7
                     .Action_Port(y1_26),
                     .emi_244(cfblk74_out1)  // ufix16_En7
                     );

  assign cfblk77_add_cast = {16'b0, cfblk16_out1};
  assign cfblk77_add_cast_1 = {16'b0, cfblk74_out1};
  assign cfblk77_add_temp = cfblk77_add_cast + cfblk77_add_cast_1;
  assign cfblk77_out1 = cfblk77_add_temp[14:7];



  cfblk174 u_cfblk174 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_122(cfblk77_out1),  // uint8
                       .Action_Port(y1_25),
                       .emi_123(cfblk174_out1)  // uint8
                       );

  assign cfblk47_out1 = cfblk174_out1 + cfblk52_out1;



  assign cfblk90_out1 = cfblk112_out1 + cfblk47_out1;



  DotProduct_block5 u_cfblk172_inst (.in1(cfblk218_out1),  // uint8
                                     .in2(cfblk90_out1),  // uint8
                                     .out1(cfblk172_out1)  // uint8
                                     );

  DotProduct_block u_cfblk139_inst (.in1(cfblk172_out1),  // uint8
                                    .in2(cfblk49_out1),  // uint8
                                    .out1(cfblk139_out1)  // uint8
                                    );

  cfblk182 u_cfblk182 (.u(cfblk139_out1),  // uint8
                       .y(cfblk182_out1)  // uint8
                       );

  cfblk81 u_cfblk81 (.u(cfblk182_out1),  // uint8
                     .y(cfblk81_out1)  // uint8
                     );

  always @(cfblk78_out2, cfblk81_out1) begin
    cfblk132_div_temp = 9'b000000000;
    cfblk132_t_0_0 = 9'b000000000;
    if (cfblk78_out2 == 8'b00000000) begin
      cfblk132_out1 = 8'b11111111;
    end
    else begin
      cfblk132_t_0_0 = {1'b0, cfblk81_out1};
      cfblk132_div_temp = cfblk132_t_0_0 / cfblk78_out2;
      if (cfblk132_div_temp[8] != 1'b0) begin
        cfblk132_out1 = 8'b11111111;
      end
      else begin
        cfblk132_out1 = cfblk132_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk203_process
      if (reset == 1'b1) begin
        for(cfblk203_t_1 = 32'sd0; cfblk203_t_1 <= 32'sd1; cfblk203_t_1 = cfblk203_t_1 + 32'sd1) begin
          cfblk203_reg[cfblk203_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk203_t_0_0 = 32'sd0; cfblk203_t_0_0 <= 32'sd1; cfblk203_t_0_0 = cfblk203_t_0_0 + 32'sd1) begin
            cfblk203_reg[cfblk203_t_0_0] <= cfblk203_reg_next[cfblk203_t_0_0];
          end
        end
      end
    end

  assign cfblk203_out1 = cfblk203_reg[1];
  assign cfblk203_reg_next[0] = cfblk132_out1;
  assign cfblk203_reg_next[1] = cfblk203_reg[0];



  assign cfblk127_out1 = cfblk203_out1 + cfblk87_out1;



  DotProduct_block7 u_cfblk6_inst (.in1(cfblk127_out1),  // uint8
                                   .in2(cfblk94_out1),  // uint8
                                   .out1(cfblk6_out1)  // uint8
                                   );

  cfblk55 u_cfblk55 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_203(cfblk6_out1),  // uint8
                     .Action_Port(y1_21),
                     .emi_204(cfblk55_out1)  // uint8
                     );

  cfblk28_block u_cfblk28 (.clk(clk),
                           .reset(reset),
                           .enb(clk_enable),
                           .emi_66(cfblk55_out1),  // uint8
                           .Action_Port(y1_20),
                           .emi_67(cfblk28_out1)  // uint8
                           );

  always @(posedge clk or posedge reset)
    begin : cfblk215_process
      if (reset == 1'b1) begin
        for(cfblk215_t_1 = 32'sd0; cfblk215_t_1 <= 32'sd1; cfblk215_t_1 = cfblk215_t_1 + 32'sd1) begin
          cfblk215_reg[cfblk215_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk215_t_0_0 = 32'sd0; cfblk215_t_0_0 <= 32'sd1; cfblk215_t_0_0 = cfblk215_t_0_0 + 32'sd1) begin
            cfblk215_reg[cfblk215_t_0_0] <= cfblk215_reg_next[cfblk215_t_0_0];
          end
        end
      end
    end

  assign cfblk215_out1 = cfblk215_reg[1];
  assign cfblk215_reg_next[0] = cfblk28_out1;
  assign cfblk215_reg_next[1] = cfblk215_reg[0];



  always @(cfblk215_out1, cfblk33_out1) begin
    cfblk147_div_temp = 9'b000000000;
    cfblk147_t_0_0 = 9'b000000000;
    if (cfblk215_out1 == 8'b00000000) begin
      cfblk147_out1 = 8'b11111111;
    end
    else begin
      cfblk147_t_0_0 = {1'b0, cfblk33_out1};
      cfblk147_div_temp = cfblk147_t_0_0 / cfblk215_out1;
      if (cfblk147_div_temp[8] != 1'b0) begin
        cfblk147_out1 = 8'b11111111;
      end
      else begin
        cfblk147_out1 = cfblk147_div_temp[7:0];
      end
    end
  end



  cfblk189 u_cfblk189 (.In1(cfblk147_out1),  // uint8
                       .Out1(cfblk189_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : emi_177_process
      if (reset == 1'b1) begin
        for(emi_177_t_1 = 32'sd0; emi_177_t_1 <= 32'sd1; emi_177_t_1 = emi_177_t_1 + 32'sd1) begin
          emi_177_reg[emi_177_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_177_t_0_0 = 32'sd0; emi_177_t_0_0 <= 32'sd1; emi_177_t_0_0 = emi_177_t_0_0 + 32'sd1) begin
            emi_177_reg[emi_177_t_0_0] <= emi_177_reg_next[emi_177_t_0_0];
          end
        end
      end
    end

  assign emi_177_out1 = emi_177_reg[1];
  assign emi_177_reg_next[0] = cfblk27_out1;
  assign emi_177_reg_next[1] = emi_177_reg[0];



  assign y1_32 = emi_177_out1 == 8'b11111111;



  cfblk37_block u_cfblk37 (.clk(clk),
                           .reset(reset),
                           .enb(clk_enable),
                           .emi_171(cfblk27_out1),  // uint8
                           .Action_Port(y1_32),
                           .emi_172(cfblk37_out1)  // uint8
                           );

  assign cfblk94_out1 = cfblk37_out1 + cfblk189_out1;



  always @(cfblk167_out1, cfblk94_out1) begin
    cfblk42_div_temp = 9'b000000000;
    cfblk42_t_0_0 = 9'b000000000;
    if (cfblk167_out1 == 8'b00000000) begin
      cfblk42_out1 = 8'b11111111;
    end
    else begin
      cfblk42_t_0_0 = {1'b0, cfblk94_out1};
      cfblk42_div_temp = cfblk42_t_0_0 / cfblk167_out1;
      if (cfblk42_div_temp[8] != 1'b0) begin
        cfblk42_out1 = 8'b11111111;
      end
      else begin
        cfblk42_out1 = cfblk42_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk210_process
      if (reset == 1'b1) begin
        for(cfblk210_t_1 = 32'sd0; cfblk210_t_1 <= 32'sd1; cfblk210_t_1 = cfblk210_t_1 + 32'sd1) begin
          cfblk210_reg[cfblk210_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk210_t_0_0 = 32'sd0; cfblk210_t_0_0 <= 32'sd1; cfblk210_t_0_0 = cfblk210_t_0_0 + 32'sd1) begin
            cfblk210_reg[cfblk210_t_0_0] <= cfblk210_reg_next[cfblk210_t_0_0];
          end
        end
      end
    end

  assign cfblk210_out1 = cfblk210_reg[1];
  assign cfblk210_reg_next[0] = cfblk42_out1;
  assign cfblk210_reg_next[1] = cfblk210_reg[0];



  always @(posedge clk or posedge reset)
    begin : emi_56_process
      if (reset == 1'b1) begin
        for(emi_56_t_1 = 32'sd0; emi_56_t_1 <= 32'sd1; emi_56_t_1 = emi_56_t_1 + 32'sd1) begin
          emi_56_reg[emi_56_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_56_t_0_0 = 32'sd0; emi_56_t_0_0 <= 32'sd1; emi_56_t_0_0 = emi_56_t_0_0 + 32'sd1) begin
            emi_56_reg[emi_56_t_0_0] <= emi_56_reg_next[emi_56_t_0_0];
          end
        end
      end
    end

  assign emi_56_out1 = emi_56_reg[1];
  assign emi_56_reg_next[0] = cfblk125_out1;
  assign emi_56_reg_next[1] = emi_56_reg[0];



  assign y1_33 = emi_56_out1 == 8'b11111111;



  assign cfblk125_out1 = cfblk51_out1 + cfblk188_out1;



  cfblk126 u_cfblk126 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_50(cfblk125_out1),  // uint8
                       .Action_Port(y1_33),
                       .emi_51(cfblk126_out1)  // ufix16_En7
                       );

  assign cfblk50_add_cast = {16'b0, cfblk126_out1};
  assign cfblk50_add_cast_1 = {17'b0, {cfblk186_out1, 7'b0000000}};
  assign cfblk50_add_temp = cfblk50_add_cast + cfblk50_add_cast_1;
  assign cfblk50_out1 = cfblk50_add_temp[14:7];



  always @(posedge clk or posedge reset)
    begin : cfblk213_process
      if (reset == 1'b1) begin
        for(cfblk213_t_1 = 32'sd0; cfblk213_t_1 <= 32'sd1; cfblk213_t_1 = cfblk213_t_1 + 32'sd1) begin
          cfblk213_reg[cfblk213_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk213_t_0_0 = 32'sd0; cfblk213_t_0_0 <= 32'sd1; cfblk213_t_0_0 = cfblk213_t_0_0 + 32'sd1) begin
            cfblk213_reg[cfblk213_t_0_0] <= cfblk213_reg_next[cfblk213_t_0_0];
          end
        end
      end
    end

  assign cfblk213_out1 = cfblk213_reg[1];
  assign cfblk213_reg_next[0] = cfblk50_out1;
  assign cfblk213_reg_next[1] = cfblk213_reg[0];



  always @(posedge clk or posedge reset)
    begin : emi_145_process
      if (reset == 1'b1) begin
        for(emi_145_t_1 = 32'sd0; emi_145_t_1 <= 32'sd1; emi_145_t_1 = emi_145_t_1 + 32'sd1) begin
          emi_145_reg[emi_145_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_145_t_0_0 = 32'sd0; emi_145_t_0_0 <= 32'sd1; emi_145_t_0_0 = emi_145_t_0_0 + 32'sd1) begin
            emi_145_reg[emi_145_t_0_0] <= emi_145_reg_next[emi_145_t_0_0];
          end
        end
      end
    end

  assign emi_145_out1 = emi_145_reg[1];
  assign emi_145_reg_next[0] = cfblk5_out1;
  assign emi_145_reg_next[1] = emi_145_reg[0];



  assign y1_34 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_273_process
      if (reset == 1'b1) begin
        for(emi_273_t_1 = 32'sd0; emi_273_t_1 <= 32'sd1; emi_273_t_1 = emi_273_t_1 + 32'sd1) begin
          emi_273_reg[emi_273_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_273_t_0_0 = 32'sd0; emi_273_t_0_0 <= 32'sd1; emi_273_t_0_0 = emi_273_t_0_0 + 32'sd1) begin
            emi_273_reg[emi_273_t_0_0] <= emi_273_reg_next[emi_273_t_0_0];
          end
        end
      end
    end

  assign emi_273_out1 = emi_273_reg[1];
  assign emi_273_reg_next[0] = cfblk146_out1;
  assign emi_273_reg_next[1] = emi_273_reg[0];



  assign y1_35 = emi_273_out1 == 8'b11111111;



  DotProduct_block1 u_cfblk146_inst (.in1(cfblk179_out2),  // uint8
                                     .in2(cfblk51_out1),  // uint8
                                     .out1(cfblk146_out1)  // uint8
                                     );

  cfblk197 u_cfblk197 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_267(cfblk146_out1),  // uint8
                       .Action_Port(y1_35),
                       .emi_268(cfblk197_out1)  // uint8
                       );

  assign cfblk175_out1 = cfblk65_out1 + cfblk175_const_val_1;



  assign cfblk158_out1 = cfblk175_out1 + cfblk197_out1;



  assign dtc_out_4 = cfblk158_out1;



  assign cfblk21_out1 = dtc_out_4;



  cfblk5 u_cfblk5 (.u(cfblk21_out1),  // uint8
                   .y(cfblk5_out1)  // uint8
                   );

  cfblk218 u_cfblk218 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_139(cfblk5_out1),  // uint8
                       .Action_Port(y1_34),
                       .emi_140(cfblk218_out1)  // uint8
                       );

  assign cfblk31_out1 = cfblk218_out1 + cfblk213_out1;



  assign cfblk15_out1 = cfblk31_out1 + cfblk210_out1;



  cfblk102 u_cfblk102 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_9(cfblk15_out1),  // uint8
                       .Action_Port(y1_19),
                       .emi_10(cfblk102_out1)  // uint8
                       );

  assign cfblk130_out1 = cfblk102_out1 + cfblk204_out1;



  cfblk12 u_cfblk12 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_33(cfblk130_out1),  // uint8
                     .Action_Port(y1_18),
                     .emi_34(cfblk12_out1),  // uint8
                     .emi_35(cfblk12_out2)  // uint8
                     );

  assign cfblk160_out1 = (cfblk12_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk70 u_cfblk70 (.u(cfblk160_out1),  // uint8
                     .y(cfblk70_out1)  // uint8
                     );

  always @(cfblk194_out1, cfblk70_out1) begin
    cfblk51_div_temp = 9'b000000000;
    cfblk51_t_0_0 = 9'b000000000;
    if (cfblk194_out1 == 8'b00000000) begin
      cfblk51_out1 = 8'b11111111;
    end
    else begin
      cfblk51_t_0_0 = {1'b0, cfblk70_out1};
      cfblk51_div_temp = cfblk51_t_0_0 / cfblk194_out1;
      if (cfblk51_div_temp[8] != 1'b0) begin
        cfblk51_out1 = 8'b11111111;
      end
      else begin
        cfblk51_out1 = cfblk51_div_temp[7:0];
      end
    end
  end



  assign cfblk56_out1 = cfblk140_out1 + cfblk133_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk205_process
      if (reset == 1'b1) begin
        for(cfblk205_t_1 = 32'sd0; cfblk205_t_1 <= 32'sd1; cfblk205_t_1 = cfblk205_t_1 + 32'sd1) begin
          cfblk205_reg[cfblk205_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk205_t_0_0 = 32'sd0; cfblk205_t_0_0 <= 32'sd1; cfblk205_t_0_0 = cfblk205_t_0_0 + 32'sd1) begin
            cfblk205_reg[cfblk205_t_0_0] <= cfblk205_reg_next[cfblk205_t_0_0];
          end
        end
      end
    end

  assign cfblk205_out1 = cfblk205_reg[1];
  assign cfblk205_reg_next[0] = cfblk56_out1;
  assign cfblk205_reg_next[1] = cfblk205_reg[0];



  always @(cfblk205_out1, cfblk51_out1) begin
    cfblk18_div_temp = 9'b000000000;
    cfblk18_t_0_0 = 9'b000000000;
    if (cfblk51_out1 == 8'b00000000) begin
      cfblk18_out1 = 8'b11111111;
    end
    else begin
      cfblk18_t_0_0 = {1'b0, cfblk205_out1};
      cfblk18_div_temp = cfblk18_t_0_0 / cfblk51_out1;
      if (cfblk18_div_temp[8] != 1'b0) begin
        cfblk18_out1 = 8'b11111111;
      end
      else begin
        cfblk18_out1 = cfblk18_div_temp[7:0];
      end
    end
  end



  DotProduct_block6 u_cfblk45_inst (.in1(cfblk18_out1),  // uint8
                                    .in2(cfblk58_out1),  // uint8
                                    .out1(cfblk45_out1)  // uint8
                                    );

  cfblk96 u_cfblk96 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_291(cfblk45_out1),  // uint8
                     .Action_Port(y1_12),
                     .emi_292(cfblk96_out1)  // uint8
                     );

  DotProduct_block9 u_cfblk86_inst (.in1(cfblk96_out1),  // uint8
                                    .in2(cfblk92_out1),  // uint8
                                    .out1(cfblk86_out1)  // uint8
                                    );

  assign cfblk40_out1 = cfblk86_out1 - cfblk67_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk193_process
      if (reset == 1'b1) begin
        for(cfblk193_t_1 = 32'sd0; cfblk193_t_1 <= 32'sd1; cfblk193_t_1 = cfblk193_t_1 + 32'sd1) begin
          cfblk193_reg[cfblk193_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk193_t_0_0 = 32'sd0; cfblk193_t_0_0 <= 32'sd1; cfblk193_t_0_0 = cfblk193_t_0_0 + 32'sd1) begin
            cfblk193_reg[cfblk193_t_0_0] <= cfblk193_reg_next[cfblk193_t_0_0];
          end
        end
      end
    end

  assign cfblk193_out1 = cfblk193_reg[1];
  assign cfblk193_reg_next[0] = cfblk40_out1;
  assign cfblk193_reg_next[1] = cfblk193_reg[0];



  assign cfblk119_out1 = cfblk193_out1 + cfblk164_out1;



  assign cfblk62_out1 = cfblk119_out1 - cfblk196_out1;



  assign dtc_out_5 = cfblk62_out1;



  assign cfblk65_out1 = dtc_out_5;



  assign cfblk27_out1 = cfblk65_out1 + cfblk27_const_val_1;



  assign cfblk108_out1 = cfblk151_out1 - cfblk27_out1;



  cfblk188 u_cfblk188 (.In1(cfblk108_out1),  // uint8
                       .Out1(cfblk188_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk212_process
      if (reset == 1'b1) begin
        for(cfblk212_t_1 = 32'sd0; cfblk212_t_1 <= 32'sd1; cfblk212_t_1 = cfblk212_t_1 + 32'sd1) begin
          cfblk212_reg[cfblk212_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk212_t_0_0 = 32'sd0; cfblk212_t_0_0 <= 32'sd1; cfblk212_t_0_0 = cfblk212_t_0_0 + 32'sd1) begin
            cfblk212_reg[cfblk212_t_0_0] <= cfblk212_reg_next[cfblk212_t_0_0];
          end
        end
      end
    end

  assign cfblk212_out1 = cfblk212_reg[1];
  assign cfblk212_reg_next[0] = cfblk188_out1;
  assign cfblk212_reg_next[1] = cfblk212_reg[0];



  DotProduct u_cfblk106_inst (.in1(cfblk212_out1),  // uint8
                              .in2(cfblk66_out1),  // uint8
                              .out1(cfblk106_out1)  // uint8
                              );

  assign dtc_out_6 = cfblk106_out1;



  assign cfblk25_out1 = dtc_out_6;



  always @(posedge clk or posedge reset)
    begin : cfblk217_process
      if (reset == 1'b1) begin
        for(cfblk217_t_1 = 32'sd0; cfblk217_t_1 <= 32'sd1; cfblk217_t_1 = cfblk217_t_1 + 32'sd1) begin
          cfblk217_reg[cfblk217_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk217_t_0_0 = 32'sd0; cfblk217_t_0_0 <= 32'sd1; cfblk217_t_0_0 = cfblk217_t_0_0 + 32'sd1) begin
            cfblk217_reg[cfblk217_t_0_0] <= cfblk217_reg_next[cfblk217_t_0_0];
          end
        end
      end
    end

  assign cfblk217_out1 = cfblk217_reg[1];
  assign cfblk217_reg_next[0] = cfblk25_out1;
  assign cfblk217_reg_next[1] = cfblk217_reg[0];



  always @(posedge clk or posedge reset)
    begin : emi_137_process
      if (reset == 1'b1) begin
        for(emi_137_t_1 = 32'sd0; emi_137_t_1 <= 32'sd1; emi_137_t_1 = emi_137_t_1 + 32'sd1) begin
          emi_137_reg[emi_137_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_137_t_0_0 = 32'sd0; emi_137_t_0_0 <= 32'sd1; emi_137_t_0_0 = emi_137_t_0_0 + 32'sd1) begin
            emi_137_reg[emi_137_t_0_0] <= emi_137_reg_next[emi_137_t_0_0];
          end
        end
      end
    end

  assign emi_137_out1 = emi_137_reg[1];
  assign emi_137_reg_next[0] = cfblk155_out1;
  assign emi_137_reg_next[1] = emi_137_reg[0];



  assign y1_36 = 1'b1;



  cfblk179 u_cfblk179 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_130(cfblk155_out1),  // uint8
                       .Action_Port(y1_36),
                       .emi_131(cfblk179_out1),  // uint8
                       .emi_132(cfblk179_out2)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk198_process
      if (reset == 1'b1) begin
        for(cfblk198_t_1 = 32'sd0; cfblk198_t_1 <= 32'sd1; cfblk198_t_1 = cfblk198_t_1 + 32'sd1) begin
          cfblk198_reg[cfblk198_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk198_t_0_0 = 32'sd0; cfblk198_t_0_0 <= 32'sd1; cfblk198_t_0_0 = cfblk198_t_0_0 + 32'sd1) begin
            cfblk198_reg[cfblk198_t_0_0] <= cfblk198_reg_next[cfblk198_t_0_0];
          end
        end
      end
    end

  assign cfblk198_out1 = cfblk198_reg[1];
  assign cfblk198_reg_next[0] = cfblk179_out2;
  assign cfblk198_reg_next[1] = cfblk198_reg[0];



  assign cfblk114_out1 = cfblk1_out1 - cfblk198_out1;



  assign cfblk133_out1 = cfblk114_out1 + cfblk217_out1;



  DotProduct_block8 u_cfblk71_inst (.in1(cfblk133_out1),  // uint8
                                    .in2(cfblk208_out1),  // uint8
                                    .out1(cfblk71_out1)  // uint8
                                    );

  assign cfblk33_out1 = cfblk71_out1;
  assign cfblk33_out2 = 8'b00000000;



  cfblk13 u_cfblk13 (.u(cfblk33_out2),  // uint8
                     .y(cfblk13_out1)  // uint8
                     );

  assign cfblk154_out1 = cfblk13_out1;
  assign cfblk154_out2 = 8'b00000000;



  cfblk103 u_cfblk103 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_114(cfblk154_out2),  // uint8
                       .Action_Port(y1_7),
                       .emi_115(cfblk103_out1)  // uint8
                       );

  always @(cfblk103_out1, cfblk104_out1) begin
    cfblk120_div_temp = 9'b000000000;
    cfblk120_t_0_0 = 9'b000000000;
    if (cfblk104_out1 == 8'b00000000) begin
      cfblk120_out1 = 8'b11111111;
    end
    else begin
      cfblk120_t_0_0 = {1'b0, cfblk103_out1};
      cfblk120_div_temp = cfblk120_t_0_0 / cfblk104_out1;
      if (cfblk120_div_temp[8] != 1'b0) begin
        cfblk120_out1 = 8'b11111111;
      end
      else begin
        cfblk120_out1 = cfblk120_div_temp[7:0];
      end
    end
  end



  cfblk155 u_cfblk155 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_82(cfblk120_out1),  // uint8
                       .Action_Port(y1_6),
                       .emi_83(cfblk155_out1)  // uint8
                       );

  assign cfblk134_out1 = cfblk109_out1 + cfblk151_out1;



  assign cfblk107_out1 = cfblk134_out1 - cfblk187_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk211_process
      if (reset == 1'b1) begin
        for(cfblk211_t_1 = 32'sd0; cfblk211_t_1 <= 32'sd1; cfblk211_t_1 = cfblk211_t_1 + 32'sd1) begin
          cfblk211_reg[cfblk211_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk211_t_0_0 = 32'sd0; cfblk211_t_0_0 <= 32'sd1; cfblk211_t_0_0 = cfblk211_t_0_0 + 32'sd1) begin
            cfblk211_reg[cfblk211_t_0_0] <= cfblk211_reg_next[cfblk211_t_0_0];
          end
        end
      end
    end

  assign cfblk211_out1 = cfblk211_reg[1];
  assign cfblk211_reg_next[0] = cfblk107_out1;
  assign cfblk211_reg_next[1] = cfblk211_reg[0];



  assign cfblk122_out1 = cfblk211_out1 + cfblk155_out1;



  assign cfblk169_out1 = cfblk122_out1 + cfblk214_out1;



  assign cfblk171_out1 = cfblk169_out1 + cfblk171_const_val_1;



  assign dtc_out_7 = cfblk171_out1;



  assign cfblk115_out1 = dtc_out_7;



  cfblk49 u_cfblk49 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_195(cfblk115_out1),  // uint8
                     .Action_Port(y1_5),
                     .emi_196(cfblk49_out1)  // uint8
                     );

  assign dtc_out_8 = cfblk49_out1;



  assign cfblk109_out1 = dtc_out_8;



  assign cfblk178_out1 = cfblk4_out1 + cfblk109_out1;



  assign dtc_out_9 = cfblk178_out1;



  assign cfblk124_out1 = dtc_out_9;



  assign cfblk19_out1 = cfblk124_out1 - cfblk207_out1;



  assign dtc_out_10 = cfblk19_out1;



  assign cfblk151_out1 = dtc_out_10;



  DotProduct_block2 u_cfblk150_inst (.in1(cfblk151_out1),  // uint8
                                     .in2(cfblk202_out1),  // uint8
                                     .out1(cfblk150_out1)  // uint8
                                     );

  assign cfblk91_out1 = cfblk150_out1 + cfblk150_out1;



  assign dtc_out_11 = cfblk91_out1;



  assign cfblk167_out1 = dtc_out_11;



  DotProduct_block4 u_cfblk162_inst (.in1(cfblk167_out1),  // uint8
                                     .in2(cfblk62_out1),  // uint8
                                     .out1(cfblk162_out1)  // uint8
                                     );

  assign cfblk180_out1 = cfblk162_out1 - cfblk163_out1;



  cfblk57_block u_cfblk57 (.clk(clk),
                           .reset(reset),
                           .enb(clk_enable),
                           .emi_211(cfblk180_out1),  // uint8
                           .Action_Port(y1_3),
                           .emi_212(cfblk57_out1)  // uint8
                           );

  cfblk60 u_cfblk60 (.u(cfblk57_out1),  // uint8
                     .y(cfblk60_out1)  // uint8
                     );

  assign cfblk54_out1 = cfblk60_out1 + cfblk120_out1;



  assign cfblk34_out1 = cfblk54_out1 + cfblk105_out1;



  cfblk129 u_cfblk129 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_58(cfblk34_out1),  // uint8
                       .Action_Port(y1_2),
                       .emi_59(cfblk129_out1)  // uint8
                       );

  assign cfblk111_out1 = cfblk129_out1 + cfblk151_out1;



  assign cfblk100_out1 = cfblk111_out1 + cfblk141_out1;



  assign cfblk22_out1 = cfblk100_out1;
  assign cfblk22_out2 = 8'b00000000;



  assign cfblk140_out1 = (cfblk22_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk112_out1 = cfblk140_out1 - cfblk97_out1;



  assign Hdl_out = cfblk112_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

