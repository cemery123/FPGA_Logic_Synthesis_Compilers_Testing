// -------------------------------------------------------------
// 
// File Name: E:\zgl\gen_2\slemi\emi_results\2024-05-23-05-35-36\SampleModel71194\Verilog_hdlsrc\sampleModel71194_pp_7_1_sub\Subsystem.v
// Created: 2024-05-23 05:41:31
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Hdl_out                       ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: sampleModel71194_pp_7_1_sub/Subsystem
// Hierarchy Level: 0
// Model version: 1.1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset,
           clk_enable,
           ce_out,
           Hdl_out);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [7:0] Hdl_out;  // uint8


  wire enb;
  wire [7:0] cfblk117_const_val_1;  // uint8
  wire [7:0] cfblk156_out1;  // uint8
  wire [7:0] cfblk86_const_val_1;  // uint8
  wire [7:0] cfblk53_const_val_1;  // uint8
  wire [7:0] cfblk69_const_val_1;  // uint8
  wire bitMask_for_cfblk8;
  wire [7:0] cfblk98_const_val_1;  // uint8
  wire [7:0] cfblk157_out1;  // uint8
  wire [7:0] cfblk34_const_val_1;  // uint8
  wire [7:0] cfblk71_const_val_1;  // uint8
  wire [7:0] cfblk174_out1;  // uint8
  reg [7:0] emi_7_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_7_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_7_out1;  // uint8
  wire y1;
  wire [7:0] cfblk151_out1;  // uint8
  reg [7:0] emi_81_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_81_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_81_out1;  // uint8
  wire y1_1;
  wire [7:0] cfblk22_out1;  // uint8
  reg [7:0] emi_228_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_228_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_228_out1;  // uint8
  wire y1_2;
  wire [7:0] cfblk111_out1;  // uint8
  reg [7:0] emi_40_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_40_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_40_out1;  // uint8
  wire y1_3;
  wire [7:0] cfblk49_out1;  // uint8
  reg [7:0] cfblk178_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk178_out1;  // uint8
  wire [7:0] cfblk98_out1;  // uint8
  wire [7:0] cfblk130_out1;  // uint8
  wire [7:0] cfblk52_out1;  // uint8
  reg [7:0] cfblk41_out1;  // uint8
  reg [7:0] emi_15_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_15_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_15_out1;  // uint8
  wire y1_4;
  wire [7:0] cfblk71_out1;  // uint8
  wire [7:0] cfblk72_out1;  // uint8
  wire [7:0] cfblk122_out1;  // uint8
  wire [7:0] cfblk142_out1;  // uint8
  reg [7:0] cfblk197_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk197_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk197_out1;  // uint8
  reg [7:0] cfblk92_out1;  // uint8
  reg [7:0] emi_210_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_210_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_210_out1;  // uint8
  wire y1_5;
  wire [7:0] cfblk17_out1;  // uint8
  wire [7:0] cfblk220_out1;  // uint8
  reg [7:0] cfblk80_out1;  // uint8
  reg [7:0] cfblk186_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk186_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk186_out1;  // uint8
  wire [7:0] cfblk59_out1;  // uint8
  wire [7:0] cfblk23_out1;  // uint8
  wire [7:0] cfblk89_out1;  // uint8
  wire [7:0] cfblk99_out1;  // uint8
  reg [7:0] emi_261_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_261_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_261_out1;  // uint8
  wire y1_6;
  wire [7:0] cfblk88_out1;  // uint8
  wire [7:0] cfblk128_out1;  // uint8
  wire [7:0] cfblk77_out1;  // uint8
  reg [7:0] cfblk198_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk198_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk198_out1;  // uint8
  reg [7:0] emi_130_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_130_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_130_out1;  // uint8
  wire y1_7;
  wire [7:0] cfblk206_out1;  // uint8
  reg [7:0] emi_122_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_122_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_122_out1;  // uint8
  wire y1_8;
  wire [7:0] cfblk29_out1;  // uint8
  reg [7:0] emi_146_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_146_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_146_out1;  // uint8
  wire y1_9;
  wire [7:0] cfblk38_out1;  // uint8
  reg [7:0] cfblk182_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk182_out1;  // uint8
  wire [7:0] cfblk112_out1;  // uint8
  reg [7:0] emi_269_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_269_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_269_out1;  // uint8
  wire y1_10;
  wire [7:0] cfblk145_out1;  // uint8
  reg [7:0] emi_23_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_23_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_23_out1;  // uint8
  wire y1_11;
  wire [7:0] cfblk11_out1;  // uint8
  wire [7:0] cfblk120_out1;  // uint8
  reg [7:0] emi_89_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_89_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_89_out1;  // uint8
  wire y1_12;
  wire [7:0] cfblk90_out1;  // uint8
  wire [7:0] dtc_out;  // ufix8
  wire [7:0] cfblk146_out1;  // uint8
  reg [7:0] cfblk183_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk183_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk183_out1;  // uint8
  wire [7:0] cfblk58_out1;  // uint8
  wire [7:0] dtc_out_1;  // ufix8
  wire [7:0] cfblk68_out1;  // uint8
  wire [7:0] cfblk7_out1;  // uint8
  wire [7:0] cfblk70_out1;  // uint8
  reg [7:0] cfblk21_out1;  // uint8
  reg [7:0] emi_326_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_326_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_326_out1;  // uint8
  wire y1_13;
  wire [7:0] cfblk63_out1;  // uint8
  reg [7:0] emi_73_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_73_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_73_out1;  // uint8
  wire y1_14;
  wire [7:0] cfblk136_out1;  // uint8
  wire [7:0] cfblk122_out2;  // uint8
  wire [7:0] cfblk137_out1;  // uint8
  wire [7:0] cfblk93_out1;  // uint8
  reg [7:0] cfblk171_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk171_out1;  // uint8
  wire [7:0] cfblk108_out1;  // uint8
  reg [7:0] emi_317_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_317_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_317_out1;  // uint8
  wire y1_15;
  wire [7:0] cfblk93_out2;  // uint8
  wire [7:0] cfblk134_out1;  // uint8
  wire [7:0] cfblk144_out1;  // uint8
  wire [7:0] cfblk60_out1;  // uint8
  reg [7:0] emi_252_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_252_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_252_out1;  // uint8
  wire y1_16;
  wire [7:0] cfblk216_out1;  // uint8
  wire [7:0] cfblk9_out1;  // uint8
  wire [7:0] cfblk126_out1;  // uint8
  reg [7:0] cfblk192_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk192_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk192_out1;  // uint8
  wire [7:0] cfblk56_out1;  // uint8
  wire [7:0] cfblk39_out1;  // uint8
  reg [7:0] cfblk184_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk184_out1;  // uint8
  wire [7:0] cfblk40_out1;  // uint8
  wire [7:0] cfblk95_out1;  // uint8
  reg [7:0] cfblk173_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk173_out1;  // uint8
  reg [7:0] emi_170_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_170_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_170_out1;  // uint8
  wire y1_17;
  wire [7:0] cfblk27_out1;  // uint8
  wire [7:0] cfblk56_out2;  // uint8
  wire cfblk56_out2_is_not0;
  reg [7:0] emi_154_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_154_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_154_out1;  // uint8
  wire y1_18;
  wire [7:0] cfblk153_out1;  // uint8
  wire [7:0] cfblk74_out1;  // uint8
  reg [7:0] cfblk191_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk191_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk191_out1;  // uint8
  wire [7:0] cfblk69_out1;  // uint8
  reg [7:0] emi_301_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_301_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_301_out1;  // uint8
  wire y1_19;
  wire [7:0] cfblk30_out1;  // uint8
  wire [7:0] cfblk160_out1;  // uint8
  reg [7:0] cfblk82_out1;  // uint8
  reg [7:0] cfblk185_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk185_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk185_out1;  // uint8
  wire [7:0] cfblk109_out1;  // uint8
  wire [7:0] cfblk131_out1;  // uint8
  reg [7:0] emi_285_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_285_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_285_out1;  // uint8
  wire y1_20;
  wire [7:0] cfblk57_out1;  // uint8
  reg [7:0] emi_49_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_49_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_49_out1;  // uint8
  wire y1_21;
  wire [7:0] cfblk100_out1;  // uint8
  reg [7:0] emi_219_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_219_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_219_out1;  // uint8
  wire y1_22;
  wire [7:0] cfblk65_out2;  // uint8
  wire [7:0] cfblk53_out1;  // uint8
  reg [7:0] cfblk180_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk180_out1;  // uint8
  wire [7:0] cfblk127_out1;  // uint8
  wire [7:0] cfblk65_out1;  // uint8
  reg [7:0] cfblk179_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk179_out1;  // uint8
  wire [7:0] cfblk73_out1;  // uint8
  wire [7:0] cfblk141_out1;  // uint8
  wire [7:0] cfblk114_out1;  // uint8
  wire [7:0] cfblk114_out2;  // uint8
  wire [7:0] cfblk110_out1;  // uint8
  wire [7:0] dtc_out_2;  // ufix8
  wire [7:0] cfblk54_out1;  // uint8
  wire [7:0] cfblk87_out1;  // uint8
  wire [7:0] dtc_out_3;  // ufix8
  wire [7:0] cfblk66_out1;  // uint8
  reg [7:0] cfblk176_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk176_out1;  // uint8
  wire [7:0] cfblk217_out1;  // uint8
  wire [7:0] cfblk86_out1;  // uint8
  wire [7:0] cfblk105_out1;  // uint8
  wire [7:0] cfblk115_out1;  // uint8
  reg [7:0] emi_32_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_32_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_32_out1;  // uint8
  wire y1_23;
  wire [7:0] cfblk78_out1;  // uint8
  wire [7:0] cfblk127_out2;  // uint8
  wire [7:0] cfblk91_out1;  // uint8
  reg [7:0] cfblk101_out1;  // uint8
  wire [7:0] dtc_out_4;  // ufix8
  wire [7:0] cfblk138_out1;  // uint8
  reg [7:0] cfblk181_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk181_out1;  // uint8
  wire [15:0] cfblk135_out1;  // ufix16_En7
  reg [15:0] emi_202_reg [0:1];  // ufix16 [2]
  wire [15:0] emi_202_reg_next [0:1];  // ufix16_En7 [2]
  wire [15:0] emi_202_out1;  // ufix16_En7
  wire [7:0] emi_201_out1;  // uint8
  wire y1_24;
  reg [7:0] emi_65_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_65_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_65_out1;  // uint8
  wire y1_25;
  wire [7:0] cfblk119_out1;  // uint8
  reg [7:0] cfblk196_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk196_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk196_out1;  // uint8
  wire [7:0] cfblk20_out1;  // uint8
  wire [7:0] cfblk16_out1;  // uint8
  wire cfblk209_out1;
  wire cfblk8_out1;
  wire [7:0] cfblk210_out1;  // uint8
  wire cfblk210_out1_is_not0;
  wire cfblk4_out1;
  wire [31:0] cfblk149_add_temp;  // ufix32
  wire [31:0] cfblk149_1;  // ufix32
  wire [31:0] cfblk149_2;  // ufix32
  wire [7:0] cfblk149_out1;  // uint8
  wire [7:0] cfblk116_out1;  // uint8
  reg [7:0] cfblk18_out1;  // uint8
  wire [7:0] cfblk33_out1;  // uint8
  wire [7:0] cfblk10_out1;  // uint8
  reg [7:0] cfblk172_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk172_out1;  // uint8
  wire [7:0] cfblk147_out1;  // uint8
  reg [7:0] emi_138_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_138_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_138_out1;  // uint8
  wire y1_26;
  wire [7:0] cfblk150_out1;  // uint8
  reg [7:0] emi_194_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_194_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_194_out1;  // uint8
  wire y1_27;
  wire [7:0] cfblk125_out1;  // uint8
  reg [7:0] emi_97_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_97_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_97_out1;  // uint8
  wire y1_28;
  wire cfblk6_out1;
  reg  [1:0] emi_186_reg;  // ufix1 [2]
  wire emi_186_out1;
  wire [7:0] emi_185_out1;  // uint8
  wire y1_29;
  wire cfblk213_out1;
  reg  [1:0] emi_293_reg;  // ufix1 [2]
  wire emi_293_out1;
  wire [7:0] emi_292_out1;  // uint8
  wire y1_30;
  wire [7:0] cfblk117_out1;  // uint8
  reg [7:0] emi_178_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_178_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_178_out1;  // uint8
  wire y1_31;
  wire [7:0] cfblk143_out1;  // uint8
  reg [7:0] emi_105_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_105_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_105_out1;  // uint8
  wire y1_32;
  reg [7:0] cfblk81_out1;  // uint8
  reg [7:0] emi_57_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_57_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_57_out1;  // uint8
  wire y1_33;
  wire [7:0] cfblk133_out1;  // uint8
  reg [7:0] cfblk190_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk190_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk190_out1;  // uint8
  wire [7:0] cfblk75_out1;  // uint8
  wire [7:0] cfblk214_out1;  // uint8
  reg [7:0] emi_244_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_244_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_244_out1;  // uint8
  wire y1_34;
  wire [7:0] cfblk1_out1;  // uint8
  reg [7:0] emi_236_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_236_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_236_out1;  // uint8
  wire y1_35;
  wire [7:0] cfblk37_out1;  // uint8
  wire [7:0] cfblk204_out1;  // uint8
  wire [7:0] cfblk102_out1;  // uint8
  wire [7:0] dtc_out_5;  // ufix8
  reg [7:0] cfblk43_out1;  // uint8
  reg [7:0] cfblk118_out1;  // uint8
  wire [7:0] cfblk36_out1;  // uint8
  reg [7:0] cfblk194_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk194_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk194_out1;  // uint8
  wire [7:0] cfblk46_out1;  // uint8
  wire [7:0] cfblk19_out2;  // uint8
  wire [7:0] cfblk2_out1;  // uint8
  wire cfblk3_relop1;
  wire [7:0] cfblk3_relop1_dtc;  // uint8
  reg [7:0] cfblk177_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk177_out1;  // uint8
  wire [7:0] cfblk73_out2;  // uint8
  reg [7:0] cfblk189_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk189_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk189_out1;  // uint8
  wire [7:0] cfblk45_out1;  // uint8
  reg [7:0] cfblk123_out1;  // uint8
  wire [7:0] cfblk161_out1;  // uint8
  reg [7:0] cfblk188_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk188_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk188_out1;  // uint8
  wire [7:0] cfblk94_out1;  // uint8
  reg [7:0] emi_113_reg [0:1];  // ufix8 [2]
  wire [7:0] emi_113_reg_next [0:1];  // ufix8 [2]
  wire [7:0] emi_113_out1;  // uint8
  wire y1_36;
  reg [7:0] cfblk187_reg [0:1];  // ufix8 [2]
  wire [7:0] cfblk187_reg_next [0:1];  // ufix8 [2]
  wire [7:0] cfblk187_out1;  // uint8
  wire [7:0] cfblk103_out1;  // uint8
  wire [7:0] cfblk124_out1;  // uint8
  wire [7:0] cfblk34_out1;  // uint8
  wire [7:0] dtc_out_6;  // ufix8
  reg [7:0] cfblk121_out1;  // uint8
  wire [7:0] dtc_out_7;  // ufix8
  wire [7:0] cfblk79_out1;  // uint8
  wire [7:0] cfblk30_out2;  // uint8
  wire [7:0] cfblk14_out1;  // uint8
  reg signed [31:0] emi_7_t_0_0;  // int32
  reg signed [31:0] emi_7_t_1;  // int32
  reg signed [31:0] emi_81_t_0_0;  // int32
  reg signed [31:0] emi_81_t_1;  // int32
  reg signed [31:0] emi_228_t_0_0;  // int32
  reg signed [31:0] emi_228_t_1;  // int32
  reg signed [31:0] emi_40_t_0_0;  // int32
  reg signed [31:0] emi_40_t_1;  // int32
  reg signed [31:0] cfblk178_t_0_0;  // int32
  reg signed [31:0] cfblk178_t_1;  // int32
  reg signed [31:0] emi_15_t_0_0;  // int32
  reg signed [31:0] emi_15_t_1;  // int32
  reg signed [31:0] cfblk197_t_0_0;  // int32
  reg signed [31:0] cfblk197_t_1;  // int32
  reg signed [31:0] emi_210_t_0_0;  // int32
  reg signed [31:0] emi_210_t_1;  // int32
  reg [8:0] cfblk80_div_temp;  // ufix9
  reg [8:0] cfblk80_t_0_0;  // ufix9
  reg signed [31:0] cfblk186_t_0_0;  // int32
  reg signed [31:0] cfblk186_t_1;  // int32
  reg [8:0] cfblk92_div_temp;  // ufix9
  reg [8:0] cfblk92_t_0_0;  // ufix9
  reg signed [31:0] emi_261_t_0_0;  // int32
  reg signed [31:0] emi_261_t_1;  // int32
  reg signed [31:0] cfblk198_t_0_0;  // int32
  reg signed [31:0] cfblk198_t_1;  // int32
  reg signed [31:0] emi_130_t_0_0;  // int32
  reg signed [31:0] emi_130_t_1;  // int32
  reg signed [31:0] emi_122_t_0_0;  // int32
  reg signed [31:0] emi_122_t_1;  // int32
  reg signed [31:0] emi_146_t_0_0;  // int32
  reg signed [31:0] emi_146_t_1;  // int32
  reg signed [31:0] cfblk182_t_0_0;  // int32
  reg signed [31:0] cfblk182_t_1;  // int32
  reg signed [31:0] emi_269_t_0_0;  // int32
  reg signed [31:0] emi_269_t_1;  // int32
  reg signed [31:0] emi_23_t_0_0;  // int32
  reg signed [31:0] emi_23_t_1;  // int32
  reg signed [31:0] emi_89_t_0_0;  // int32
  reg signed [31:0] emi_89_t_1;  // int32
  reg signed [31:0] cfblk183_t_0_0;  // int32
  reg signed [31:0] cfblk183_t_1;  // int32
  reg signed [31:0] emi_326_t_0_0;  // int32
  reg signed [31:0] emi_326_t_1;  // int32
  reg signed [31:0] emi_73_t_0_0;  // int32
  reg signed [31:0] emi_73_t_1;  // int32
  reg signed [31:0] cfblk171_t_0_0;  // int32
  reg signed [31:0] cfblk171_t_1;  // int32
  reg signed [31:0] emi_317_t_0_0;  // int32
  reg signed [31:0] emi_317_t_1;  // int32
  reg signed [31:0] emi_252_t_0_0;  // int32
  reg signed [31:0] emi_252_t_1;  // int32
  reg signed [31:0] cfblk192_t_0_0;  // int32
  reg signed [31:0] cfblk192_t_1;  // int32
  reg signed [31:0] cfblk184_t_0_0;  // int32
  reg signed [31:0] cfblk184_t_1;  // int32
  reg signed [31:0] cfblk173_t_0_0;  // int32
  reg signed [31:0] cfblk173_t_1;  // int32
  reg signed [31:0] emi_170_t_0_0;  // int32
  reg signed [31:0] emi_170_t_1;  // int32
  reg signed [31:0] emi_154_t_0_0;  // int32
  reg signed [31:0] emi_154_t_1;  // int32
  reg signed [31:0] cfblk191_t_0_0;  // int32
  reg signed [31:0] cfblk191_t_1;  // int32
  reg signed [31:0] emi_301_t_0_0;  // int32
  reg signed [31:0] emi_301_t_1;  // int32
  reg signed [31:0] cfblk185_t_0_0;  // int32
  reg signed [31:0] cfblk185_t_1;  // int32
  reg signed [31:0] emi_285_t_0_0;  // int32
  reg signed [31:0] emi_285_t_1;  // int32
  reg signed [31:0] emi_49_t_0_0;  // int32
  reg signed [31:0] emi_49_t_1;  // int32
  reg signed [31:0] emi_219_t_0_0;  // int32
  reg signed [31:0] emi_219_t_1;  // int32
  reg signed [31:0] cfblk180_t_0_0;  // int32
  reg signed [31:0] cfblk180_t_1;  // int32
  reg signed [31:0] cfblk179_t_0_0;  // int32
  reg signed [31:0] cfblk179_t_1;  // int32
  reg signed [31:0] cfblk176_t_0_0;  // int32
  reg signed [31:0] cfblk176_t_1;  // int32
  reg signed [31:0] emi_32_t_0_0;  // int32
  reg signed [31:0] emi_32_t_1;  // int32
  reg [8:0] cfblk101_div_temp;  // ufix9
  reg [8:0] cfblk101_t_0_0;  // ufix9
  reg signed [31:0] cfblk181_t_0_0;  // int32
  reg signed [31:0] cfblk181_t_1;  // int32
  reg signed [31:0] emi_202_t_0_0;  // int32
  reg signed [31:0] emi_202_t_1;  // int32
  reg signed [31:0] emi_65_t_0_0;  // int32
  reg signed [31:0] emi_65_t_1;  // int32
  reg signed [31:0] cfblk196_t_0_0;  // int32
  reg signed [31:0] cfblk196_t_1;  // int32
  reg [8:0] cfblk18_div_temp;  // ufix9
  reg [8:0] cfblk18_t_0_0;  // ufix9
  reg [8:0] cfblk21_div_temp;  // ufix9
  reg [8:0] cfblk21_t_0_0;  // ufix9
  reg signed [31:0] cfblk172_t_0_0;  // int32
  reg signed [31:0] cfblk172_t_1;  // int32
  reg signed [31:0] emi_138_t_0_0;  // int32
  reg signed [31:0] emi_138_t_1;  // int32
  reg signed [31:0] emi_194_t_0_0;  // int32
  reg signed [31:0] emi_194_t_1;  // int32
  reg signed [31:0] emi_97_t_0_0;  // int32
  reg signed [31:0] emi_97_t_1;  // int32
  reg signed [31:0] emi_178_t_0_0;  // int32
  reg signed [31:0] emi_178_t_1;  // int32
  reg signed [31:0] emi_105_t_0_0;  // int32
  reg signed [31:0] emi_105_t_1;  // int32
  reg signed [31:0] emi_57_t_0_0;  // int32
  reg signed [31:0] emi_57_t_1;  // int32
  reg signed [31:0] cfblk190_t_0_0;  // int32
  reg signed [31:0] cfblk190_t_1;  // int32
  reg [8:0] cfblk81_div_temp;  // ufix9
  reg [8:0] cfblk81_t_0_0;  // ufix9
  reg signed [31:0] emi_244_t_0_0;  // int32
  reg signed [31:0] emi_244_t_1;  // int32
  reg signed [31:0] emi_236_t_0_0;  // int32
  reg signed [31:0] emi_236_t_1;  // int32
  reg [8:0] cfblk118_div_temp;  // ufix9
  reg [8:0] cfblk118_t_0_0;  // ufix9
  reg signed [31:0] cfblk194_t_0_0;  // int32
  reg signed [31:0] cfblk194_t_1;  // int32
  reg signed [31:0] cfblk177_t_0_0;  // int32
  reg signed [31:0] cfblk177_t_1;  // int32
  reg [8:0] cfblk43_div_temp;  // ufix9
  reg [8:0] cfblk43_t_0_0;  // ufix9
  reg signed [31:0] cfblk189_t_0_0;  // int32
  reg signed [31:0] cfblk189_t_1;  // int32
  reg [8:0] cfblk123_div_temp;  // ufix9
  reg [8:0] cfblk123_t_0_0;  // ufix9
  reg signed [31:0] cfblk188_t_0_0;  // int32
  reg signed [31:0] cfblk188_t_1;  // int32
  reg [8:0] cfblk82_div_temp;  // ufix9
  reg [8:0] cfblk82_t_0_0;  // ufix9
  reg signed [31:0] emi_113_t_0_0;  // int32
  reg signed [31:0] emi_113_t_1;  // int32
  reg signed [31:0] cfblk187_t_0_0;  // int32
  reg signed [31:0] cfblk187_t_1;  // int32
  reg [8:0] cfblk41_div_temp;  // ufix9
  reg [8:0] cfblk41_t_0_0;  // ufix9
  reg [8:0] cfblk121_div_temp;  // ufix9
  reg [8:0] cfblk121_t_0_0;  // ufix9


  assign enb = clk_enable;

  assign cfblk117_const_val_1 = 8'b00000000;



  assign cfblk156_out1 = 8'b00000001;



  assign cfblk86_const_val_1 = 8'b00000000;



  assign cfblk53_const_val_1 = 8'b00000000;



  assign cfblk69_const_val_1 = 8'b00000000;



  assign bitMask_for_cfblk8 = 1'b1;



  assign cfblk98_const_val_1 = 8'b00000000;



  assign cfblk157_out1 = 8'b00000001;



  assign cfblk34_const_val_1 = 8'b00000000;



  assign cfblk71_const_val_1 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : emi_7_process
      if (reset == 1'b1) begin
        for(emi_7_t_1 = 32'sd0; emi_7_t_1 <= 32'sd1; emi_7_t_1 = emi_7_t_1 + 32'sd1) begin
          emi_7_reg[emi_7_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_7_t_0_0 = 32'sd0; emi_7_t_0_0 <= 32'sd1; emi_7_t_0_0 = emi_7_t_0_0 + 32'sd1) begin
            emi_7_reg[emi_7_t_0_0] <= emi_7_reg_next[emi_7_t_0_0];
          end
        end
      end
    end

  assign emi_7_out1 = emi_7_reg[1];
  assign emi_7_reg_next[0] = cfblk174_out1;
  assign emi_7_reg_next[1] = emi_7_reg[0];



  assign y1 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_81_process
      if (reset == 1'b1) begin
        for(emi_81_t_1 = 32'sd0; emi_81_t_1 <= 32'sd1; emi_81_t_1 = emi_81_t_1 + 32'sd1) begin
          emi_81_reg[emi_81_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_81_t_0_0 = 32'sd0; emi_81_t_0_0 <= 32'sd1; emi_81_t_0_0 = emi_81_t_0_0 + 32'sd1) begin
            emi_81_reg[emi_81_t_0_0] <= emi_81_reg_next[emi_81_t_0_0];
          end
        end
      end
    end

  assign emi_81_out1 = emi_81_reg[1];
  assign emi_81_reg_next[0] = cfblk151_out1;
  assign emi_81_reg_next[1] = emi_81_reg[0];



  assign y1_1 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_228_process
      if (reset == 1'b1) begin
        for(emi_228_t_1 = 32'sd0; emi_228_t_1 <= 32'sd1; emi_228_t_1 = emi_228_t_1 + 32'sd1) begin
          emi_228_reg[emi_228_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_228_t_0_0 = 32'sd0; emi_228_t_0_0 <= 32'sd1; emi_228_t_0_0 = emi_228_t_0_0 + 32'sd1) begin
            emi_228_reg[emi_228_t_0_0] <= emi_228_reg_next[emi_228_t_0_0];
          end
        end
      end
    end

  assign emi_228_out1 = emi_228_reg[1];
  assign emi_228_reg_next[0] = cfblk22_out1;
  assign emi_228_reg_next[1] = emi_228_reg[0];



  assign y1_2 = emi_228_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_40_process
      if (reset == 1'b1) begin
        for(emi_40_t_1 = 32'sd0; emi_40_t_1 <= 32'sd1; emi_40_t_1 = emi_40_t_1 + 32'sd1) begin
          emi_40_reg[emi_40_t_1] <= 8'b00000001;
        end
      end
      else begin
        if (enb) begin
          for(emi_40_t_0_0 = 32'sd0; emi_40_t_0_0 <= 32'sd1; emi_40_t_0_0 = emi_40_t_0_0 + 32'sd1) begin
            emi_40_reg[emi_40_t_0_0] <= emi_40_reg_next[emi_40_t_0_0];
          end
        end
      end
    end

  assign emi_40_out1 = emi_40_reg[1];
  assign emi_40_reg_next[0] = cfblk111_out1;
  assign emi_40_reg_next[1] = emi_40_reg[0];



  assign y1_3 = emi_40_out1 >= 8'b00000001;



  always @(posedge clk or posedge reset)
    begin : cfblk178_process
      if (reset == 1'b1) begin
        for(cfblk178_t_1 = 32'sd0; cfblk178_t_1 <= 32'sd1; cfblk178_t_1 = cfblk178_t_1 + 32'sd1) begin
          cfblk178_reg[cfblk178_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk178_t_0_0 = 32'sd0; cfblk178_t_0_0 <= 32'sd1; cfblk178_t_0_0 = cfblk178_t_0_0 + 32'sd1) begin
            cfblk178_reg[cfblk178_t_0_0] <= cfblk178_reg_next[cfblk178_t_0_0];
          end
        end
      end
    end

  assign cfblk178_out1 = cfblk178_reg[1];
  assign cfblk178_reg_next[0] = cfblk49_out1;
  assign cfblk178_reg_next[1] = cfblk178_reg[0];



  assign cfblk111_out1 = cfblk98_out1 + cfblk178_out1;



  cfblk130_block u_cfblk130 (.clk(clk),
                             .reset(reset),
                             .enb(clk_enable),
                             .emi_34(cfblk111_out1),  // uint8
                             .Action_Port(y1_3),
                             .emi_35(cfblk130_out1)  // uint8
                             );

  cfblk52 u_cfblk52 (.u(cfblk130_out1),  // uint8
                     .y(cfblk52_out1)  // uint8
                     );

  always @(posedge clk or posedge reset)
    begin : emi_15_process
      if (reset == 1'b1) begin
        for(emi_15_t_1 = 32'sd0; emi_15_t_1 <= 32'sd1; emi_15_t_1 = emi_15_t_1 + 32'sd1) begin
          emi_15_reg[emi_15_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_15_t_0_0 = 32'sd0; emi_15_t_0_0 <= 32'sd1; emi_15_t_0_0 = emi_15_t_0_0 + 32'sd1) begin
            emi_15_reg[emi_15_t_0_0] <= emi_15_reg_next[emi_15_t_0_0];
          end
        end
      end
    end

  assign emi_15_out1 = emi_15_reg[1];
  assign emi_15_reg_next[0] = cfblk41_out1;
  assign emi_15_reg_next[1] = emi_15_reg[0];



  assign y1_4 = 1'b1;



  assign cfblk72_out1 = cfblk157_out1 + cfblk71_out1;



  assign cfblk142_out1 = cfblk122_out1 - cfblk72_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk197_process
      if (reset == 1'b1) begin
        for(cfblk197_t_1 = 32'sd0; cfblk197_t_1 <= 32'sd1; cfblk197_t_1 = cfblk197_t_1 + 32'sd1) begin
          cfblk197_reg[cfblk197_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk197_t_0_0 = 32'sd0; cfblk197_t_0_0 <= 32'sd1; cfblk197_t_0_0 = cfblk197_t_0_0 + 32'sd1) begin
            cfblk197_reg[cfblk197_t_0_0] <= cfblk197_reg_next[cfblk197_t_0_0];
          end
        end
      end
    end

  assign cfblk197_out1 = cfblk197_reg[1];
  assign cfblk197_reg_next[0] = cfblk142_out1;
  assign cfblk197_reg_next[1] = cfblk197_reg[0];



  always @(posedge clk or posedge reset)
    begin : emi_210_process
      if (reset == 1'b1) begin
        for(emi_210_t_1 = 32'sd0; emi_210_t_1 <= 32'sd1; emi_210_t_1 = emi_210_t_1 + 32'sd1) begin
          emi_210_reg[emi_210_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_210_t_0_0 = 32'sd0; emi_210_t_0_0 <= 32'sd1; emi_210_t_0_0 = emi_210_t_0_0 + 32'sd1) begin
            emi_210_reg[emi_210_t_0_0] <= emi_210_reg_next[emi_210_t_0_0];
          end
        end
      end
    end

  assign emi_210_out1 = emi_210_reg[1];
  assign emi_210_reg_next[0] = cfblk92_out1;
  assign emi_210_reg_next[1] = emi_210_reg[0];



  assign y1_5 = emi_210_out1 == 8'b11111111;



  always @(cfblk17_out1, cfblk220_out1) begin
    cfblk80_div_temp = 9'b000000000;
    cfblk80_t_0_0 = 9'b000000000;
    if (cfblk220_out1 == 8'b00000000) begin
      cfblk80_out1 = 8'b11111111;
    end
    else begin
      cfblk80_t_0_0 = {1'b0, cfblk17_out1};
      cfblk80_div_temp = cfblk80_t_0_0 / cfblk220_out1;
      if (cfblk80_div_temp[8] != 1'b0) begin
        cfblk80_out1 = 8'b11111111;
      end
      else begin
        cfblk80_out1 = cfblk80_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : cfblk186_process
      if (reset == 1'b1) begin
        for(cfblk186_t_1 = 32'sd0; cfblk186_t_1 <= 32'sd1; cfblk186_t_1 = cfblk186_t_1 + 32'sd1) begin
          cfblk186_reg[cfblk186_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk186_t_0_0 = 32'sd0; cfblk186_t_0_0 <= 32'sd1; cfblk186_t_0_0 = cfblk186_t_0_0 + 32'sd1) begin
            cfblk186_reg[cfblk186_t_0_0] <= cfblk186_reg_next[cfblk186_t_0_0];
          end
        end
      end
    end

  assign cfblk186_out1 = cfblk186_reg[1];
  assign cfblk186_reg_next[0] = cfblk80_out1;
  assign cfblk186_reg_next[1] = cfblk186_reg[0];



  always @(cfblk186_out1, cfblk59_out1) begin
    cfblk92_div_temp = 9'b000000000;
    cfblk92_t_0_0 = 9'b000000000;
    if (cfblk186_out1 == 8'b00000000) begin
      cfblk92_out1 = 8'b11111111;
    end
    else begin
      cfblk92_t_0_0 = {1'b0, cfblk59_out1};
      cfblk92_div_temp = cfblk92_t_0_0 / cfblk186_out1;
      if (cfblk92_div_temp[8] != 1'b0) begin
        cfblk92_out1 = 8'b11111111;
      end
      else begin
        cfblk92_out1 = cfblk92_div_temp[7:0];
      end
    end
  end



  cfblk23 u_cfblk23 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_204(cfblk92_out1),  // uint8
                     .Action_Port(y1_5),
                     .emi_205(cfblk23_out1)  // uint8
                     );

  assign cfblk89_out1 = cfblk23_out1 - cfblk157_out1;



  always @(posedge clk or posedge reset)
    begin : emi_261_process
      if (reset == 1'b1) begin
        for(emi_261_t_1 = 32'sd0; emi_261_t_1 <= 32'sd1; emi_261_t_1 = emi_261_t_1 + 32'sd1) begin
          emi_261_reg[emi_261_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_261_t_0_0 = 32'sd0; emi_261_t_0_0 <= 32'sd1; emi_261_t_0_0 = emi_261_t_0_0 + 32'sd1) begin
            emi_261_reg[emi_261_t_0_0] <= emi_261_reg_next[emi_261_t_0_0];
          end
        end
      end
    end

  assign emi_261_out1 = emi_261_reg[1];
  assign emi_261_reg_next[0] = cfblk99_out1;
  assign emi_261_reg_next[1] = emi_261_reg[0];



  assign y1_6 = 1'b1;



  assign cfblk98_out1 = cfblk88_out1 + cfblk98_const_val_1;



  assign cfblk77_out1 = cfblk98_out1 + cfblk128_out1;



  assign cfblk59_out1 = (cfblk77_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk198_process
      if (reset == 1'b1) begin
        for(cfblk198_t_1 = 32'sd0; cfblk198_t_1 <= 32'sd1; cfblk198_t_1 = cfblk198_t_1 + 32'sd1) begin
          cfblk198_reg[cfblk198_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk198_t_0_0 = 32'sd0; cfblk198_t_0_0 <= 32'sd1; cfblk198_t_0_0 = cfblk198_t_0_0 + 32'sd1) begin
            cfblk198_reg[cfblk198_t_0_0] <= cfblk198_reg_next[cfblk198_t_0_0];
          end
        end
      end
    end

  assign cfblk198_out1 = cfblk198_reg[1];
  assign cfblk198_reg_next[0] = cfblk59_out1;
  assign cfblk198_reg_next[1] = cfblk198_reg[0];



  always @(posedge clk or posedge reset)
    begin : emi_130_process
      if (reset == 1'b1) begin
        for(emi_130_t_1 = 32'sd0; emi_130_t_1 <= 32'sd1; emi_130_t_1 = emi_130_t_1 + 32'sd1) begin
          emi_130_reg[emi_130_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_130_t_0_0 = 32'sd0; emi_130_t_0_0 <= 32'sd1; emi_130_t_0_0 = emi_130_t_0_0 + 32'sd1) begin
            emi_130_reg[emi_130_t_0_0] <= emi_130_reg_next[emi_130_t_0_0];
          end
        end
      end
    end

  assign emi_130_out1 = emi_130_reg[1];
  assign emi_130_reg_next[0] = cfblk49_out1;
  assign emi_130_reg_next[1] = emi_130_reg[0];



  assign y1_7 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_122_process
      if (reset == 1'b1) begin
        for(emi_122_t_1 = 32'sd0; emi_122_t_1 <= 32'sd1; emi_122_t_1 = emi_122_t_1 + 32'sd1) begin
          emi_122_reg[emi_122_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_122_t_0_0 = 32'sd0; emi_122_t_0_0 <= 32'sd1; emi_122_t_0_0 = emi_122_t_0_0 + 32'sd1) begin
            emi_122_reg[emi_122_t_0_0] <= emi_122_reg_next[emi_122_t_0_0];
          end
        end
      end
    end

  assign emi_122_out1 = emi_122_reg[1];
  assign emi_122_reg_next[0] = cfblk206_out1;
  assign emi_122_reg_next[1] = emi_122_reg[0];



  assign y1_8 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_146_process
      if (reset == 1'b1) begin
        for(emi_146_t_1 = 32'sd0; emi_146_t_1 <= 32'sd1; emi_146_t_1 = emi_146_t_1 + 32'sd1) begin
          emi_146_reg[emi_146_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_146_t_0_0 = 32'sd0; emi_146_t_0_0 <= 32'sd1; emi_146_t_0_0 = emi_146_t_0_0 + 32'sd1) begin
            emi_146_reg[emi_146_t_0_0] <= emi_146_reg_next[emi_146_t_0_0];
          end
        end
      end
    end

  assign emi_146_out1 = emi_146_reg[1];
  assign emi_146_reg_next[0] = cfblk29_out1;
  assign emi_146_reg_next[1] = emi_146_reg[0];



  assign y1_9 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : cfblk182_process
      if (reset == 1'b1) begin
        for(cfblk182_t_1 = 32'sd0; cfblk182_t_1 <= 32'sd1; cfblk182_t_1 = cfblk182_t_1 + 32'sd1) begin
          cfblk182_reg[cfblk182_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk182_t_0_0 = 32'sd0; cfblk182_t_0_0 <= 32'sd1; cfblk182_t_0_0 = cfblk182_t_0_0 + 32'sd1) begin
            cfblk182_reg[cfblk182_t_0_0] <= cfblk182_reg_next[cfblk182_t_0_0];
          end
        end
      end
    end

  assign cfblk182_out1 = cfblk182_reg[1];
  assign cfblk182_reg_next[0] = cfblk38_out1;
  assign cfblk182_reg_next[1] = cfblk182_reg[0];



  always @(posedge clk or posedge reset)
    begin : emi_269_process
      if (reset == 1'b1) begin
        for(emi_269_t_1 = 32'sd0; emi_269_t_1 <= 32'sd1; emi_269_t_1 = emi_269_t_1 + 32'sd1) begin
          emi_269_reg[emi_269_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_269_t_0_0 = 32'sd0; emi_269_t_0_0 <= 32'sd1; emi_269_t_0_0 = emi_269_t_0_0 + 32'sd1) begin
            emi_269_reg[emi_269_t_0_0] <= emi_269_reg_next[emi_269_t_0_0];
          end
        end
      end
    end

  assign emi_269_out1 = emi_269_reg[1];
  assign emi_269_reg_next[0] = cfblk112_out1;
  assign emi_269_reg_next[1] = emi_269_reg[0];



  assign y1_10 = emi_269_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_23_process
      if (reset == 1'b1) begin
        for(emi_23_t_1 = 32'sd0; emi_23_t_1 <= 32'sd1; emi_23_t_1 = emi_23_t_1 + 32'sd1) begin
          emi_23_reg[emi_23_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_23_t_0_0 = 32'sd0; emi_23_t_0_0 <= 32'sd1; emi_23_t_0_0 = emi_23_t_0_0 + 32'sd1) begin
            emi_23_reg[emi_23_t_0_0] <= emi_23_reg_next[emi_23_t_0_0];
          end
        end
      end
    end

  assign emi_23_out1 = emi_23_reg[1];
  assign emi_23_reg_next[0] = cfblk145_out1;
  assign emi_23_reg_next[1] = emi_23_reg[0];



  assign y1_11 = 1'b1;



  cfblk11_block u_cfblk11 (.clk(clk),
                           .reset(reset),
                           .enb(clk_enable),
                           .emi_17(cfblk145_out1),  // uint8
                           .Action_Port(y1_11),
                           .emi_18(cfblk11_out1)  // uint8
                           );

  always @(posedge clk or posedge reset)
    begin : emi_89_process
      if (reset == 1'b1) begin
        for(emi_89_t_1 = 32'sd0; emi_89_t_1 <= 32'sd1; emi_89_t_1 = emi_89_t_1 + 32'sd1) begin
          emi_89_reg[emi_89_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_89_t_0_0 = 32'sd0; emi_89_t_0_0 <= 32'sd1; emi_89_t_0_0 = emi_89_t_0_0 + 32'sd1) begin
            emi_89_reg[emi_89_t_0_0] <= emi_89_reg_next[emi_89_t_0_0];
          end
        end
      end
    end

  assign emi_89_out1 = emi_89_reg[1];
  assign emi_89_reg_next[0] = cfblk120_out1;
  assign emi_89_reg_next[1] = emi_89_reg[0];



  assign y1_12 = 1'b1;



  assign dtc_out = cfblk90_out1;



  assign cfblk146_out1 = dtc_out;



  always @(posedge clk or posedge reset)
    begin : cfblk183_process
      if (reset == 1'b1) begin
        for(cfblk183_t_1 = 32'sd0; cfblk183_t_1 <= 32'sd1; cfblk183_t_1 = cfblk183_t_1 + 32'sd1) begin
          cfblk183_reg[cfblk183_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk183_t_0_0 = 32'sd0; cfblk183_t_0_0 <= 32'sd1; cfblk183_t_0_0 = cfblk183_t_0_0 + 32'sd1) begin
            cfblk183_reg[cfblk183_t_0_0] <= cfblk183_reg_next[cfblk183_t_0_0];
          end
        end
      end
    end

  assign cfblk183_out1 = cfblk183_reg[1];
  assign cfblk183_reg_next[0] = cfblk146_out1;
  assign cfblk183_reg_next[1] = cfblk183_reg[0];



  assign dtc_out_1 = cfblk58_out1;



  assign cfblk68_out1 = dtc_out_1;



  cfblk7 u_cfblk7 (.u(cfblk68_out1),  // uint8
                   .y(cfblk7_out1)  // uint8
                   );

  assign cfblk70_out1 = cfblk7_out1 - cfblk183_out1;



  always @(posedge clk or posedge reset)
    begin : emi_326_process
      if (reset == 1'b1) begin
        for(emi_326_t_1 = 32'sd0; emi_326_t_1 <= 32'sd1; emi_326_t_1 = emi_326_t_1 + 32'sd1) begin
          emi_326_reg[emi_326_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_326_t_0_0 = 32'sd0; emi_326_t_0_0 <= 32'sd1; emi_326_t_0_0 = emi_326_t_0_0 + 32'sd1) begin
            emi_326_reg[emi_326_t_0_0] <= emi_326_reg_next[emi_326_t_0_0];
          end
        end
      end
    end

  assign emi_326_out1 = emi_326_reg[1];
  assign emi_326_reg_next[0] = cfblk21_out1;
  assign emi_326_reg_next[1] = emi_326_reg[0];



  assign y1_13 = emi_326_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_73_process
      if (reset == 1'b1) begin
        for(emi_73_t_1 = 32'sd0; emi_73_t_1 <= 32'sd1; emi_73_t_1 = emi_73_t_1 + 32'sd1) begin
          emi_73_reg[emi_73_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_73_t_0_0 = 32'sd0; emi_73_t_0_0 <= 32'sd1; emi_73_t_0_0 = emi_73_t_0_0 + 32'sd1) begin
            emi_73_reg[emi_73_t_0_0] <= emi_73_reg_next[emi_73_t_0_0];
          end
        end
      end
    end

  assign emi_73_out1 = emi_73_reg[1];
  assign emi_73_reg_next[0] = cfblk63_out1;
  assign emi_73_reg_next[1] = emi_73_reg[0];



  assign y1_14 = emi_73_out1 == 8'b11111111;



  cfblk136 u_cfblk136 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_67(cfblk63_out1),  // uint8
                       .Action_Port(y1_14),
                       .emi_68(cfblk136_out1)  // uint8
                       );

  assign cfblk137_out1 = cfblk136_out1 - cfblk122_out2;



  always @(posedge clk or posedge reset)
    begin : cfblk171_process
      if (reset == 1'b1) begin
        for(cfblk171_t_1 = 32'sd0; cfblk171_t_1 <= 32'sd1; cfblk171_t_1 = cfblk171_t_1 + 32'sd1) begin
          cfblk171_reg[cfblk171_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk171_t_0_0 = 32'sd0; cfblk171_t_0_0 <= 32'sd1; cfblk171_t_0_0 = cfblk171_t_0_0 + 32'sd1) begin
            cfblk171_reg[cfblk171_t_0_0] <= cfblk171_reg_next[cfblk171_t_0_0];
          end
        end
      end
    end

  assign cfblk171_out1 = cfblk171_reg[1];
  assign cfblk171_reg_next[0] = cfblk93_out1;
  assign cfblk171_reg_next[1] = cfblk171_reg[0];



  always @(posedge clk or posedge reset)
    begin : emi_317_process
      if (reset == 1'b1) begin
        for(emi_317_t_1 = 32'sd0; emi_317_t_1 <= 32'sd1; emi_317_t_1 = emi_317_t_1 + 32'sd1) begin
          emi_317_reg[emi_317_t_1] <= 8'b00000001;
        end
      end
      else begin
        if (enb) begin
          for(emi_317_t_0_0 = 32'sd0; emi_317_t_0_0 <= 32'sd1; emi_317_t_0_0 = emi_317_t_0_0 + 32'sd1) begin
            emi_317_reg[emi_317_t_0_0] <= emi_317_reg_next[emi_317_t_0_0];
          end
        end
      end
    end

  assign emi_317_out1 = emi_317_reg[1];
  assign emi_317_reg_next[0] = cfblk108_out1;
  assign emi_317_reg_next[1] = emi_317_reg[0];



  assign y1_15 = emi_317_out1 >= 8'b00000001;



  DotProduct_block3 u_cfblk134_inst (.in1(cfblk93_out2),  // uint8
                                     .in2(cfblk49_out1),  // uint8
                                     .out1(cfblk134_out1)  // uint8
                                     );

  cfblk60 u_cfblk60 (.u(cfblk144_out1),  // uint8
                     .y(cfblk60_out1)  // uint8
                     );

  always @(posedge clk or posedge reset)
    begin : emi_252_process
      if (reset == 1'b1) begin
        for(emi_252_t_1 = 32'sd0; emi_252_t_1 <= 32'sd1; emi_252_t_1 = emi_252_t_1 + 32'sd1) begin
          emi_252_reg[emi_252_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_252_t_0_0 = 32'sd0; emi_252_t_0_0 <= 32'sd1; emi_252_t_0_0 = emi_252_t_0_0 + 32'sd1) begin
            emi_252_reg[emi_252_t_0_0] <= emi_252_reg_next[emi_252_t_0_0];
          end
        end
      end
    end

  assign emi_252_out1 = emi_252_reg[1];
  assign emi_252_reg_next[0] = cfblk128_out1;
  assign emi_252_reg_next[1] = emi_252_reg[0];



  assign y1_16 = 1'b1;



  DotProduct_block2 u_cfblk126_inst (.in1(cfblk216_out1),  // uint8
                                     .in2(cfblk9_out1),  // uint8
                                     .out1(cfblk126_out1)  // uint8
                                     );

  always @(posedge clk or posedge reset)
    begin : cfblk192_process
      if (reset == 1'b1) begin
        for(cfblk192_t_1 = 32'sd0; cfblk192_t_1 <= 32'sd1; cfblk192_t_1 = cfblk192_t_1 + 32'sd1) begin
          cfblk192_reg[cfblk192_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk192_t_0_0 = 32'sd0; cfblk192_t_0_0 <= 32'sd1; cfblk192_t_0_0 = cfblk192_t_0_0 + 32'sd1) begin
            cfblk192_reg[cfblk192_t_0_0] <= cfblk192_reg_next[cfblk192_t_0_0];
          end
        end
      end
    end

  assign cfblk192_out1 = cfblk192_reg[1];
  assign cfblk192_reg_next[0] = cfblk126_out1;
  assign cfblk192_reg_next[1] = cfblk192_reg[0];



  assign cfblk128_out1 = cfblk192_out1 + cfblk56_out1;



  cfblk39_block u_cfblk39 (.clk(clk),
                           .reset(reset),
                           .enb(clk_enable),
                           .emi_246(cfblk128_out1),  // uint8
                           .Action_Port(y1_16),
                           .emi_247(cfblk39_out1)  // uint8
                           );

  always @(posedge clk or posedge reset)
    begin : cfblk184_process
      if (reset == 1'b1) begin
        for(cfblk184_t_1 = 32'sd0; cfblk184_t_1 <= 32'sd1; cfblk184_t_1 = cfblk184_t_1 + 32'sd1) begin
          cfblk184_reg[cfblk184_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk184_t_0_0 = 32'sd0; cfblk184_t_0_0 <= 32'sd1; cfblk184_t_0_0 = cfblk184_t_0_0 + 32'sd1) begin
            cfblk184_reg[cfblk184_t_0_0] <= cfblk184_reg_next[cfblk184_t_0_0];
          end
        end
      end
    end

  assign cfblk184_out1 = cfblk184_reg[1];
  assign cfblk184_reg_next[0] = cfblk39_out1;
  assign cfblk184_reg_next[1] = cfblk184_reg[0];



  assign cfblk88_out1 = cfblk184_out1 + cfblk60_out1;



  assign cfblk40_out1 = cfblk88_out1 + cfblk134_out1;



  assign cfblk108_out1 = (cfblk40_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk95 u_cfblk95 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_311(cfblk108_out1),  // uint8
                     .Action_Port(y1_15),
                     .emi_312(cfblk95_out1)  // uint8
                     );

  always @(posedge clk or posedge reset)
    begin : cfblk173_process
      if (reset == 1'b1) begin
        for(cfblk173_t_1 = 32'sd0; cfblk173_t_1 <= 32'sd1; cfblk173_t_1 = cfblk173_t_1 + 32'sd1) begin
          cfblk173_reg[cfblk173_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk173_t_0_0 = 32'sd0; cfblk173_t_0_0 <= 32'sd1; cfblk173_t_0_0 = cfblk173_t_0_0 + 32'sd1) begin
            cfblk173_reg[cfblk173_t_0_0] <= cfblk173_reg_next[cfblk173_t_0_0];
          end
        end
      end
    end

  assign cfblk173_out1 = cfblk173_reg[1];
  assign cfblk173_reg_next[0] = cfblk95_out1;
  assign cfblk173_reg_next[1] = cfblk173_reg[0];



  always @(posedge clk or posedge reset)
    begin : emi_170_process
      if (reset == 1'b1) begin
        for(emi_170_t_1 = 32'sd0; emi_170_t_1 <= 32'sd1; emi_170_t_1 = emi_170_t_1 + 32'sd1) begin
          emi_170_reg[emi_170_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_170_t_0_0 = 32'sd0; emi_170_t_0_0 <= 32'sd1; emi_170_t_0_0 = emi_170_t_0_0 + 32'sd1) begin
            emi_170_reg[emi_170_t_0_0] <= emi_170_reg_next[emi_170_t_0_0];
          end
        end
      end
    end

  assign emi_170_out1 = emi_170_reg[1];
  assign emi_170_reg_next[0] = cfblk206_out1;
  assign emi_170_reg_next[1] = emi_170_reg[0];



  assign y1_17 = 1'b1;



  cfblk27 u_cfblk27 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_164(cfblk206_out1),  // uint8
                     .Action_Port(y1_17),
                     .emi_165(cfblk27_out1)  // uint8
                     );

  assign cfblk56_out2_is_not0 = cfblk56_out2 != 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : emi_154_process
      if (reset == 1'b1) begin
        for(emi_154_t_1 = 32'sd0; emi_154_t_1 <= 32'sd1; emi_154_t_1 = emi_154_t_1 + 32'sd1) begin
          emi_154_reg[emi_154_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_154_t_0_0 = 32'sd0; emi_154_t_0_0 <= 32'sd1; emi_154_t_0_0 = emi_154_t_0_0 + 32'sd1) begin
            emi_154_reg[emi_154_t_0_0] <= emi_154_reg_next[emi_154_t_0_0];
          end
        end
      end
    end

  assign emi_154_out1 = emi_154_reg[1];
  assign emi_154_reg_next[0] = cfblk144_out1;
  assign emi_154_reg_next[1] = emi_154_reg[0];



  assign y1_18 = 1'b1;



  assign cfblk74_out1 = (cfblk153_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  always @(posedge clk or posedge reset)
    begin : cfblk191_process
      if (reset == 1'b1) begin
        for(cfblk191_t_1 = 32'sd0; cfblk191_t_1 <= 32'sd1; cfblk191_t_1 = cfblk191_t_1 + 32'sd1) begin
          cfblk191_reg[cfblk191_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk191_t_0_0 = 32'sd0; cfblk191_t_0_0 <= 32'sd1; cfblk191_t_0_0 = cfblk191_t_0_0 + 32'sd1) begin
            cfblk191_reg[cfblk191_t_0_0] <= cfblk191_reg_next[cfblk191_t_0_0];
          end
        end
      end
    end

  assign cfblk191_out1 = cfblk191_reg[1];
  assign cfblk191_reg_next[0] = cfblk74_out1;
  assign cfblk191_reg_next[1] = cfblk191_reg[0];



  always @(posedge clk or posedge reset)
    begin : emi_301_process
      if (reset == 1'b1) begin
        for(emi_301_t_1 = 32'sd0; emi_301_t_1 <= 32'sd1; emi_301_t_1 = emi_301_t_1 + 32'sd1) begin
          emi_301_reg[emi_301_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_301_t_0_0 = 32'sd0; emi_301_t_0_0 <= 32'sd1; emi_301_t_0_0 = emi_301_t_0_0 + 32'sd1) begin
            emi_301_reg[emi_301_t_0_0] <= emi_301_reg_next[emi_301_t_0_0];
          end
        end
      end
    end

  assign emi_301_out1 = emi_301_reg[1];
  assign emi_301_reg_next[0] = cfblk69_out1;
  assign emi_301_reg_next[1] = emi_301_reg[0];



  assign y1_19 = emi_301_out1 == 8'b11111111;



  assign cfblk69_out1 = cfblk30_out1 + cfblk69_const_val_1;



  cfblk63_block u_cfblk63 (.clk(clk),
                           .reset(reset),
                           .enb(clk_enable),
                           .emi_295(cfblk69_out1),  // uint8
                           .Action_Port(y1_19),
                           .emi_296(cfblk63_out1)  // uint8
                           );

  cfblk160 u_cfblk160 (.In1(cfblk49_out1),  // uint8
                       .Out1(cfblk160_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk185_process
      if (reset == 1'b1) begin
        for(cfblk185_t_1 = 32'sd0; cfblk185_t_1 <= 32'sd1; cfblk185_t_1 = cfblk185_t_1 + 32'sd1) begin
          cfblk185_reg[cfblk185_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk185_t_0_0 = 32'sd0; cfblk185_t_0_0 <= 32'sd1; cfblk185_t_0_0 = cfblk185_t_0_0 + 32'sd1) begin
            cfblk185_reg[cfblk185_t_0_0] <= cfblk185_reg_next[cfblk185_t_0_0];
          end
        end
      end
    end

  assign cfblk185_out1 = cfblk185_reg[1];
  assign cfblk185_reg_next[0] = cfblk82_out1;
  assign cfblk185_reg_next[1] = cfblk185_reg[0];



  assign cfblk109_out1 = cfblk185_out1 - cfblk160_out1;



  assign cfblk90_out1 = cfblk109_out1 + cfblk63_out1;



  always @(posedge clk or posedge reset)
    begin : emi_285_process
      if (reset == 1'b1) begin
        for(emi_285_t_1 = 32'sd0; emi_285_t_1 <= 32'sd1; emi_285_t_1 = emi_285_t_1 + 32'sd1) begin
          emi_285_reg[emi_285_t_1] <= 8'b00000001;
        end
      end
      else begin
        if (enb) begin
          for(emi_285_t_0_0 = 32'sd0; emi_285_t_0_0 <= 32'sd1; emi_285_t_0_0 = emi_285_t_0_0 + 32'sd1) begin
            emi_285_reg[emi_285_t_0_0] <= emi_285_reg_next[emi_285_t_0_0];
          end
        end
      end
    end

  assign emi_285_out1 = emi_285_reg[1];
  assign emi_285_reg_next[0] = cfblk131_out1;
  assign emi_285_reg_next[1] = emi_285_reg[0];



  assign y1_20 = emi_285_out1 >= 8'b00000001;



  always @(posedge clk or posedge reset)
    begin : emi_49_process
      if (reset == 1'b1) begin
        for(emi_49_t_1 = 32'sd0; emi_49_t_1 <= 32'sd1; emi_49_t_1 = emi_49_t_1 + 32'sd1) begin
          emi_49_reg[emi_49_t_1] <= 8'b00000001;
        end
      end
      else begin
        if (enb) begin
          for(emi_49_t_0_0 = 32'sd0; emi_49_t_0_0 <= 32'sd1; emi_49_t_0_0 = emi_49_t_0_0 + 32'sd1) begin
            emi_49_reg[emi_49_t_0_0] <= emi_49_reg_next[emi_49_t_0_0];
          end
        end
      end
    end

  assign emi_49_out1 = emi_49_reg[1];
  assign emi_49_reg_next[0] = cfblk57_out1;
  assign emi_49_reg_next[1] = emi_49_reg[0];



  assign y1_21 = emi_49_out1 >= 8'b00000001;



  always @(posedge clk or posedge reset)
    begin : emi_219_process
      if (reset == 1'b1) begin
        for(emi_219_t_1 = 32'sd0; emi_219_t_1 <= 32'sd1; emi_219_t_1 = emi_219_t_1 + 32'sd1) begin
          emi_219_reg[emi_219_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_219_t_0_0 = 32'sd0; emi_219_t_0_0 <= 32'sd1; emi_219_t_0_0 = emi_219_t_0_0 + 32'sd1) begin
            emi_219_reg[emi_219_t_0_0] <= emi_219_reg_next[emi_219_t_0_0];
          end
        end
      end
    end

  assign emi_219_out1 = emi_219_reg[1];
  assign emi_219_reg_next[0] = cfblk100_out1;
  assign emi_219_reg_next[1] = emi_219_reg[0];



  assign y1_22 = 1'b1;



  assign cfblk53_out1 = cfblk65_out2 + cfblk53_const_val_1;



  always @(posedge clk or posedge reset)
    begin : cfblk180_process
      if (reset == 1'b1) begin
        for(cfblk180_t_1 = 32'sd0; cfblk180_t_1 <= 32'sd1; cfblk180_t_1 = cfblk180_t_1 + 32'sd1) begin
          cfblk180_reg[cfblk180_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk180_t_0_0 = 32'sd0; cfblk180_t_0_0 <= 32'sd1; cfblk180_t_0_0 = cfblk180_t_0_0 + 32'sd1) begin
            cfblk180_reg[cfblk180_t_0_0] <= cfblk180_reg_next[cfblk180_t_0_0];
          end
        end
      end
    end

  assign cfblk180_out1 = cfblk180_reg[1];
  assign cfblk180_reg_next[0] = cfblk53_out1;
  assign cfblk180_reg_next[1] = cfblk180_reg[0];



  DotProduct u_cfblk100_inst (.in1(cfblk180_out1),  // uint8
                              .in2(cfblk127_out1),  // uint8
                              .out1(cfblk100_out1)  // uint8
                              );

  cfblk65 u_cfblk65 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_212(cfblk100_out1),  // uint8
                     .Action_Port(y1_22),
                     .emi_213(cfblk65_out1),  // uint8
                     .emi_214(cfblk65_out2)  // uint8
                     );

  always @(posedge clk or posedge reset)
    begin : cfblk179_process
      if (reset == 1'b1) begin
        for(cfblk179_t_1 = 32'sd0; cfblk179_t_1 <= 32'sd1; cfblk179_t_1 = cfblk179_t_1 + 32'sd1) begin
          cfblk179_reg[cfblk179_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk179_t_0_0 = 32'sd0; cfblk179_t_0_0 <= 32'sd1; cfblk179_t_0_0 = cfblk179_t_0_0 + 32'sd1) begin
            cfblk179_reg[cfblk179_t_0_0] <= cfblk179_reg_next[cfblk179_t_0_0];
          end
        end
      end
    end

  assign cfblk179_out1 = cfblk179_reg[1];
  assign cfblk179_reg_next[0] = cfblk65_out1;
  assign cfblk179_reg_next[1] = cfblk179_reg[0];



  assign cfblk141_out1 = cfblk73_out1 + cfblk179_out1;



  assign cfblk114_out1 = cfblk141_out1;
  assign cfblk114_out2 = 8'b00000000;



  assign cfblk110_out1 = (cfblk114_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign dtc_out_2 = cfblk110_out1;



  assign cfblk57_out1 = dtc_out_2;



  cfblk131 u_cfblk131 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_42(cfblk57_out1),  // uint8
                       .Action_Port(y1_21),
                       .emi_43(cfblk131_out1)  // uint8
                       );

  cfblk54 u_cfblk54 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_279(cfblk131_out1),  // uint8
                     .Action_Port(y1_20),
                     .emi_280(cfblk54_out1)  // uint8
                     );

  DotProduct_block4 u_cfblk87_inst (.in1(cfblk54_out1),  // uint8
                                    .in2(cfblk90_out1),  // uint8
                                    .out1(cfblk87_out1)  // uint8
                                    );

  assign dtc_out_3 = cfblk87_out1;



  assign cfblk66_out1 = dtc_out_3;



  always @(posedge clk or posedge reset)
    begin : cfblk176_process
      if (reset == 1'b1) begin
        for(cfblk176_t_1 = 32'sd0; cfblk176_t_1 <= 32'sd1; cfblk176_t_1 = cfblk176_t_1 + 32'sd1) begin
          cfblk176_reg[cfblk176_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk176_t_0_0 = 32'sd0; cfblk176_t_0_0 <= 32'sd1; cfblk176_t_0_0 = cfblk176_t_0_0 + 32'sd1) begin
            cfblk176_reg[cfblk176_t_0_0] <= cfblk176_reg_next[cfblk176_t_0_0];
          end
        end
      end
    end

  assign cfblk176_out1 = cfblk176_reg[1];
  assign cfblk176_reg_next[0] = cfblk66_out1;
  assign cfblk176_reg_next[1] = cfblk176_reg[0];



  assign cfblk86_out1 = cfblk217_out1 + cfblk86_const_val_1;



  assign cfblk105_out1 = (cfblk86_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  assign cfblk122_out1 = cfblk105_out1;
  assign cfblk122_out2 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : emi_32_process
      if (reset == 1'b1) begin
        for(emi_32_t_1 = 32'sd0; emi_32_t_1 <= 32'sd1; emi_32_t_1 = emi_32_t_1 + 32'sd1) begin
          emi_32_reg[emi_32_t_1] <= 8'b00000010;
        end
      end
      else begin
        if (enb) begin
          for(emi_32_t_0_0 = 32'sd0; emi_32_t_0_0 <= 32'sd1; emi_32_t_0_0 = emi_32_t_0_0 + 32'sd1) begin
            emi_32_reg[emi_32_t_0_0] <= emi_32_reg_next[emi_32_t_0_0];
          end
        end
      end
    end

  assign emi_32_out1 = emi_32_reg[1];
  assign emi_32_reg_next[0] = cfblk115_out1;
  assign emi_32_reg_next[1] = emi_32_reg[0];



  assign y1_23 = emi_32_out1 >= 8'b00000010;



  assign cfblk115_out1 = cfblk78_out1 + cfblk49_out1;



  cfblk127 u_cfblk127 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_25(cfblk115_out1),  // uint8
                       .Action_Port(y1_23),
                       .emi_26(cfblk127_out1),  // uint8
                       .emi_27(cfblk127_out2)  // uint8
                       );

  assign cfblk91_out1 = cfblk156_out1 - cfblk127_out2;



  always @(cfblk122_out2, cfblk91_out1) begin
    cfblk101_div_temp = 9'b000000000;
    cfblk101_t_0_0 = 9'b000000000;
    if (cfblk122_out2 == 8'b00000000) begin
      cfblk101_out1 = 8'b11111111;
    end
    else begin
      cfblk101_t_0_0 = {1'b0, cfblk91_out1};
      cfblk101_div_temp = cfblk101_t_0_0 / cfblk122_out2;
      if (cfblk101_div_temp[8] != 1'b0) begin
        cfblk101_out1 = 8'b11111111;
      end
      else begin
        cfblk101_out1 = cfblk101_div_temp[7:0];
      end
    end
  end



  assign dtc_out_4 = cfblk101_out1;



  assign cfblk138_out1 = dtc_out_4;



  cfblk38 u_cfblk38 (.u(cfblk138_out1),  // uint8
                     .y(cfblk38_out1)  // uint8
                     );

  always @(posedge clk or posedge reset)
    begin : cfblk181_process
      if (reset == 1'b1) begin
        for(cfblk181_t_1 = 32'sd0; cfblk181_t_1 <= 32'sd1; cfblk181_t_1 = cfblk181_t_1 + 32'sd1) begin
          cfblk181_reg[cfblk181_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk181_t_0_0 = 32'sd0; cfblk181_t_0_0 <= 32'sd1; cfblk181_t_0_0 = cfblk181_t_0_0 + 32'sd1) begin
            cfblk181_reg[cfblk181_t_0_0] <= cfblk181_reg_next[cfblk181_t_0_0];
          end
        end
      end
    end

  assign cfblk181_out1 = cfblk181_reg[1];
  assign cfblk181_reg_next[0] = cfblk38_out1;
  assign cfblk181_reg_next[1] = cfblk181_reg[0];



  always @(posedge clk or posedge reset)
    begin : emi_202_process
      if (reset == 1'b1) begin
        for(emi_202_t_1 = 32'sd0; emi_202_t_1 <= 32'sd1; emi_202_t_1 = emi_202_t_1 + 32'sd1) begin
          emi_202_reg[emi_202_t_1] <= 16'b0000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_202_t_0_0 = 32'sd0; emi_202_t_0_0 <= 32'sd1; emi_202_t_0_0 = emi_202_t_0_0 + 32'sd1) begin
            emi_202_reg[emi_202_t_0_0] <= emi_202_reg_next[emi_202_t_0_0];
          end
        end
      end
    end

  assign emi_202_out1 = emi_202_reg[1];
  assign emi_202_reg_next[0] = cfblk135_out1;
  assign emi_202_reg_next[1] = emi_202_reg[0];



  assign emi_201_out1 = emi_202_out1[14:7];



  assign y1_24 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_65_process
      if (reset == 1'b1) begin
        for(emi_65_t_1 = 32'sd0; emi_65_t_1 <= 32'sd1; emi_65_t_1 = emi_65_t_1 + 32'sd1) begin
          emi_65_reg[emi_65_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_65_t_0_0 = 32'sd0; emi_65_t_0_0 <= 32'sd1; emi_65_t_0_0 = emi_65_t_0_0 + 32'sd1) begin
            emi_65_reg[emi_65_t_0_0] <= emi_65_reg_next[emi_65_t_0_0];
          end
        end
      end
    end

  assign emi_65_out1 = emi_65_reg[1];
  assign emi_65_reg_next[0] = cfblk99_out1;
  assign emi_65_reg_next[1] = emi_65_reg[0];



  assign y1_25 = 1'b1;



  cfblk135 u_cfblk135 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_59(cfblk99_out1),  // uint8
                       .Action_Port(y1_25),
                       .emi_60(cfblk135_out1)  // ufix16_En7
                       );

  cfblk217 u_cfblk217 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_196(cfblk135_out1),  // ufix16_En7
                       .Action_Port(y1_24),
                       .emi_197(cfblk217_out1)  // uint8
                       );

  DotProduct_block1 u_cfblk119_inst (.in1(cfblk217_out1),  // uint8
                                     .in2(cfblk145_out1),  // uint8
                                     .out1(cfblk119_out1)  // uint8
                                     );

  always @(posedge clk or posedge reset)
    begin : cfblk196_process
      if (reset == 1'b1) begin
        for(cfblk196_t_1 = 32'sd0; cfblk196_t_1 <= 32'sd1; cfblk196_t_1 = cfblk196_t_1 + 32'sd1) begin
          cfblk196_reg[cfblk196_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk196_t_0_0 = 32'sd0; cfblk196_t_0_0 <= 32'sd1; cfblk196_t_0_0 = cfblk196_t_0_0 + 32'sd1) begin
            cfblk196_reg[cfblk196_t_0_0] <= cfblk196_reg_next[cfblk196_t_0_0];
          end
        end
      end
    end

  assign cfblk196_out1 = cfblk196_reg[1];
  assign cfblk196_reg_next[0] = cfblk119_out1;
  assign cfblk196_reg_next[1] = cfblk196_reg[0];



  assign cfblk20_out1 = cfblk196_out1 + cfblk181_out1;



  assign cfblk16_out1 = cfblk20_out1 - cfblk176_out1;



  assign cfblk144_out1 = cfblk16_out1 + cfblk191_out1;



  cfblk209 u_cfblk209 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_148(cfblk144_out1),  // uint8
                       .Action_Port(y1_18),
                       .emi_149(cfblk209_out1)
                       );

  assign cfblk8_out1 = cfblk209_out1 & bitMask_for_cfblk8;



  assign cfblk210_out1 = {7'b0, cfblk8_out1};



  assign cfblk210_out1_is_not0 = cfblk210_out1 != 8'b00000000;



  assign cfblk4_out1 = cfblk210_out1_is_not0 & cfblk56_out2_is_not0;



  assign cfblk149_1 = {31'b0, cfblk4_out1};
  assign cfblk149_2 = {24'b0, cfblk27_out1};
  assign cfblk149_add_temp = cfblk149_1 + cfblk149_2;
  assign cfblk149_out1 = cfblk149_add_temp[7:0];



  assign cfblk116_out1 = cfblk149_out1 + cfblk173_out1;



  always @(cfblk116_out1, cfblk171_out1) begin
    cfblk18_div_temp = 9'b000000000;
    cfblk18_t_0_0 = 9'b000000000;
    if (cfblk171_out1 == 8'b00000000) begin
      cfblk18_out1 = 8'b11111111;
    end
    else begin
      cfblk18_t_0_0 = {1'b0, cfblk116_out1};
      cfblk18_div_temp = cfblk18_t_0_0 / cfblk171_out1;
      if (cfblk18_div_temp[8] != 1'b0) begin
        cfblk18_out1 = 8'b11111111;
      end
      else begin
        cfblk18_out1 = cfblk18_div_temp[7:0];
      end
    end
  end



  assign cfblk33_out1 = cfblk18_out1 + cfblk137_out1;



  cfblk10 u_cfblk10 (.u(cfblk33_out1),  // uint8
                     .y(cfblk10_out1)  // uint8
                     );

  always @(cfblk10_out1, cfblk217_out1) begin
    cfblk21_div_temp = 9'b000000000;
    cfblk21_t_0_0 = 9'b000000000;
    if (cfblk217_out1 == 8'b00000000) begin
      cfblk21_out1 = 8'b11111111;
    end
    else begin
      cfblk21_t_0_0 = {1'b0, cfblk10_out1};
      cfblk21_div_temp = cfblk21_t_0_0 / cfblk217_out1;
      if (cfblk21_div_temp[8] != 1'b0) begin
        cfblk21_out1 = 8'b11111111;
      end
      else begin
        cfblk21_out1 = cfblk21_div_temp[7:0];
      end
    end
  end



  cfblk93 u_cfblk93 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_319(cfblk21_out1),  // uint8
                     .Action_Port(y1_13),
                     .emi_320(cfblk93_out1),  // uint8
                     .emi_321(cfblk93_out2)  // uint8
                     );

  always @(posedge clk or posedge reset)
    begin : cfblk172_process
      if (reset == 1'b1) begin
        for(cfblk172_t_1 = 32'sd0; cfblk172_t_1 <= 32'sd1; cfblk172_t_1 = cfblk172_t_1 + 32'sd1) begin
          cfblk172_reg[cfblk172_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk172_t_0_0 = 32'sd0; cfblk172_t_0_0 <= 32'sd1; cfblk172_t_0_0 = cfblk172_t_0_0 + 32'sd1) begin
            cfblk172_reg[cfblk172_t_0_0] <= cfblk172_reg_next[cfblk172_t_0_0];
          end
        end
      end
    end

  assign cfblk172_out1 = cfblk172_reg[1];
  assign cfblk172_reg_next[0] = cfblk93_out2;
  assign cfblk172_reg_next[1] = cfblk172_reg[0];



  assign cfblk120_out1 = cfblk172_out1 - cfblk70_out1;



  cfblk147 u_cfblk147 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_83(cfblk120_out1),  // uint8
                       .Action_Port(y1_12),
                       .emi_84(cfblk147_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : emi_138_process
      if (reset == 1'b1) begin
        for(emi_138_t_1 = 32'sd0; emi_138_t_1 <= 32'sd1; emi_138_t_1 = emi_138_t_1 + 32'sd1) begin
          emi_138_reg[emi_138_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_138_t_0_0 = 32'sd0; emi_138_t_0_0 <= 32'sd1; emi_138_t_0_0 = emi_138_t_0_0 + 32'sd1) begin
            emi_138_reg[emi_138_t_0_0] <= emi_138_reg_next[emi_138_t_0_0];
          end
        end
      end
    end

  assign emi_138_out1 = emi_138_reg[1];
  assign emi_138_reg_next[0] = cfblk216_out1;
  assign emi_138_reg_next[1] = emi_138_reg[0];



  assign y1_26 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_194_process
      if (reset == 1'b1) begin
        for(emi_194_t_1 = 32'sd0; emi_194_t_1 <= 32'sd1; emi_194_t_1 = emi_194_t_1 + 32'sd1) begin
          emi_194_reg[emi_194_t_1] <= 8'b00000001;
        end
      end
      else begin
        if (enb) begin
          for(emi_194_t_0_0 = 32'sd0; emi_194_t_0_0 <= 32'sd1; emi_194_t_0_0 = emi_194_t_0_0 + 32'sd1) begin
            emi_194_reg[emi_194_t_0_0] <= emi_194_reg_next[emi_194_t_0_0];
          end
        end
      end
    end

  assign emi_194_out1 = emi_194_reg[1];
  assign emi_194_reg_next[0] = cfblk150_out1;
  assign emi_194_reg_next[1] = emi_194_reg[0];



  assign y1_27 = emi_194_out1 >= 8'b00000001;



  always @(posedge clk or posedge reset)
    begin : emi_97_process
      if (reset == 1'b1) begin
        for(emi_97_t_1 = 32'sd0; emi_97_t_1 <= 32'sd1; emi_97_t_1 = emi_97_t_1 + 32'sd1) begin
          emi_97_reg[emi_97_t_1] <= 8'b00000001;
        end
      end
      else begin
        if (enb) begin
          for(emi_97_t_0_0 = 32'sd0; emi_97_t_0_0 <= 32'sd1; emi_97_t_0_0 = emi_97_t_0_0 + 32'sd1) begin
            emi_97_reg[emi_97_t_0_0] <= emi_97_reg_next[emi_97_t_0_0];
          end
        end
      end
    end

  assign emi_97_out1 = emi_97_reg[1];
  assign emi_97_reg_next[0] = cfblk125_out1;
  assign emi_97_reg_next[1] = emi_97_reg[0];



  assign y1_28 = emi_97_out1 >= 8'b00000001;



  always @(posedge clk or posedge reset)
    begin : emi_186_process
      if (reset == 1'b1) begin
        emi_186_reg <= {2{1'b1}};
      end
      else begin
        if (enb) begin
          emi_186_reg[0] <= cfblk6_out1;
          emi_186_reg[1] <= emi_186_reg[0];
        end
      end
    end

  assign emi_186_out1 = emi_186_reg[1];



  assign emi_185_out1 = {7'b0, emi_186_out1};



  assign y1_29 = emi_185_out1 >= 8'b00000001;



  always @(posedge clk or posedge reset)
    begin : emi_293_process
      if (reset == 1'b1) begin
        emi_293_reg <= {2{1'b1}};
      end
      else begin
        if (enb) begin
          emi_293_reg[0] <= cfblk213_out1;
          emi_293_reg[1] <= emi_293_reg[0];
        end
      end
    end

  assign emi_293_out1 = emi_293_reg[1];



  assign emi_292_out1 = {7'b0, emi_293_out1};



  assign y1_30 = emi_292_out1 >= 8'b00000001;



  always @(posedge clk or posedge reset)
    begin : emi_178_process
      if (reset == 1'b1) begin
        for(emi_178_t_1 = 32'sd0; emi_178_t_1 <= 32'sd1; emi_178_t_1 = emi_178_t_1 + 32'sd1) begin
          emi_178_reg[emi_178_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_178_t_0_0 = 32'sd0; emi_178_t_0_0 <= 32'sd1; emi_178_t_0_0 = emi_178_t_0_0 + 32'sd1) begin
            emi_178_reg[emi_178_t_0_0] <= emi_178_reg_next[emi_178_t_0_0];
          end
        end
      end
    end

  assign emi_178_out1 = emi_178_reg[1];
  assign emi_178_reg_next[0] = cfblk117_out1;
  assign emi_178_reg_next[1] = emi_178_reg[0];



  assign y1_31 = emi_178_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_105_process
      if (reset == 1'b1) begin
        for(emi_105_t_1 = 32'sd0; emi_105_t_1 <= 32'sd1; emi_105_t_1 = emi_105_t_1 + 32'sd1) begin
          emi_105_reg[emi_105_t_1] <= 8'b11111111;
        end
      end
      else begin
        if (enb) begin
          for(emi_105_t_0_0 = 32'sd0; emi_105_t_0_0 <= 32'sd1; emi_105_t_0_0 = emi_105_t_0_0 + 32'sd1) begin
            emi_105_reg[emi_105_t_0_0] <= emi_105_reg_next[emi_105_t_0_0];
          end
        end
      end
    end

  assign emi_105_out1 = emi_105_reg[1];
  assign emi_105_reg_next[0] = cfblk143_out1;
  assign emi_105_reg_next[1] = emi_105_reg[0];



  assign y1_32 = emi_105_out1 == 8'b11111111;



  always @(posedge clk or posedge reset)
    begin : emi_57_process
      if (reset == 1'b1) begin
        for(emi_57_t_1 = 32'sd0; emi_57_t_1 <= 32'sd1; emi_57_t_1 = emi_57_t_1 + 32'sd1) begin
          emi_57_reg[emi_57_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_57_t_0_0 = 32'sd0; emi_57_t_0_0 <= 32'sd1; emi_57_t_0_0 = emi_57_t_0_0 + 32'sd1) begin
            emi_57_reg[emi_57_t_0_0] <= emi_57_reg_next[emi_57_t_0_0];
          end
        end
      end
    end

  assign emi_57_out1 = emi_57_reg[1];
  assign emi_57_reg_next[0] = cfblk81_out1;
  assign emi_57_reg_next[1] = emi_57_reg[0];



  assign y1_33 = 1'b1;



  cfblk133 u_cfblk133 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_51(cfblk81_out1),  // uint8
                       .Action_Port(y1_33),
                       .emi_52(cfblk133_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk190_process
      if (reset == 1'b1) begin
        for(cfblk190_t_1 = 32'sd0; cfblk190_t_1 <= 32'sd1; cfblk190_t_1 = cfblk190_t_1 + 32'sd1) begin
          cfblk190_reg[cfblk190_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk190_t_0_0 = 32'sd0; cfblk190_t_0_0 <= 32'sd1; cfblk190_t_0_0 = cfblk190_t_0_0 + 32'sd1) begin
            cfblk190_reg[cfblk190_t_0_0] <= cfblk190_reg_next[cfblk190_t_0_0];
          end
        end
      end
    end

  assign cfblk190_out1 = cfblk190_reg[1];
  assign cfblk190_reg_next[0] = cfblk133_out1;
  assign cfblk190_reg_next[1] = cfblk190_reg[0];



  always @(cfblk190_out1, cfblk22_out1) begin
    cfblk81_div_temp = 9'b000000000;
    cfblk81_t_0_0 = 9'b000000000;
    if (cfblk22_out1 == 8'b00000000) begin
      cfblk81_out1 = 8'b11111111;
    end
    else begin
      cfblk81_t_0_0 = {1'b0, cfblk190_out1};
      cfblk81_div_temp = cfblk81_t_0_0 / cfblk22_out1;
      if (cfblk81_div_temp[8] != 1'b0) begin
        cfblk81_out1 = 8'b11111111;
      end
      else begin
        cfblk81_out1 = cfblk81_div_temp[7:0];
      end
    end
  end



  assign cfblk143_out1 = cfblk81_out1 + cfblk75_out1;



  cfblk153_block u_cfblk153 (.clk(clk),
                             .reset(reset),
                             .enb(clk_enable),
                             .emi_99(cfblk143_out1),  // uint8
                             .Action_Port(y1_32),
                             .emi_100(cfblk153_out1)  // uint8
                             );

  assign cfblk117_out1 = cfblk153_out1 + cfblk117_const_val_1;



  cfblk213 u_cfblk213 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_172(cfblk117_out1),  // uint8
                       .Action_Port(y1_31),
                       .emi_173(cfblk213_out1)
                       );

  cfblk6 u_cfblk6 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .emi_287(cfblk213_out1),
                   .Action_Port(y1_30),
                   .emi_288(cfblk6_out1)
                   );

  cfblk214 u_cfblk214 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_180(cfblk6_out1),
                       .Action_Port(y1_29),
                       .emi_181(cfblk214_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : emi_244_process
      if (reset == 1'b1) begin
        for(emi_244_t_1 = 32'sd0; emi_244_t_1 <= 32'sd1; emi_244_t_1 = emi_244_t_1 + 32'sd1) begin
          emi_244_reg[emi_244_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_244_t_0_0 = 32'sd0; emi_244_t_0_0 <= 32'sd1; emi_244_t_0_0 = emi_244_t_0_0 + 32'sd1) begin
            emi_244_reg[emi_244_t_0_0] <= emi_244_reg_next[emi_244_t_0_0];
          end
        end
      end
    end

  assign emi_244_out1 = emi_244_reg[1];
  assign emi_244_reg_next[0] = cfblk58_out1;
  assign emi_244_reg_next[1] = emi_244_reg[0];



  assign y1_34 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : emi_236_process
      if (reset == 1'b1) begin
        for(emi_236_t_1 = 32'sd0; emi_236_t_1 <= 32'sd1; emi_236_t_1 = emi_236_t_1 + 32'sd1) begin
          emi_236_reg[emi_236_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(emi_236_t_0_0 = 32'sd0; emi_236_t_0_0 <= 32'sd1; emi_236_t_0_0 = emi_236_t_0_0 + 32'sd1) begin
            emi_236_reg[emi_236_t_0_0] <= emi_236_reg_next[emi_236_t_0_0];
          end
        end
      end
    end

  assign emi_236_out1 = emi_236_reg[1];
  assign emi_236_reg_next[0] = cfblk1_out1;
  assign emi_236_reg_next[1] = emi_236_reg[0];



  assign y1_35 = 1'b1;



  cfblk220 u_cfblk220 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_230(cfblk1_out1),  // uint8
                       .Action_Port(y1_35),
                       .emi_231(cfblk220_out1)  // uint8
                       );

  assign cfblk58_out1 = (cfblk220_out1 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk37 u_cfblk37 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_238(cfblk58_out1),  // uint8
                     .Action_Port(y1_34),
                     .emi_239(cfblk37_out1)  // uint8
                     );

  cfblk9 u_cfblk9 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .U(cfblk37_out1),  // uint8
                   .Y(cfblk9_out1)  // uint8
                   );

  assign cfblk125_out1 = cfblk9_out1 + cfblk214_out1;



  cfblk150 u_cfblk150 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_91(cfblk125_out1),  // uint8
                       .Action_Port(y1_28),
                       .emi_92(cfblk150_out1)  // uint8
                       );

  cfblk216 u_cfblk216 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_188(cfblk150_out1),  // uint8
                       .Action_Port(y1_27),
                       .emi_189(cfblk216_out1)  // uint8
                       );

  cfblk204 u_cfblk204 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_132(cfblk216_out1),  // uint8
                       .Action_Port(y1_26),
                       .emi_133(cfblk204_out1)  // uint8
                       );

  DotProduct_block u_cfblk102_inst (.in1(cfblk204_out1),  // uint8
                                    .in2(cfblk147_out1),  // uint8
                                    .out1(cfblk102_out1)  // uint8
                                    );

  assign dtc_out_5 = cfblk102_out1;



  assign cfblk145_out1 = dtc_out_5;



  always @(cfblk145_out1, cfblk43_out1) begin
    cfblk118_div_temp = 9'b000000000;
    cfblk118_t_0_0 = 9'b000000000;
    if (cfblk43_out1 == 8'b00000000) begin
      cfblk118_out1 = 8'b11111111;
    end
    else begin
      cfblk118_t_0_0 = {1'b0, cfblk145_out1};
      cfblk118_div_temp = cfblk118_t_0_0 / cfblk43_out1;
      if (cfblk118_div_temp[8] != 1'b0) begin
        cfblk118_out1 = 8'b11111111;
      end
      else begin
        cfblk118_out1 = cfblk118_div_temp[7:0];
      end
    end
  end



  assign cfblk36_out1 = cfblk118_out1 + cfblk11_out1;



  always @(posedge clk or posedge reset)
    begin : cfblk194_process
      if (reset == 1'b1) begin
        for(cfblk194_t_1 = 32'sd0; cfblk194_t_1 <= 32'sd1; cfblk194_t_1 = cfblk194_t_1 + 32'sd1) begin
          cfblk194_reg[cfblk194_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk194_t_0_0 = 32'sd0; cfblk194_t_0_0 <= 32'sd1; cfblk194_t_0_0 = cfblk194_t_0_0 + 32'sd1) begin
            cfblk194_reg[cfblk194_t_0_0] <= cfblk194_reg_next[cfblk194_t_0_0];
          end
        end
      end
    end

  assign cfblk194_out1 = cfblk194_reg[1];
  assign cfblk194_reg_next[0] = cfblk36_out1;
  assign cfblk194_reg_next[1] = cfblk194_reg[0];



  assign cfblk112_out1 = cfblk194_out1 + cfblk110_out1;



  cfblk46 u_cfblk46 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_263(cfblk112_out1),  // uint8
                     .Action_Port(y1_10),
                     .emi_264(cfblk46_out1)  // uint8
                     );

  cfblk75 u_cfblk75 (.u(cfblk46_out1),  // uint8
                     .y(cfblk75_out1)  // uint8
                     );

  assign cfblk29_out1 = cfblk75_out1 + cfblk182_out1;



  cfblk206 u_cfblk206 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_140(cfblk29_out1),  // uint8
                       .Action_Port(y1_9),
                       .emi_141(cfblk206_out1)  // uint8
                       );

  cfblk19 u_cfblk19 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_115(cfblk206_out1),  // uint8
                     .Action_Port(y1_8),
                     .emi_117(cfblk19_out2)  // uint8
                     );

  assign cfblk49_out1 = (cfblk19_out2 > 8'b00000000 ? 8'b00000001 :
              8'b00000000);



  cfblk2_block u_cfblk2 (.clk(clk),
                         .reset(reset),
                         .enb(clk_enable),
                         .emi_124(cfblk49_out1),  // uint8
                         .Action_Port(y1_7),
                         .emi_125(cfblk2_out1)  // uint8
                         );

  assign cfblk3_relop1 = cfblk2_out1 <= cfblk63_out1;



  assign cfblk3_relop1_dtc = {7'b0, cfblk3_relop1};



  always @(posedge clk or posedge reset)
    begin : cfblk177_process
      if (reset == 1'b1) begin
        for(cfblk177_t_1 = 32'sd0; cfblk177_t_1 <= 32'sd1; cfblk177_t_1 = cfblk177_t_1 + 32'sd1) begin
          cfblk177_reg[cfblk177_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk177_t_0_0 = 32'sd0; cfblk177_t_0_0 <= 32'sd1; cfblk177_t_0_0 = cfblk177_t_0_0 + 32'sd1) begin
            cfblk177_reg[cfblk177_t_0_0] <= cfblk177_reg_next[cfblk177_t_0_0];
          end
        end
      end
    end

  assign cfblk177_out1 = cfblk177_reg[1];
  assign cfblk177_reg_next[0] = cfblk3_relop1_dtc;
  assign cfblk177_reg_next[1] = cfblk177_reg[0];



  always @(cfblk177_out1, cfblk198_out1) begin
    cfblk43_div_temp = 9'b000000000;
    cfblk43_t_0_0 = 9'b000000000;
    if (cfblk198_out1 == 8'b00000000) begin
      cfblk43_out1 = 8'b11111111;
    end
    else begin
      cfblk43_t_0_0 = {1'b0, cfblk177_out1};
      cfblk43_div_temp = cfblk43_t_0_0 / cfblk198_out1;
      if (cfblk43_div_temp[8] != 1'b0) begin
        cfblk43_out1 = 8'b11111111;
      end
      else begin
        cfblk43_out1 = cfblk43_div_temp[7:0];
      end
    end
  end



  assign cfblk73_out1 = cfblk43_out1;
  assign cfblk73_out2 = 8'b00000000;



  always @(posedge clk or posedge reset)
    begin : cfblk189_process
      if (reset == 1'b1) begin
        for(cfblk189_t_1 = 32'sd0; cfblk189_t_1 <= 32'sd1; cfblk189_t_1 = cfblk189_t_1 + 32'sd1) begin
          cfblk189_reg[cfblk189_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk189_t_0_0 = 32'sd0; cfblk189_t_0_0 <= 32'sd1; cfblk189_t_0_0 = cfblk189_t_0_0 + 32'sd1) begin
            cfblk189_reg[cfblk189_t_0_0] <= cfblk189_reg_next[cfblk189_t_0_0];
          end
        end
      end
    end

  assign cfblk189_out1 = cfblk189_reg[1];
  assign cfblk189_reg_next[0] = cfblk73_out2;
  assign cfblk189_reg_next[1] = cfblk189_reg[0];



  assign cfblk99_out1 = cfblk189_out1 - cfblk109_out1;



  cfblk45 u_cfblk45 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_254(cfblk99_out1),  // uint8
                     .Action_Port(y1_6),
                     .emi_255(cfblk45_out1)  // uint8
                     );

  assign cfblk56_out1 = cfblk45_out1;
  assign cfblk56_out2 = 8'b00000000;



  always @(cfblk137_out1, cfblk56_out2) begin
    cfblk123_div_temp = 9'b000000000;
    cfblk123_t_0_0 = 9'b000000000;
    if (cfblk137_out1 == 8'b00000000) begin
      cfblk123_out1 = 8'b11111111;
    end
    else begin
      cfblk123_t_0_0 = {1'b0, cfblk56_out2};
      cfblk123_div_temp = cfblk123_t_0_0 / cfblk137_out1;
      if (cfblk123_div_temp[8] != 1'b0) begin
        cfblk123_out1 = 8'b11111111;
      end
      else begin
        cfblk123_out1 = cfblk123_div_temp[7:0];
      end
    end
  end



  cfblk161 u_cfblk161 (.In1(cfblk123_out1),  // uint8
                       .Out1(cfblk161_out1)  // uint8
                       );

  always @(posedge clk or posedge reset)
    begin : cfblk188_process
      if (reset == 1'b1) begin
        for(cfblk188_t_1 = 32'sd0; cfblk188_t_1 <= 32'sd1; cfblk188_t_1 = cfblk188_t_1 + 32'sd1) begin
          cfblk188_reg[cfblk188_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk188_t_0_0 = 32'sd0; cfblk188_t_0_0 <= 32'sd1; cfblk188_t_0_0 = cfblk188_t_0_0 + 32'sd1) begin
            cfblk188_reg[cfblk188_t_0_0] <= cfblk188_reg_next[cfblk188_t_0_0];
          end
        end
      end
    end

  assign cfblk188_out1 = cfblk188_reg[1];
  assign cfblk188_reg_next[0] = cfblk161_out1;
  assign cfblk188_reg_next[1] = cfblk188_reg[0];



  assign cfblk94_out1 = cfblk188_out1 + cfblk89_out1;



  always @(cfblk197_out1, cfblk94_out1) begin
    cfblk82_div_temp = 9'b000000000;
    cfblk82_t_0_0 = 9'b000000000;
    if (cfblk197_out1 == 8'b00000000) begin
      cfblk82_out1 = 8'b11111111;
    end
    else begin
      cfblk82_t_0_0 = {1'b0, cfblk94_out1};
      cfblk82_div_temp = cfblk82_t_0_0 / cfblk197_out1;
      if (cfblk82_div_temp[8] != 1'b0) begin
        cfblk82_out1 = 8'b11111111;
      end
      else begin
        cfblk82_out1 = cfblk82_div_temp[7:0];
      end
    end
  end



  always @(posedge clk or posedge reset)
    begin : emi_113_process
      if (reset == 1'b1) begin
        for(emi_113_t_1 = 32'sd0; emi_113_t_1 <= 32'sd1; emi_113_t_1 = emi_113_t_1 + 32'sd1) begin
          emi_113_reg[emi_113_t_1] <= 8'b00000001;
        end
      end
      else begin
        if (enb) begin
          for(emi_113_t_0_0 = 32'sd0; emi_113_t_0_0 <= 32'sd1; emi_113_t_0_0 = emi_113_t_0_0 + 32'sd1) begin
            emi_113_reg[emi_113_t_0_0] <= emi_113_reg_next[emi_113_t_0_0];
          end
        end
      end
    end

  assign emi_113_out1 = emi_113_reg[1];
  assign emi_113_reg_next[0] = cfblk71_out1;
  assign emi_113_reg_next[1] = emi_113_reg[0];



  assign y1_36 = emi_113_out1 >= 8'b00000001;



  cfblk17 u_cfblk17 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_107(cfblk71_out1),  // uint8
                     .Action_Port(y1_36),
                     .emi_108(cfblk17_out1)  // uint8
                     );

  always @(posedge clk or posedge reset)
    begin : cfblk187_process
      if (reset == 1'b1) begin
        for(cfblk187_t_1 = 32'sd0; cfblk187_t_1 <= 32'sd1; cfblk187_t_1 = cfblk187_t_1 + 32'sd1) begin
          cfblk187_reg[cfblk187_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(cfblk187_t_0_0 = 32'sd0; cfblk187_t_0_0 <= 32'sd1; cfblk187_t_0_0 = cfblk187_t_0_0 + 32'sd1) begin
            cfblk187_reg[cfblk187_t_0_0] <= cfblk187_reg_next[cfblk187_t_0_0];
          end
        end
      end
    end

  assign cfblk187_out1 = cfblk187_reg[1];
  assign cfblk187_reg_next[0] = cfblk17_out1;
  assign cfblk187_reg_next[1] = cfblk187_reg[0];



  always @(cfblk187_out1, cfblk82_out1) begin
    cfblk41_div_temp = 9'b000000000;
    cfblk41_t_0_0 = 9'b000000000;
    if (cfblk82_out1 == 8'b00000000) begin
      cfblk41_out1 = 8'b11111111;
    end
    else begin
      cfblk41_t_0_0 = {1'b0, cfblk187_out1};
      cfblk41_div_temp = cfblk41_t_0_0 / cfblk82_out1;
      if (cfblk41_div_temp[8] != 1'b0) begin
        cfblk41_out1 = 8'b11111111;
      end
      else begin
        cfblk41_out1 = cfblk41_div_temp[7:0];
      end
    end
  end



  cfblk103_block u_cfblk103 (.clk(clk),
                             .reset(reset),
                             .enb(clk_enable),
                             .emi_9(cfblk41_out1),  // uint8
                             .Action_Port(y1_4),
                             .emi_10(cfblk103_out1)  // uint8
                             );

  cfblk124 u_cfblk124 (.u(cfblk103_out1),  // uint8
                       .y(cfblk124_out1)  // uint8
                       );

  assign cfblk34_out1 = cfblk124_out1 + cfblk34_const_val_1;



  assign dtc_out_6 = cfblk34_out1;



  assign cfblk78_out1 = dtc_out_6;



  always @(cfblk52_out1, cfblk78_out1) begin
    cfblk121_div_temp = 9'b000000000;
    cfblk121_t_0_0 = 9'b000000000;
    if (cfblk52_out1 == 8'b00000000) begin
      cfblk121_out1 = 8'b11111111;
    end
    else begin
      cfblk121_t_0_0 = {1'b0, cfblk78_out1};
      cfblk121_div_temp = cfblk121_t_0_0 / cfblk52_out1;
      if (cfblk121_div_temp[8] != 1'b0) begin
        cfblk121_out1 = 8'b11111111;
      end
      else begin
        cfblk121_out1 = cfblk121_div_temp[7:0];
      end
    end
  end



  assign dtc_out_7 = cfblk121_out1;



  assign cfblk79_out1 = dtc_out_7;



  assign cfblk71_out1 = cfblk79_out1 + cfblk71_const_val_1;



  assign cfblk22_out1 = cfblk71_out1 + cfblk23_out1;



  cfblk30 u_cfblk30 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .emi_221(cfblk22_out1),  // uint8
                     .Action_Port(y1_2),
                     .emi_222(cfblk30_out1),  // uint8
                     .emi_223(cfblk30_out2)  // uint8
                     );

  cfblk14 u_cfblk14 (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .U(cfblk30_out2),  // uint8
                     .Y(cfblk14_out1)  // uint8
                     );

  assign cfblk151_out1 = cfblk14_out1 - cfblk210_out1;



  cfblk174 u_cfblk174 (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .emi_75(cfblk151_out1),  // uint8
                       .Action_Port(y1_1),
                       .emi_76(cfblk174_out1)  // uint8
                       );

  cfblk1 u_cfblk1 (.clk(clk),
                   .reset(reset),
                   .enb(clk_enable),
                   .emi_1(cfblk174_out1),  // uint8
                   .Action_Port(y1),
                   .emi_2(cfblk1_out1)  // uint8
                   );

  assign Hdl_out = cfblk1_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem

