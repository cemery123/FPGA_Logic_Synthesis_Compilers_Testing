
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.37+1 (git sha1 e1f4c5c9cbb, clang  -fPIC -Os)


-- Executing script file `design_aiger.ys' --

1. Executing RTLIL frontend.
Input filename: design_prep.il

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \Subsystem_2
Used module:         \cfblk95
Used module:         \cfblk93
Used module:         \cfblk9
Used module:         \DotProduct_block4
Used module:         \cfblk75
Used module:         \cfblk7
Used module:         \cfblk65
Used module:         \cfblk63_block
Used module:             \cfblk63
Used module:         \cfblk60
Used module:         \cfblk6
Used module:         \cfblk54
Used module:         \cfblk52
Used module:         \cfblk46
Used module:         \cfblk45
Used module:         \cfblk39_block
Used module:             \cfblk39
Used module:         \cfblk38
Used module:         \cfblk37
Used module:         \cfblk30
Used module:         \cfblk27
Used module:         \cfblk23
Used module:         \cfblk220
Used module:         \cfblk217
Used module:         \cfblk216
Used module:         \cfblk214
Used module:         \cfblk213
Used module:         \cfblk209
Used module:         \cfblk206
Used module:         \cfblk204
Used module:         \cfblk2_block
Used module:             \cfblk2
Used module:         \cfblk19
Used module:         \cfblk174
Used module:         \cfblk17
Used module:         \cfblk161
Used module:         \cfblk160
Used module:         \cfblk153_block
Used module:             \cfblk153
Used module:         \cfblk150
Used module:         \cfblk147
Used module:         \cfblk14
Used module:             \Nonpositive
Used module:         \cfblk136
Used module:         \cfblk135
Used module:         \DotProduct_block3
Used module:         \cfblk133
Used module:         \cfblk131
Used module:         \cfblk130_block
Used module:             \cfblk130
Used module:         \cfblk127
Used module:         \DotProduct_block2
Used module:         \cfblk124
Used module:         \DotProduct_block1
Used module:         \cfblk11_block
Used module:             \cfblk11
Used module:         \cfblk103_block
Used module:             \cfblk103
Used module:         \DotProduct_block
Used module:         \DotProduct
Used module:         \cfblk10
Used module:         \cfblk1
Used module:     \Subsystem_1

2.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \Subsystem_2
Used module:         \cfblk95
Used module:         \cfblk93
Used module:         \cfblk9
Used module:         \DotProduct_block4
Used module:         \cfblk75
Used module:         \cfblk7
Used module:         \cfblk65
Used module:         \cfblk63_block
Used module:             \cfblk63
Used module:         \cfblk60
Used module:         \cfblk6
Used module:         \cfblk54
Used module:         \cfblk52
Used module:         \cfblk46
Used module:         \cfblk45
Used module:         \cfblk39_block
Used module:             \cfblk39
Used module:         \cfblk38
Used module:         \cfblk37
Used module:         \cfblk30
Used module:         \cfblk27
Used module:         \cfblk23
Used module:         \cfblk220
Used module:         \cfblk217
Used module:         \cfblk216
Used module:         \cfblk214
Used module:         \cfblk213
Used module:         \cfblk209
Used module:         \cfblk206
Used module:         \cfblk204
Used module:         \cfblk2_block
Used module:             \cfblk2
Used module:         \cfblk19
Used module:         \cfblk174
Used module:         \cfblk17
Used module:         \cfblk161
Used module:         \cfblk160
Used module:         \cfblk153_block
Used module:             \cfblk153
Used module:         \cfblk150
Used module:         \cfblk147
Used module:         \cfblk14
Used module:             \Nonpositive
Used module:         \cfblk136
Used module:         \cfblk135
Used module:         \DotProduct_block3
Used module:         \cfblk133
Used module:         \cfblk131
Used module:         \cfblk130_block
Used module:             \cfblk130
Used module:         \cfblk127
Used module:         \DotProduct_block2
Used module:         \cfblk124
Used module:         \DotProduct_block1
Used module:         \cfblk11_block
Used module:             \cfblk11
Used module:         \cfblk103_block
Used module:             \cfblk103
Used module:         \DotProduct_block
Used module:         \DotProduct
Used module:         \cfblk10
Used module:         \cfblk1
Used module:     \Subsystem_1
Removed 0 unused modules.
Module top directly or indirectly contains formal properties -> setting "keep" attribute.

3. Executing FORMALFF pass.

4. Executing FLATTEN pass (flatten design).
Deleting now unused module cfblk95.
Deleting now unused module cfblk93.
Deleting now unused module cfblk9.
Deleting now unused module cfblk75.
Deleting now unused module cfblk7.
Deleting now unused module cfblk65.
Deleting now unused module cfblk63_block.
Deleting now unused module cfblk63.
Deleting now unused module cfblk60.
Deleting now unused module cfblk6.
Deleting now unused module cfblk54.
Deleting now unused module cfblk52.
Deleting now unused module cfblk46.
Deleting now unused module cfblk45.
Deleting now unused module cfblk39_block.
Deleting now unused module cfblk39.
Deleting now unused module cfblk38.
Deleting now unused module cfblk37.
Deleting now unused module cfblk30.
Deleting now unused module cfblk2_block.
Deleting now unused module cfblk27.
Deleting now unused module cfblk23.
Deleting now unused module cfblk220.
Deleting now unused module cfblk217.
Deleting now unused module cfblk216.
Deleting now unused module cfblk214.
Deleting now unused module cfblk213.
Deleting now unused module cfblk209.
Deleting now unused module cfblk206.
Deleting now unused module cfblk204.
Deleting now unused module cfblk2.
Deleting now unused module cfblk19.
Deleting now unused module cfblk174.
Deleting now unused module cfblk17.
Deleting now unused module cfblk161.
Deleting now unused module cfblk160.
Deleting now unused module cfblk153_block.
Deleting now unused module cfblk153.
Deleting now unused module cfblk150.
Deleting now unused module cfblk147.
Deleting now unused module cfblk14.
Deleting now unused module cfblk136.
Deleting now unused module cfblk135.
Deleting now unused module cfblk133.
Deleting now unused module cfblk131.
Deleting now unused module cfblk130_block.
Deleting now unused module cfblk130.
Deleting now unused module cfblk127.
Deleting now unused module cfblk124.
Deleting now unused module cfblk11_block.
Deleting now unused module cfblk11.
Deleting now unused module cfblk103_block.
Deleting now unused module cfblk103.
Deleting now unused module cfblk10.
Deleting now unused module cfblk1.
Deleting now unused module Subsystem_2.
Deleting now unused module Subsystem_1.
Deleting now unused module Nonpositive.
Deleting now unused module DotProduct_block4.
Deleting now unused module DotProduct_block3.
Deleting now unused module DotProduct_block2.
Deleting now unused module DotProduct_block1.
Deleting now unused module DotProduct_block.
Deleting now unused module DotProduct.
<suppressed ~118 debug messages>

5. Executing SETUNDEF pass (replace undef values with defined constants).

6. Executing OPT pass (performing simple optimizations).

6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~943 debug messages>

6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~786 debug messages>
Removed a total of 262 cells.

6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1963 debug messages>

6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

6.6. Executing OPT_SHARE pass.

6.7. Executing OPT_DFF pass (perform DFF optimizations).

6.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1288 unused cells and 1593 unused wires.
<suppressed ~1339 debug messages>

6.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1043 debug messages>

6.10. Rerunning OPT passes. (Maybe there is more to do..)

6.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1872 debug messages>

6.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

6.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

6.14. Executing OPT_SHARE pass.

6.15. Executing OPT_DFF pass (perform DFF optimizations).

6.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

6.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

6.18. Finished OPT passes. (There is nothing left to do.)

7. Executing TECHMAP pass (map to technology primitives).

7.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

7.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $ff.
Using extmapper simplemap for cells of type $eq.
Running "alumacc" on wrapper $extern:wrap:$gt:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$gt:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$gt:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $reduce_or.
Running "alumacc" on wrapper $extern:wrap:$gt:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$gt:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$gt:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $reduce_bool.
Running "alumacc" on wrapper $extern:wrap:$gt:A_SIGNED=0:A_WIDTH=1:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$gt:A_SIGNED=0:A_WIDTH=1:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$gt:A_SIGNED=0:A_WIDTH=1:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$le:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$le:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$le:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$lt:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$mul:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=1:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$4ccbe221165818e15f326ddee3d1183c7924e12f\_90_div for cells of type $div.
Using template $paramod$24452e00eedb072a1c980b71027464878612883d\_90_div for cells of type $div.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=1:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=1:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=1:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=8:B_SIGNED=0:B_WIDTH=8:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $eqx.
Using template $paramod$c3cd1564c35d873179656addd6052d7ea8b6d991\_90_alu for cells of type $alu.
Using template $paramod$a1bc51c02ce12ac21eb18988e83292af48ed7d72\_90_alu for cells of type $alu.
Using template $paramod$4ccbe221165818e15f326ddee3d1183c7924e12f\$__div_mod_trunc for cells of type $__div_mod_trunc.
Using template $paramod$24452e00eedb072a1c980b71027464878612883d\$__div_mod_trunc for cells of type $__div_mod_trunc.
Using template $paramod$403a3c2fa431a154c52a6a5429d7a6260b5d144f\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper maccmap for cells of type $macc.
  add \Subsystem_2.cfblk180_reg[1] * \Subsystem_2.u_cfblk100_inst.in2 (8x8 bits, unsigned)
  add \Subsystem_2.u_cfblk102_inst.in1 * { 7'0000000 \Subsystem_2.u_cfblk147.cfblk147_out1 } (8x8 bits, unsigned)
  add { \Subsystem_2.cfblk217_out1 [7:1] \Subsystem_2.cfblk185_reg[1] [0] } * \Subsystem_2.cfblk102_out1 (8x8 bits, unsigned)
  add \Subsystem_2.u_cfblk102_inst.in1 * { 7'0000000 \Subsystem_2.u_cfblk9.FixPt_Relational_Operator_relop1 } (8x8 bits, unsigned)
  add \Subsystem_2.u_cfblk54.emi_280 * \Subsystem_2.cfblk183_reg_next[0] (8x8 bits, unsigned)
Using template $paramod$fc972a7a46956c1788f3cb5257b53c8f1df2d0cc\_90_alu for cells of type $alu.
  add \Subsystem_1.cfblk180_reg[1] * \Subsystem_1.u_cfblk100_inst.in2 (8x8 bits, unsigned)
  add \Subsystem_1.u_cfblk102_inst.in1 * { 7'0000000 \Subsystem_1.u_cfblk147.cfblk147_out1 } (8x8 bits, unsigned)
  add \Subsystem_1.cfblk217_out1 * \Subsystem_1.cfblk102_out1 (8x8 bits, unsigned)
  add \Subsystem_1.u_cfblk102_inst.in1 * { 7'0000000 \Subsystem_1.u_cfblk9.FixPt_Relational_Operator_relop1 } (8x8 bits, unsigned)
  add \Subsystem_1.u_cfblk54.emi_280 * \Subsystem_1.cfblk183_reg_next[0] (8x8 bits, unsigned)
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000001000 for cells of type $fa.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000001 for cells of type $lcu.
Using extmapper simplemap for cells of type $logic_and.
Running "alumacc" on wrapper $extern:wrap:$neg:Y_WIDTH=9:A_WIDTH=9:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:Y_WIDTH=9:A_WIDTH=9:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:Y_WIDTH=9:A_WIDTH=9:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod\$__div_mod_u\WIDTH=32'00000000000000000000000000001001 for cells of type $__div_mod_u.
Using extmapper simplemap for cells of type $ne.
Using template $paramod$8045f2881226ae434b154710c783ad25023f386c\_90_alu for cells of type $alu.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=17:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=17:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=17:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=17:B_WIDTH=17:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=17:B_WIDTH=17:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=17:B_WIDTH=17:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=16:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=16:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=16:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=16:B_WIDTH=16:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=16:B_WIDTH=16:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=16:B_WIDTH=16:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=15:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=15:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=15:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=15:B_WIDTH=15:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=15:B_WIDTH=15:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=15:B_WIDTH=15:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=14:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=14:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=14:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=14:B_WIDTH=14:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=14:B_WIDTH=14:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=14:B_WIDTH=14:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=13:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=13:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=13:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=13:B_WIDTH=13:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=13:B_WIDTH=13:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=13:B_WIDTH=13:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=12:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=12:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=12:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=12:B_WIDTH=12:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=12:B_WIDTH=12:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=12:B_WIDTH=12:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=11:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=11:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=11:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=11:B_WIDTH=11:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=11:B_WIDTH=11:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=11:B_WIDTH=11:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=10:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=10:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=10:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=10:B_WIDTH=10:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=10:B_WIDTH=10:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=10:B_WIDTH=10:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=9:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=9:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=9:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=9:B_WIDTH=9:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=9:B_WIDTH=9:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=9:B_WIDTH=9:A_WIDTH=9:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$b305eac7d37b340b2185bd4e08260a7104721b32\_90_alu for cells of type $alu.
Using template $paramod$ec697b275c385d58888e181d4679e05a5cd5cca4\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001001 for cells of type $lcu.
Using template $paramod$52caae0feb7af543d7223d13bc7ae9580356cab7\_90_alu for cells of type $alu.
Using template $paramod$9dd2c168c92ea5e7211728a4dd85e9d07319b5c9\_90_alu for cells of type $alu.
Using template $paramod$b9c2f5fdca7a2fb3c384c319f77e69dd0092810e\_90_alu for cells of type $alu.
Using template $paramod$7ec5e66ab88c9f51d035070dfe0a06ec346d1216\_90_alu for cells of type $alu.
Using template $paramod$8fc04fdd16a9929ec08bc9962c2522fe8f7f851f\_90_alu for cells of type $alu.
Using template $paramod$49641a5ace7a8dbedd31c417f5a1b54fcecf6c7d\_90_alu for cells of type $alu.
Using template $paramod$d2fa05d38998afabc6d4f34471305d0af4b8b2df\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001010 for cells of type $lcu.
No more expansions possible.
<suppressed ~29156 debug messages>

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~22971 debug messages>

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~22884 debug messages>
Removed a total of 7628 cells.

8.3. Executing OPT_DFF pass (perform DFF optimizations).

8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 3717 unused cells and 20856 unused wires.
<suppressed ~3734 debug messages>

8.5. Finished fast OPT passes.

9. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

10. Executing FORMALFF pass.

11. Executing SIMPLEMAP pass (map simple cells to gate primitives).

12. Executing DFFUNMAP pass (unmap clock enable and synchronous reset from FFs).

13. Executing ABC pass (technology mapping using ABC).

13.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 20468 gates and 23539 wires to a netlist network with 3069 inputs and 3063 outputs.

13.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 5 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

13.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:    31207
ABC RESULTS:               NOT cells:    25394
ABC RESULTS:        internal signals:    17407
ABC RESULTS:           input signals:     3069
ABC RESULTS:          output signals:     3063
Removing temp directory.

14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 11282 unused wires.
<suppressed ~2452 debug messages>

15. Printing statistics.

=== top ===

   Number of wires:              59275
   Number of wire bits:          72818
   Number of public wires:        2009
   Number of public wire bits:   14682
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              58798
     $_AND_                      31207
     $_FF_                        1535
     $_NOT_                      25394
     $anyinit                      661
     $assert                         1

16. Executing AIGER backend.

End of script. Logfile hash: d45dc244b5, CPU: user 4.79s system 0.10s, MEM: 430.75 MB peak
Yosys 0.37+1 (git sha1 e1f4c5c9cbb, clang  -fPIC -Os)
Time spent: 30% 26x opt_expr (1 sec), 18% 1x abc (0 sec), ...
